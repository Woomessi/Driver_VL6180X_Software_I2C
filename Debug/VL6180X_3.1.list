
VL6180X_3.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e7c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  08004f88  08004f88  00014f88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050e4  080050e4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080050e4  080050e4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080050e4  080050e4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050e4  080050e4  000150e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080050e8  080050e8  000150e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080050ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000220  20000070  0800515c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000290  0800515c  00020290  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000978c  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b65  00000000  00000000  00029825  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a40  00000000  00000000  0002b390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000988  00000000  00000000  0002bdd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003b79  00000000  00000000  0002c758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009e64  00000000  00000000  000302d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086931  00000000  00000000  0003a135  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c0a66  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030a8  00000000  00000000  000c0ab8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08004f70 	.word	0x08004f70

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08004f70 	.word	0x08004f70

0800014c <I2C_Delay>:
  * �������: ��
  * �� �� ֵ: ��
  * ˵    ������
  */
static void I2C_Delay(void)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
		ѭ������Ϊ7ʱ��SCLƵ�� = 347KHz�� SCL�ߵ�ƽʱ��1.5us��SCL�͵�ƽʱ��2.87us 
	 	ѭ������Ϊ5ʱ��SCLƵ�� = 421KHz�� SCL�ߵ�ƽʱ��1.25us��SCL�͵�ƽʱ��2.375us 
        
    IAR���̱���Ч�ʸߣ���������Ϊ7
	*/
	for (i = 0; i < 29; i++);
 8000152:	2300      	movs	r3, #0
 8000154:	71fb      	strb	r3, [r7, #7]
 8000156:	e002      	b.n	800015e <I2C_Delay+0x12>
 8000158:	79fb      	ldrb	r3, [r7, #7]
 800015a:	3301      	adds	r3, #1
 800015c:	71fb      	strb	r3, [r7, #7]
 800015e:	79fb      	ldrb	r3, [r7, #7]
 8000160:	2b1c      	cmp	r3, #28
 8000162:	d9f9      	bls.n	8000158 <I2C_Delay+0xc>
}
 8000164:	bf00      	nop
 8000166:	bf00      	nop
 8000168:	370c      	adds	r7, #12
 800016a:	46bd      	mov	sp, r7
 800016c:	bc80      	pop	{r7}
 800016e:	4770      	bx	lr

08000170 <I2C_Start>:
  * �������: ��
  * �� �� ֵ: ��
  * ˵    ������
  */
void I2C_Start(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	/* ��SCL�ߵ�ƽʱ��SDA����һ�������ر�ʾI2C���������ź� */
	I2C_SDA_HIGH();
 8000174:	2201      	movs	r2, #1
 8000176:	2180      	movs	r1, #128	; 0x80
 8000178:	480c      	ldr	r0, [pc, #48]	; (80001ac <I2C_Start+0x3c>)
 800017a:	f003 f8a6 	bl	80032ca <HAL_GPIO_WritePin>
	I2C_SCL_HIGH();
 800017e:	2201      	movs	r2, #1
 8000180:	2140      	movs	r1, #64	; 0x40
 8000182:	480a      	ldr	r0, [pc, #40]	; (80001ac <I2C_Start+0x3c>)
 8000184:	f003 f8a1 	bl	80032ca <HAL_GPIO_WritePin>
	I2C_Delay();
 8000188:	f7ff ffe0 	bl	800014c <I2C_Delay>
	I2C_SDA_LOW();
 800018c:	2200      	movs	r2, #0
 800018e:	2180      	movs	r1, #128	; 0x80
 8000190:	4806      	ldr	r0, [pc, #24]	; (80001ac <I2C_Start+0x3c>)
 8000192:	f003 f89a 	bl	80032ca <HAL_GPIO_WritePin>
	I2C_Delay();
 8000196:	f7ff ffd9 	bl	800014c <I2C_Delay>
	I2C_SCL_LOW();
 800019a:	2200      	movs	r2, #0
 800019c:	2140      	movs	r1, #64	; 0x40
 800019e:	4803      	ldr	r0, [pc, #12]	; (80001ac <I2C_Start+0x3c>)
 80001a0:	f003 f893 	bl	80032ca <HAL_GPIO_WritePin>
	I2C_Delay();
 80001a4:	f7ff ffd2 	bl	800014c <I2C_Delay>
}
 80001a8:	bf00      	nop
 80001aa:	bd80      	pop	{r7, pc}
 80001ac:	40010c00 	.word	0x40010c00

080001b0 <I2C_Stop>:
  * �������: ��
  * �� �� ֵ: ��
  * ˵    ������
  */
void I2C_Stop(void)
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	af00      	add	r7, sp, #0
	/* ��SCL�ߵ�ƽʱ��SDA����һ�������ر�ʾI2C����ֹͣ�ź� */
	I2C_SDA_LOW();
 80001b4:	2200      	movs	r2, #0
 80001b6:	2180      	movs	r1, #128	; 0x80
 80001b8:	4808      	ldr	r0, [pc, #32]	; (80001dc <I2C_Stop+0x2c>)
 80001ba:	f003 f886 	bl	80032ca <HAL_GPIO_WritePin>
	I2C_SCL_HIGH();
 80001be:	2201      	movs	r2, #1
 80001c0:	2140      	movs	r1, #64	; 0x40
 80001c2:	4806      	ldr	r0, [pc, #24]	; (80001dc <I2C_Stop+0x2c>)
 80001c4:	f003 f881 	bl	80032ca <HAL_GPIO_WritePin>
	I2C_Delay();
 80001c8:	f7ff ffc0 	bl	800014c <I2C_Delay>
	I2C_SDA_HIGH();
 80001cc:	2201      	movs	r2, #1
 80001ce:	2180      	movs	r1, #128	; 0x80
 80001d0:	4802      	ldr	r0, [pc, #8]	; (80001dc <I2C_Stop+0x2c>)
 80001d2:	f003 f87a 	bl	80032ca <HAL_GPIO_WritePin>
}
 80001d6:	bf00      	nop
 80001d8:	bd80      	pop	{r7, pc}
 80001da:	bf00      	nop
 80001dc:	40010c00 	.word	0x40010c00

080001e0 <I2C_SendByte>:
  * �������: Byte �� �ȴ����͵��ֽ�
  * �� �� ֵ: ��
  * ˵    ������
  */
void I2C_SendByte(uint8_t Byte)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b084      	sub	sp, #16
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	4603      	mov	r3, r0
 80001e8:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	/* �ȷ����ֽڵĸ�λbit7 */
	for (i = 0; i < 8; i++)
 80001ea:	2300      	movs	r3, #0
 80001ec:	73fb      	strb	r3, [r7, #15]
 80001ee:	e02c      	b.n	800024a <I2C_SendByte+0x6a>
	{		
		if (Byte & 0x80)//提取当前字节最高有效位
 80001f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	da05      	bge.n	8000204 <I2C_SendByte+0x24>
		{
			I2C_SDA_HIGH();
 80001f8:	2201      	movs	r2, #1
 80001fa:	2180      	movs	r1, #128	; 0x80
 80001fc:	4817      	ldr	r0, [pc, #92]	; (800025c <I2C_SendByte+0x7c>)
 80001fe:	f003 f864 	bl	80032ca <HAL_GPIO_WritePin>
 8000202:	e004      	b.n	800020e <I2C_SendByte+0x2e>
		}
		else
		{
			I2C_SDA_LOW();
 8000204:	2200      	movs	r2, #0
 8000206:	2180      	movs	r1, #128	; 0x80
 8000208:	4814      	ldr	r0, [pc, #80]	; (800025c <I2C_SendByte+0x7c>)
 800020a:	f003 f85e 	bl	80032ca <HAL_GPIO_WritePin>
		}
		I2C_Delay();
 800020e:	f7ff ff9d 	bl	800014c <I2C_Delay>
		I2C_SCL_HIGH();
 8000212:	2201      	movs	r2, #1
 8000214:	2140      	movs	r1, #64	; 0x40
 8000216:	4811      	ldr	r0, [pc, #68]	; (800025c <I2C_SendByte+0x7c>)
 8000218:	f003 f857 	bl	80032ca <HAL_GPIO_WritePin>
		I2C_Delay();	
 800021c:	f7ff ff96 	bl	800014c <I2C_Delay>
		I2C_SCL_LOW();//仅能在SCL为低电平时改变SDA的电平
 8000220:	2200      	movs	r2, #0
 8000222:	2140      	movs	r1, #64	; 0x40
 8000224:	480d      	ldr	r0, [pc, #52]	; (800025c <I2C_SendByte+0x7c>)
 8000226:	f003 f850 	bl	80032ca <HAL_GPIO_WritePin>
		if (i == 7)
 800022a:	7bfb      	ldrb	r3, [r7, #15]
 800022c:	2b07      	cmp	r3, #7
 800022e:	d104      	bne.n	800023a <I2C_SendByte+0x5a>
		{
			I2C_SDA_HIGH(); //
 8000230:	2201      	movs	r2, #1
 8000232:	2180      	movs	r1, #128	; 0x80
 8000234:	4809      	ldr	r0, [pc, #36]	; (800025c <I2C_SendByte+0x7c>)
 8000236:	f003 f848 	bl	80032ca <HAL_GPIO_WritePin>
		}
		Byte <<= 1;//左移一位，以读取下一位
 800023a:	79fb      	ldrb	r3, [r7, #7]
 800023c:	005b      	lsls	r3, r3, #1
 800023e:	71fb      	strb	r3, [r7, #7]
		I2C_Delay();
 8000240:	f7ff ff84 	bl	800014c <I2C_Delay>
	for (i = 0; i < 8; i++)
 8000244:	7bfb      	ldrb	r3, [r7, #15]
 8000246:	3301      	adds	r3, #1
 8000248:	73fb      	strb	r3, [r7, #15]
 800024a:	7bfb      	ldrb	r3, [r7, #15]
 800024c:	2b07      	cmp	r3, #7
 800024e:	d9cf      	bls.n	80001f0 <I2C_SendByte+0x10>
	}
}
 8000250:	bf00      	nop
 8000252:	bf00      	nop
 8000254:	3710      	adds	r7, #16
 8000256:	46bd      	mov	sp, r7
 8000258:	bd80      	pop	{r7, pc}
 800025a:	bf00      	nop
 800025c:	40010c00 	.word	0x40010c00

08000260 <I2C_ReadByte>:
  * �������: ��
  * �� �� ֵ: ����������
  * ˵    ������
  */
uint8_t I2C_ReadByte(uint8_t ack)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	b084      	sub	sp, #16
 8000264:	af00      	add	r7, sp, #0
 8000266:	4603      	mov	r3, r0
 8000268:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	uint8_t value;//读取值

	value = 0;
 800026a:	2300      	movs	r3, #0
 800026c:	73bb      	strb	r3, [r7, #14]
	for (i = 0; i < 8; i++)
 800026e:	2300      	movs	r3, #0
 8000270:	73fb      	strb	r3, [r7, #15]
 8000272:	e01d      	b.n	80002b0 <I2C_ReadByte+0x50>
	{
		value <<= 1;
 8000274:	7bbb      	ldrb	r3, [r7, #14]
 8000276:	005b      	lsls	r3, r3, #1
 8000278:	73bb      	strb	r3, [r7, #14]
		I2C_SCL_HIGH();
 800027a:	2201      	movs	r2, #1
 800027c:	2140      	movs	r1, #64	; 0x40
 800027e:	4814      	ldr	r0, [pc, #80]	; (80002d0 <I2C_ReadByte+0x70>)
 8000280:	f003 f823 	bl	80032ca <HAL_GPIO_WritePin>
		I2C_Delay();
 8000284:	f7ff ff62 	bl	800014c <I2C_Delay>
		if (I2C_SDA_READ())
 8000288:	2180      	movs	r1, #128	; 0x80
 800028a:	4811      	ldr	r0, [pc, #68]	; (80002d0 <I2C_ReadByte+0x70>)
 800028c:	f003 f806 	bl	800329c <HAL_GPIO_ReadPin>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d002      	beq.n	800029c <I2C_ReadByte+0x3c>
		{
			value++;
 8000296:	7bbb      	ldrb	r3, [r7, #14]
 8000298:	3301      	adds	r3, #1
 800029a:	73bb      	strb	r3, [r7, #14]
		}
		I2C_SCL_LOW();//仅能在SCL为低电平时改变SDA的电平
 800029c:	2200      	movs	r2, #0
 800029e:	2140      	movs	r1, #64	; 0x40
 80002a0:	480b      	ldr	r0, [pc, #44]	; (80002d0 <I2C_ReadByte+0x70>)
 80002a2:	f003 f812 	bl	80032ca <HAL_GPIO_WritePin>
		I2C_Delay();
 80002a6:	f7ff ff51 	bl	800014c <I2C_Delay>
	for (i = 0; i < 8; i++)
 80002aa:	7bfb      	ldrb	r3, [r7, #15]
 80002ac:	3301      	adds	r3, #1
 80002ae:	73fb      	strb	r3, [r7, #15]
 80002b0:	7bfb      	ldrb	r3, [r7, #15]
 80002b2:	2b07      	cmp	r3, #7
 80002b4:	d9de      	bls.n	8000274 <I2C_ReadByte+0x14>
	}
  if(ack==0)
 80002b6:	79fb      	ldrb	r3, [r7, #7]
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d102      	bne.n	80002c2 <I2C_ReadByte+0x62>
		I2C_NAck();
 80002bc:	f000 f856 	bl	800036c <I2C_NAck>
 80002c0:	e001      	b.n	80002c6 <I2C_ReadByte+0x66>
	else
		I2C_Ack();
 80002c2:	f000 f833 	bl	800032c <I2C_Ack>
	return value;
 80002c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80002c8:	4618      	mov	r0, r3
 80002ca:	3710      	adds	r7, #16
 80002cc:	46bd      	mov	sp, r7
 80002ce:	bd80      	pop	{r7, pc}
 80002d0:	40010c00 	.word	0x40010c00

080002d4 <I2C_WaitAck>:
  * �������: ��
  * �� �� ֵ: ����0��ʾ��ȷӦ��1��ʾ��������Ӧ
  * ˵    ������
  */
uint8_t I2C_WaitAck(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b082      	sub	sp, #8
 80002d8:	af00      	add	r7, sp, #0
	uint8_t re;

	I2C_SDA_HIGH();	/* CPU�ͷ�SDA���� */
 80002da:	2201      	movs	r2, #1
 80002dc:	2180      	movs	r1, #128	; 0x80
 80002de:	4812      	ldr	r0, [pc, #72]	; (8000328 <I2C_WaitAck+0x54>)
 80002e0:	f002 fff3 	bl	80032ca <HAL_GPIO_WritePin>
	I2C_Delay();
 80002e4:	f7ff ff32 	bl	800014c <I2C_Delay>
	I2C_SCL_HIGH();	/* CPU����SCL = 1, ��ʱ�����᷵��ACKӦ�� */
 80002e8:	2201      	movs	r2, #1
 80002ea:	2140      	movs	r1, #64	; 0x40
 80002ec:	480e      	ldr	r0, [pc, #56]	; (8000328 <I2C_WaitAck+0x54>)
 80002ee:	f002 ffec 	bl	80032ca <HAL_GPIO_WritePin>
	I2C_Delay();
 80002f2:	f7ff ff2b 	bl	800014c <I2C_Delay>
	if (I2C_SDA_READ())	/* CPU��ȡSDA����״̬ */
 80002f6:	2180      	movs	r1, #128	; 0x80
 80002f8:	480b      	ldr	r0, [pc, #44]	; (8000328 <I2C_WaitAck+0x54>)
 80002fa:	f002 ffcf 	bl	800329c <HAL_GPIO_ReadPin>
 80002fe:	4603      	mov	r3, r0
 8000300:	2b00      	cmp	r3, #0
 8000302:	d002      	beq.n	800030a <I2C_WaitAck+0x36>
	{
		re = 1;
 8000304:	2301      	movs	r3, #1
 8000306:	71fb      	strb	r3, [r7, #7]
 8000308:	e001      	b.n	800030e <I2C_WaitAck+0x3a>
	}
	else
	{
		re = 0;
 800030a:	2300      	movs	r3, #0
 800030c:	71fb      	strb	r3, [r7, #7]
	}
	I2C_SCL_LOW();
 800030e:	2200      	movs	r2, #0
 8000310:	2140      	movs	r1, #64	; 0x40
 8000312:	4805      	ldr	r0, [pc, #20]	; (8000328 <I2C_WaitAck+0x54>)
 8000314:	f002 ffd9 	bl	80032ca <HAL_GPIO_WritePin>
	I2C_Delay();
 8000318:	f7ff ff18 	bl	800014c <I2C_Delay>
	return re;
 800031c:	79fb      	ldrb	r3, [r7, #7]
}
 800031e:	4618      	mov	r0, r3
 8000320:	3708      	adds	r7, #8
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	40010c00 	.word	0x40010c00

0800032c <I2C_Ack>:
  * �������: ��
  * �� �� ֵ: ��
  * ˵    ������
  */
void I2C_Ack(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0
	I2C_SDA_LOW();	/* CPU����SDA = 0 */
 8000330:	2200      	movs	r2, #0
 8000332:	2180      	movs	r1, #128	; 0x80
 8000334:	480c      	ldr	r0, [pc, #48]	; (8000368 <I2C_Ack+0x3c>)
 8000336:	f002 ffc8 	bl	80032ca <HAL_GPIO_WritePin>
	I2C_Delay();
 800033a:	f7ff ff07 	bl	800014c <I2C_Delay>
	I2C_SCL_HIGH();	/* CPU����1��ʱ�� */
 800033e:	2201      	movs	r2, #1
 8000340:	2140      	movs	r1, #64	; 0x40
 8000342:	4809      	ldr	r0, [pc, #36]	; (8000368 <I2C_Ack+0x3c>)
 8000344:	f002 ffc1 	bl	80032ca <HAL_GPIO_WritePin>
	I2C_Delay();
 8000348:	f7ff ff00 	bl	800014c <I2C_Delay>
	I2C_SCL_LOW();
 800034c:	2200      	movs	r2, #0
 800034e:	2140      	movs	r1, #64	; 0x40
 8000350:	4805      	ldr	r0, [pc, #20]	; (8000368 <I2C_Ack+0x3c>)
 8000352:	f002 ffba 	bl	80032ca <HAL_GPIO_WritePin>
	I2C_Delay();
 8000356:	f7ff fef9 	bl	800014c <I2C_Delay>
	I2C_SDA_HIGH();	/* CPU�ͷ�SDA���� */
 800035a:	2201      	movs	r2, #1
 800035c:	2180      	movs	r1, #128	; 0x80
 800035e:	4802      	ldr	r0, [pc, #8]	; (8000368 <I2C_Ack+0x3c>)
 8000360:	f002 ffb3 	bl	80032ca <HAL_GPIO_WritePin>
}
 8000364:	bf00      	nop
 8000366:	bd80      	pop	{r7, pc}
 8000368:	40010c00 	.word	0x40010c00

0800036c <I2C_NAck>:
  * �������: ��
  * �� �� ֵ: ��
  * ˵    ������
  */
void I2C_NAck(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0
	I2C_SDA_HIGH();	/* CPU����SDA = 1 */
 8000370:	2201      	movs	r2, #1
 8000372:	2180      	movs	r1, #128	; 0x80
 8000374:	480a      	ldr	r0, [pc, #40]	; (80003a0 <I2C_NAck+0x34>)
 8000376:	f002 ffa8 	bl	80032ca <HAL_GPIO_WritePin>
	I2C_Delay();
 800037a:	f7ff fee7 	bl	800014c <I2C_Delay>
	I2C_SCL_HIGH();	/* CPU����1��ʱ�� */
 800037e:	2201      	movs	r2, #1
 8000380:	2140      	movs	r1, #64	; 0x40
 8000382:	4807      	ldr	r0, [pc, #28]	; (80003a0 <I2C_NAck+0x34>)
 8000384:	f002 ffa1 	bl	80032ca <HAL_GPIO_WritePin>
	I2C_Delay();
 8000388:	f7ff fee0 	bl	800014c <I2C_Delay>
	I2C_SCL_LOW();
 800038c:	2200      	movs	r2, #0
 800038e:	2140      	movs	r1, #64	; 0x40
 8000390:	4803      	ldr	r0, [pc, #12]	; (80003a0 <I2C_NAck+0x34>)
 8000392:	f002 ff9a 	bl	80032ca <HAL_GPIO_WritePin>
	I2C_Delay();	
 8000396:	f7ff fed9 	bl	800014c <I2C_Delay>
}
 800039a:	bf00      	nop
 800039c:	bd80      	pop	{r7, pc}
 800039e:	bf00      	nop
 80003a0:	40010c00 	.word	0x40010c00

080003a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80003a4:	b480      	push	{r7}
 80003a6:	b083      	sub	sp, #12
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	4603      	mov	r3, r0
 80003ac:	6039      	str	r1, [r7, #0]
 80003ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80003b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	db0a      	blt.n	80003ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003b8:	683b      	ldr	r3, [r7, #0]
 80003ba:	b2da      	uxtb	r2, r3
 80003bc:	490c      	ldr	r1, [pc, #48]	; (80003f0 <__NVIC_SetPriority+0x4c>)
 80003be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003c2:	0112      	lsls	r2, r2, #4
 80003c4:	b2d2      	uxtb	r2, r2
 80003c6:	440b      	add	r3, r1
 80003c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80003cc:	e00a      	b.n	80003e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003ce:	683b      	ldr	r3, [r7, #0]
 80003d0:	b2da      	uxtb	r2, r3
 80003d2:	4908      	ldr	r1, [pc, #32]	; (80003f4 <__NVIC_SetPriority+0x50>)
 80003d4:	79fb      	ldrb	r3, [r7, #7]
 80003d6:	f003 030f 	and.w	r3, r3, #15
 80003da:	3b04      	subs	r3, #4
 80003dc:	0112      	lsls	r2, r2, #4
 80003de:	b2d2      	uxtb	r2, r2
 80003e0:	440b      	add	r3, r1
 80003e2:	761a      	strb	r2, [r3, #24]
}
 80003e4:	bf00      	nop
 80003e6:	370c      	adds	r7, #12
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bc80      	pop	{r7}
 80003ec:	4770      	bx	lr
 80003ee:	bf00      	nop
 80003f0:	e000e100 	.word	0xe000e100
 80003f4:	e000ed00 	.word	0xe000ed00

080003f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b082      	sub	sp, #8
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	3b01      	subs	r3, #1
 8000404:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000408:	d301      	bcc.n	800040e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800040a:	2301      	movs	r3, #1
 800040c:	e00f      	b.n	800042e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800040e:	4a0a      	ldr	r2, [pc, #40]	; (8000438 <SysTick_Config+0x40>)
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	3b01      	subs	r3, #1
 8000414:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000416:	210f      	movs	r1, #15
 8000418:	f04f 30ff 	mov.w	r0, #4294967295
 800041c:	f7ff ffc2 	bl	80003a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000420:	4b05      	ldr	r3, [pc, #20]	; (8000438 <SysTick_Config+0x40>)
 8000422:	2200      	movs	r2, #0
 8000424:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000426:	4b04      	ldr	r3, [pc, #16]	; (8000438 <SysTick_Config+0x40>)
 8000428:	2207      	movs	r2, #7
 800042a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800042c:	2300      	movs	r3, #0
}
 800042e:	4618      	mov	r0, r3
 8000430:	3708      	adds	r7, #8
 8000432:	46bd      	mov	sp, r7
 8000434:	bd80      	pop	{r7, pc}
 8000436:	bf00      	nop
 8000438:	e000e010 	.word	0xe000e010

0800043c <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b082      	sub	sp, #8
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000444:	1d39      	adds	r1, r7, #4
 8000446:	f04f 33ff 	mov.w	r3, #4294967295
 800044a:	2201      	movs	r2, #1
 800044c:	4803      	ldr	r0, [pc, #12]	; (800045c <__io_putchar+0x20>)
 800044e:	f003 fbbc 	bl	8003bca <HAL_UART_Transmit>
  return ch;
 8000452:	687b      	ldr	r3, [r7, #4]
}
 8000454:	4618      	mov	r0, r3
 8000456:	3708      	adds	r7, #8
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}
 800045c:	2000008c 	.word	0x2000008c

08000460 <__io_getchar>:
#else
#define PUTCHAR_PROTOTYPE int fgetc(FILE *f)
#endif

GETCHAR_PROTOTYPE
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b082      	sub	sp, #8
 8000464:	af00      	add	r7, sp, #0
  uint8_t ch;
  HAL_UART_Receive(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000466:	1df9      	adds	r1, r7, #7
 8000468:	f04f 33ff 	mov.w	r3, #4294967295
 800046c:	2201      	movs	r2, #1
 800046e:	4804      	ldr	r0, [pc, #16]	; (8000480 <__io_getchar+0x20>)
 8000470:	f003 fc3d 	bl	8003cee <HAL_UART_Receive>
  return ch;
 8000474:	79fb      	ldrb	r3, [r7, #7]
}
 8000476:	4618      	mov	r0, r3
 8000478:	3708      	adds	r7, #8
 800047a:	46bd      	mov	sp, r7
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	2000008c 	.word	0x2000008c

08000484 <VL6180x_I2CWrite>:
  I2C_Stop();//关闭I2C总线
  return status = 0;
}
#else
int VL6180x_I2CWrite(VL6180xDev_t dev, uint8_t *buff, uint8_t len)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b086      	sub	sp, #24
 8000488:	af00      	add	r7, sp, #0
 800048a:	60f8      	str	r0, [r7, #12]
 800048c:	60b9      	str	r1, [r7, #8]
 800048e:	4613      	mov	r3, r2
 8000490:	71fb      	strb	r3, [r7, #7]
  int status, i;
  I2C_Start();//开启I2C总线
 8000492:	f7ff fe6d 	bl	8000170 <I2C_Start>
  I2C_SendByte(dev->i2c_dev_addr | 0);//发送8位设备地址及LSB的写方向位，实现写功能
 8000496:	68fb      	ldr	r3, [r7, #12]
 8000498:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800049c:	b2db      	uxtb	r3, r3
 800049e:	4618      	mov	r0, r3
 80004a0:	f7ff fe9e 	bl	80001e0 <I2C_SendByte>
  if (I2C_WaitAck())//如果从机没有应答
 80004a4:	f7ff ff16 	bl	80002d4 <I2C_WaitAck>
 80004a8:	4603      	mov	r3, r0
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d003      	beq.n	80004b6 <VL6180x_I2CWrite+0x32>
  {
    I2C_Stop();//关闭I2C总线
 80004ae:	f7ff fe7f 	bl	80001b0 <I2C_Stop>
    return 1;//返回报错标志
 80004b2:	2301      	movs	r3, #1
 80004b4:	e026      	b.n	8000504 <VL6180x_I2CWrite+0x80>
  }
  for (i = 0; i < len; i++)
 80004b6:	2300      	movs	r3, #0
 80004b8:	613b      	str	r3, [r7, #16]
 80004ba:	e01c      	b.n	80004f6 <VL6180x_I2CWrite+0x72>
  {
    I2C_SendByte(buff[i]);//发送buff中的各字节
 80004bc:	693b      	ldr	r3, [r7, #16]
 80004be:	68ba      	ldr	r2, [r7, #8]
 80004c0:	4413      	add	r3, r2
 80004c2:	781b      	ldrb	r3, [r3, #0]
 80004c4:	4618      	mov	r0, r3
 80004c6:	f7ff fe8b 	bl	80001e0 <I2C_SendByte>
    if (i == len - 1)//在发送最后一个字节的数据时
 80004ca:	79fb      	ldrb	r3, [r7, #7]
 80004cc:	3b01      	subs	r3, #1
 80004ce:	693a      	ldr	r2, [r7, #16]
 80004d0:	429a      	cmp	r2, r3
 80004d2:	d109      	bne.n	80004e8 <VL6180x_I2CWrite+0x64>
    {
      if (I2C_WaitAck())//等待从机应答
 80004d4:	f7ff fefe 	bl	80002d4 <I2C_WaitAck>
 80004d8:	4603      	mov	r3, r0
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d008      	beq.n	80004f0 <VL6180x_I2CWrite+0x6c>
      {
        I2C_Stop();//关闭I2C总线
 80004de:	f7ff fe67 	bl	80001b0 <I2C_Stop>
        status = 1;//返回报错标志
 80004e2:	2301      	movs	r3, #1
 80004e4:	617b      	str	r3, [r7, #20]
 80004e6:	e003      	b.n	80004f0 <VL6180x_I2CWrite+0x6c>
      }
    }
    else
    {
      status = I2C_WaitAck();//返回报错标志
 80004e8:	f7ff fef4 	bl	80002d4 <I2C_WaitAck>
 80004ec:	4603      	mov	r3, r0
 80004ee:	617b      	str	r3, [r7, #20]
  for (i = 0; i < len; i++)
 80004f0:	693b      	ldr	r3, [r7, #16]
 80004f2:	3301      	adds	r3, #1
 80004f4:	613b      	str	r3, [r7, #16]
 80004f6:	79fb      	ldrb	r3, [r7, #7]
 80004f8:	693a      	ldr	r2, [r7, #16]
 80004fa:	429a      	cmp	r2, r3
 80004fc:	dbde      	blt.n	80004bc <VL6180x_I2CWrite+0x38>
    }
  }
  I2C_Stop();//关闭I2C总线
 80004fe:	f7ff fe57 	bl	80001b0 <I2C_Stop>
  return status;
 8000502:	697b      	ldr	r3, [r7, #20]
}
 8000504:	4618      	mov	r0, r3
 8000506:	3718      	adds	r7, #24
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}

0800050c <VL6180x_I2CRead>:

/* VL6180X底层驱动函数：读 */
int VL6180x_I2CRead(VL6180xDev_t dev, uint8_t *buff, uint8_t len)
{
 800050c:	b590      	push	{r4, r7, lr}
 800050e:	b087      	sub	sp, #28
 8000510:	af00      	add	r7, sp, #0
 8000512:	60f8      	str	r0, [r7, #12]
 8000514:	60b9      	str	r1, [r7, #8]
 8000516:	4613      	mov	r3, r2
 8000518:	71fb      	strb	r3, [r7, #7]
  int status, i;
  I2C_Start();//开启I2C总线
 800051a:	f7ff fe29 	bl	8000170 <I2C_Start>
  I2C_SendByte(dev->i2c_dev_addr | 1);//发送8位设备地址及LSB的读方向位，实现读功能
 800051e:	68fb      	ldr	r3, [r7, #12]
 8000520:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8000524:	b25b      	sxtb	r3, r3
 8000526:	f043 0301 	orr.w	r3, r3, #1
 800052a:	b25b      	sxtb	r3, r3
 800052c:	b2db      	uxtb	r3, r3
 800052e:	4618      	mov	r0, r3
 8000530:	f7ff fe56 	bl	80001e0 <I2C_SendByte>
  I2C_WaitAck();//等待从机应答
 8000534:	f7ff fece 	bl	80002d4 <I2C_WaitAck>
  for (i = 0; i < len; i++)
 8000538:	2300      	movs	r3, #0
 800053a:	617b      	str	r3, [r7, #20]
 800053c:	e018      	b.n	8000570 <VL6180x_I2CRead+0x64>
  {
    if (i == len - 1)//在读取最后一个字节的数据时
 800053e:	79fb      	ldrb	r3, [r7, #7]
 8000540:	3b01      	subs	r3, #1
 8000542:	697a      	ldr	r2, [r7, #20]
 8000544:	429a      	cmp	r2, r3
 8000546:	d108      	bne.n	800055a <VL6180x_I2CRead+0x4e>
    {
      buff[i] = I2C_ReadByte(0);//读取数据，将其保存于buff[i]，并向从机发送非应答信号，终止数据读取
 8000548:	697b      	ldr	r3, [r7, #20]
 800054a:	68ba      	ldr	r2, [r7, #8]
 800054c:	18d4      	adds	r4, r2, r3
 800054e:	2000      	movs	r0, #0
 8000550:	f7ff fe86 	bl	8000260 <I2C_ReadByte>
 8000554:	4603      	mov	r3, r0
 8000556:	7023      	strb	r3, [r4, #0]
 8000558:	e007      	b.n	800056a <VL6180x_I2CRead+0x5e>
    }
    else
    {
      buff[i] = I2C_ReadByte(1);//读取数据，将其保存于buff[i]，并向从机发送应答信号，继续读取数据
 800055a:	697b      	ldr	r3, [r7, #20]
 800055c:	68ba      	ldr	r2, [r7, #8]
 800055e:	18d4      	adds	r4, r2, r3
 8000560:	2001      	movs	r0, #1
 8000562:	f7ff fe7d 	bl	8000260 <I2C_ReadByte>
 8000566:	4603      	mov	r3, r0
 8000568:	7023      	strb	r3, [r4, #0]
  for (i = 0; i < len; i++)
 800056a:	697b      	ldr	r3, [r7, #20]
 800056c:	3301      	adds	r3, #1
 800056e:	617b      	str	r3, [r7, #20]
 8000570:	79fb      	ldrb	r3, [r7, #7]
 8000572:	697a      	ldr	r2, [r7, #20]
 8000574:	429a      	cmp	r2, r3
 8000576:	dbe2      	blt.n	800053e <VL6180x_I2CRead+0x32>
    }
  }
  I2C_Stop();//关闭I2C总线
 8000578:	f7ff fe1a 	bl	80001b0 <I2C_Stop>
  return status = 0;
 800057c:	2300      	movs	r3, #0
 800057e:	613b      	str	r3, [r7, #16]
 8000580:	693b      	ldr	r3, [r7, #16]
}
 8000582:	4618      	mov	r0, r3
 8000584:	371c      	adds	r7, #28
 8000586:	46bd      	mov	sp, r7
 8000588:	bd90      	pop	{r4, r7, pc}
	...

0800058c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b086      	sub	sp, #24
 8000590:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000592:	f002 fb9d 	bl	8002cd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000596:	f000 f8ff 	bl	8000798 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059a:	f000 f96d 	bl	8000878 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800059e:	f000 f941 	bl	8000824 <MX_USART1_UART_Init>
//  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
//  uint8_t status;
//  uint8_t *data = 0x200027d9;//初始化指针，为其分配一个空闲的地址
//  status = VL6180x_RdByte(theVL6180xDev, IDENTIFICATION_MODEL_ID, data);//读取设备id，测试I2C驱动是否正常

  SysTick_Config(HAL_RCC_GetHCLKFreq() / 1000);
 80005a2:	f003 fa75 	bl	8003a90 <HAL_RCC_GetHCLKFreq>
 80005a6:	4603      	mov	r3, r0
 80005a8:	4a2c      	ldr	r2, [pc, #176]	; (800065c <main+0xd0>)
 80005aa:	fba2 2303 	umull	r2, r3, r2, r3
 80005ae:	099b      	lsrs	r3, r3, #6
 80005b0:	4618      	mov	r0, r3
 80005b2:	f7ff ff21 	bl	80003f8 <SysTick_Config>

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12 | GPIO_PIN_13, 0);//复位所有的传感器
 80005b6:	2200      	movs	r2, #0
 80005b8:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80005bc:	4828      	ldr	r0, [pc, #160]	; (8000660 <main+0xd4>)
 80005be:	f002 fe84 	bl	80032ca <HAL_GPIO_WritePin>

  int i, id, FinalI2cAddr, status;
  uint16_t GPIO_index[DEVICE_NUMBER] = {GPIO_PIN_12, GPIO_PIN_13};//保存要使能的GPIO端口
 80005c2:	4b28      	ldr	r3, [pc, #160]	; (8000664 <main+0xd8>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	607b      	str	r3, [r7, #4]
  //逐一更新各传感器的地址
  for (i = 0; i <= DEVICE_NUMBER - 1; i++)
 80005c8:	2300      	movs	r3, #0
 80005ca:	617b      	str	r3, [r7, #20]
 80005cc:	e040      	b.n	8000650 <main+0xc4>
  {
    HAL_GPIO_WritePin(GPIOB, GPIO_index[i], 1);//使能当前传感器
 80005ce:	697b      	ldr	r3, [r7, #20]
 80005d0:	005b      	lsls	r3, r3, #1
 80005d2:	3318      	adds	r3, #24
 80005d4:	443b      	add	r3, r7
 80005d6:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80005da:	2201      	movs	r2, #1
 80005dc:	4619      	mov	r1, r3
 80005de:	4820      	ldr	r0, [pc, #128]	; (8000660 <main+0xd4>)
 80005e0:	f002 fe73 	bl	80032ca <HAL_GPIO_WritePin>
    HAL_Delay(2);
 80005e4:	2002      	movs	r0, #2
 80005e6:	f002 fbd5 	bl	8002d94 <HAL_Delay>
    Devs[i].i2c_dev_addr = 0x52;//刚刚使能的传感器，访问地址仍为默认地址0x52
 80005ea:	4a1f      	ldr	r2, [pc, #124]	; (8000668 <main+0xdc>)
 80005ec:	697b      	ldr	r3, [r7, #20]
 80005ee:	21d4      	movs	r1, #212	; 0xd4
 80005f0:	fb01 f303 	mul.w	r3, r1, r3
 80005f4:	4413      	add	r3, r2
 80005f6:	33d0      	adds	r3, #208	; 0xd0
 80005f8:	2252      	movs	r2, #82	; 0x52
 80005fa:	601a      	str	r2, [r3, #0]
    FinalI2cAddr = 0x52 + ((i + 1) * 2);//获取修改后的地址
 80005fc:	697b      	ldr	r3, [r7, #20]
 80005fe:	332a      	adds	r3, #42	; 0x2a
 8000600:	005b      	lsls	r3, r3, #1
 8000602:	613b      	str	r3, [r7, #16]
    status = VL6180x_SetI2CAddress(&Devs[i], FinalI2cAddr); //将修改后的地址写入传感器相关寄存器
 8000604:	697b      	ldr	r3, [r7, #20]
 8000606:	22d4      	movs	r2, #212	; 0xd4
 8000608:	fb02 f303 	mul.w	r3, r2, r3
 800060c:	4a16      	ldr	r2, [pc, #88]	; (8000668 <main+0xdc>)
 800060e:	4413      	add	r3, r2
 8000610:	693a      	ldr	r2, [r7, #16]
 8000612:	b2d2      	uxtb	r2, r2
 8000614:	4611      	mov	r1, r2
 8000616:	4618      	mov	r0, r3
 8000618:	f000 fb62 	bl	8000ce0 <VL6180x_SetI2CAddress>
 800061c:	60f8      	str	r0, [r7, #12]
    Devs[i].i2c_dev_addr = FinalI2cAddr;//记录修改后的地址
 800061e:	4a12      	ldr	r2, [pc, #72]	; (8000668 <main+0xdc>)
 8000620:	697b      	ldr	r3, [r7, #20]
 8000622:	21d4      	movs	r1, #212	; 0xd4
 8000624:	fb01 f303 	mul.w	r3, r1, r3
 8000628:	4413      	add	r3, r2
 800062a:	33d0      	adds	r3, #208	; 0xd0
 800062c:	693a      	ldr	r2, [r7, #16]
 800062e:	601a      	str	r2, [r3, #0]
    status = VL6180x_RdByte(&Devs[i], IDENTIFICATION_MODEL_ID, &id);//测试I2C读值是否正常
 8000630:	697b      	ldr	r3, [r7, #20]
 8000632:	22d4      	movs	r2, #212	; 0xd4
 8000634:	fb02 f303 	mul.w	r3, r2, r3
 8000638:	4a0b      	ldr	r2, [pc, #44]	; (8000668 <main+0xdc>)
 800063a:	4413      	add	r3, r2
 800063c:	f107 0208 	add.w	r2, r7, #8
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f002 fa49 	bl	8002ada <VL6180x_RdByte>
 8000648:	60f8      	str	r0, [r7, #12]
  for (i = 0; i <= DEVICE_NUMBER - 1; i++)
 800064a:	697b      	ldr	r3, [r7, #20]
 800064c:	3301      	adds	r3, #1
 800064e:	617b      	str	r3, [r7, #20]
 8000650:	697b      	ldr	r3, [r7, #20]
 8000652:	2b01      	cmp	r3, #1
 8000654:	ddbb      	ble.n	80005ce <main+0x42>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    Sample_SimpleRanging();//测距函数
 8000656:	f000 f809 	bl	800066c <Sample_SimpleRanging>
  {
 800065a:	e7fc      	b.n	8000656 <main+0xca>
 800065c:	10624dd3 	.word	0x10624dd3
 8000660:	40010c00 	.word	0x40010c00
 8000664:	08004f88 	.word	0x08004f88
 8000668:	200000d0 	.word	0x200000d0

0800066c <Sample_SimpleRanging>:
 * @brief System Clock Configuration
 * @retval None
 */

void Sample_SimpleRanging(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b096      	sub	sp, #88	; 0x58
 8000670:	af00      	add	r7, sp, #0
  VL6180x_RangeData_t Range[DEVICE_NUMBER];

  int i;
  for (i = 0; i <= DEVICE_NUMBER - 1; i++)
 8000672:	2300      	movs	r3, #0
 8000674:	657b      	str	r3, [r7, #84]	; 0x54
 8000676:	e07e      	b.n	8000776 <Sample_SimpleRanging+0x10a>
  {
    VL6180x_InitData(&Devs[i]);
 8000678:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800067a:	22d4      	movs	r2, #212	; 0xd4
 800067c:	fb02 f303 	mul.w	r3, r2, r3
 8000680:	4a41      	ldr	r2, [pc, #260]	; (8000788 <Sample_SimpleRanging+0x11c>)
 8000682:	4413      	add	r3, r2
 8000684:	4618      	mov	r0, r3
 8000686:	f000 faa1 	bl	8000bcc <VL6180x_InitData>
    VL6180x_Prepare(&Devs[i]);
 800068a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800068c:	22d4      	movs	r2, #212	; 0xd4
 800068e:	fb02 f303 	mul.w	r3, r2, r3
 8000692:	4a3d      	ldr	r2, [pc, #244]	; (8000788 <Sample_SimpleRanging+0x11c>)
 8000694:	4413      	add	r3, r2
 8000696:	4618      	mov	r0, r3
 8000698:	f000 fb92 	bl	8000dc0 <VL6180x_Prepare>
    ///* 调整测量范围
    VL6180x_SetGroupParamHold(&Devs[i], 1);
 800069c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800069e:	22d4      	movs	r2, #212	; 0xd4
 80006a0:	fb02 f303 	mul.w	r3, r2, r3
 80006a4:	4a38      	ldr	r2, [pc, #224]	; (8000788 <Sample_SimpleRanging+0x11c>)
 80006a6:	4413      	add	r3, r2
 80006a8:	2101      	movs	r1, #1
 80006aa:	4618      	mov	r0, r3
 80006ac:	f000 fb6f 	bl	8000d8e <VL6180x_SetGroupParamHold>
    VL6180x_RangeGetThresholds(&Devs[i], NULL, NULL);
 80006b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80006b2:	22d4      	movs	r2, #212	; 0xd4
 80006b4:	fb02 f303 	mul.w	r3, r2, r3
 80006b8:	4a33      	ldr	r2, [pc, #204]	; (8000788 <Sample_SimpleRanging+0x11c>)
 80006ba:	4413      	add	r3, r2
 80006bc:	2200      	movs	r2, #0
 80006be:	2100      	movs	r1, #0
 80006c0:	4618      	mov	r0, r3
 80006c2:	f000 fe91 	bl	80013e8 <VL6180x_RangeGetThresholds>
    VL6180x_UpscaleSetScaling(&Devs[i], 3);
 80006c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80006c8:	22d4      	movs	r2, #212	; 0xd4
 80006ca:	fb02 f303 	mul.w	r3, r2, r3
 80006ce:	4a2e      	ldr	r2, [pc, #184]	; (8000788 <Sample_SimpleRanging+0x11c>)
 80006d0:	4413      	add	r3, r2
 80006d2:	2103      	movs	r1, #3
 80006d4:	4618      	mov	r0, r3
 80006d6:	f000 ffe3 	bl	80016a0 <VL6180x_UpscaleSetScaling>
    VL6180x_RangeSetThresholds(&Devs[i], 0, 600, 0);
 80006da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80006dc:	22d4      	movs	r2, #212	; 0xd4
 80006de:	fb02 f303 	mul.w	r3, r2, r3
 80006e2:	4a29      	ldr	r2, [pc, #164]	; (8000788 <Sample_SimpleRanging+0x11c>)
 80006e4:	1898      	adds	r0, r3, r2
 80006e6:	2300      	movs	r3, #0
 80006e8:	f44f 7216 	mov.w	r2, #600	; 0x258
 80006ec:	2100      	movs	r1, #0
 80006ee:	f000 fe2f 	bl	8001350 <VL6180x_RangeSetThresholds>
    VL6180x_SetGroupParamHold(&Devs[i], 0);
 80006f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80006f4:	22d4      	movs	r2, #212	; 0xd4
 80006f6:	fb02 f303 	mul.w	r3, r2, r3
 80006fa:	4a23      	ldr	r2, [pc, #140]	; (8000788 <Sample_SimpleRanging+0x11c>)
 80006fc:	4413      	add	r3, r2
 80006fe:	2100      	movs	r1, #0
 8000700:	4618      	mov	r0, r3
 8000702:	f000 fb44 	bl	8000d8e <VL6180x_SetGroupParamHold>
    //*/
    VL6180x_RangePollMeasurement(&Devs[i], &Range[i]);
 8000706:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000708:	22d4      	movs	r2, #212	; 0xd4
 800070a:	fb02 f303 	mul.w	r3, r2, r3
 800070e:	4a1e      	ldr	r2, [pc, #120]	; (8000788 <Sample_SimpleRanging+0x11c>)
 8000710:	1898      	adds	r0, r3, r2
 8000712:	1d39      	adds	r1, r7, #4
 8000714:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000716:	4613      	mov	r3, r2
 8000718:	009b      	lsls	r3, r3, #2
 800071a:	4413      	add	r3, r2
 800071c:	00db      	lsls	r3, r3, #3
 800071e:	440b      	add	r3, r1
 8000720:	4619      	mov	r1, r3
 8000722:	f000 fc60 	bl	8000fe6 <VL6180x_RangePollMeasurement>
    if (Range[i].errorStatus == 0)
 8000726:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000728:	4613      	mov	r3, r2
 800072a:	009b      	lsls	r3, r3, #2
 800072c:	4413      	add	r3, r2
 800072e:	00db      	lsls	r3, r3, #3
 8000730:	3358      	adds	r3, #88	; 0x58
 8000732:	443b      	add	r3, r7
 8000734:	3b4c      	subs	r3, #76	; 0x4c
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d112      	bne.n	8000762 <Sample_SimpleRanging+0xf6>
    {
      printf("range %d: %ld mm\r\n", i + 1, Range[i].range_mm);
 800073c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800073e:	1c59      	adds	r1, r3, #1
 8000740:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000742:	4613      	mov	r3, r2
 8000744:	009b      	lsls	r3, r3, #2
 8000746:	4413      	add	r3, r2
 8000748:	00db      	lsls	r3, r3, #3
 800074a:	3358      	adds	r3, #88	; 0x58
 800074c:	443b      	add	r3, r7
 800074e:	3b54      	subs	r3, #84	; 0x54
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	461a      	mov	r2, r3
 8000754:	480d      	ldr	r0, [pc, #52]	; (800078c <Sample_SimpleRanging+0x120>)
 8000756:	f003 fc77 	bl	8004048 <iprintf>
      HAL_Delay(250);
 800075a:	20fa      	movs	r0, #250	; 0xfa
 800075c:	f002 fb1a 	bl	8002d94 <HAL_Delay>
 8000760:	e006      	b.n	8000770 <Sample_SimpleRanging+0x104>
    }
    else
    {
      printf("%s\r\n", "error");
 8000762:	490b      	ldr	r1, [pc, #44]	; (8000790 <Sample_SimpleRanging+0x124>)
 8000764:	480b      	ldr	r0, [pc, #44]	; (8000794 <Sample_SimpleRanging+0x128>)
 8000766:	f003 fc6f 	bl	8004048 <iprintf>
      HAL_Delay(250);
 800076a:	20fa      	movs	r0, #250	; 0xfa
 800076c:	f002 fb12 	bl	8002d94 <HAL_Delay>
  for (i = 0; i <= DEVICE_NUMBER - 1; i++)
 8000770:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000772:	3301      	adds	r3, #1
 8000774:	657b      	str	r3, [r7, #84]	; 0x54
 8000776:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000778:	2b01      	cmp	r3, #1
 800077a:	f77f af7d 	ble.w	8000678 <Sample_SimpleRanging+0xc>
    }
  }
}
 800077e:	bf00      	nop
 8000780:	bf00      	nop
 8000782:	3758      	adds	r7, #88	; 0x58
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	200000d0 	.word	0x200000d0
 800078c:	08004f8c 	.word	0x08004f8c
 8000790:	08004fa0 	.word	0x08004fa0
 8000794:	08004fa8 	.word	0x08004fa8

08000798 <SystemClock_Config>:

void SystemClock_Config(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b090      	sub	sp, #64	; 0x40
 800079c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800079e:	f107 0318 	add.w	r3, r7, #24
 80007a2:	2228      	movs	r2, #40	; 0x28
 80007a4:	2100      	movs	r1, #0
 80007a6:	4618      	mov	r0, r3
 80007a8:	f003 fc46 	bl	8004038 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ac:	1d3b      	adds	r3, r7, #4
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	605a      	str	r2, [r3, #4]
 80007b4:	609a      	str	r2, [r3, #8]
 80007b6:	60da      	str	r2, [r3, #12]
 80007b8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007ba:	2301      	movs	r3, #1
 80007bc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007c2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80007c4:	2300      	movs	r3, #0
 80007c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007c8:	2301      	movs	r3, #1
 80007ca:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007cc:	2302      	movs	r3, #2
 80007ce:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80007d6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80007da:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007dc:	f107 0318 	add.w	r3, r7, #24
 80007e0:	4618      	mov	r0, r3
 80007e2:	f002 fd8b 	bl	80032fc <HAL_RCC_OscConfig>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80007ec:	f000 f89e 	bl	800092c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80007f0:	230f      	movs	r3, #15
 80007f2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f4:	2302      	movs	r3, #2
 80007f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007f8:	2300      	movs	r3, #0
 80007fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000800:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000802:	2300      	movs	r3, #0
 8000804:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000806:	1d3b      	adds	r3, r7, #4
 8000808:	2102      	movs	r1, #2
 800080a:	4618      	mov	r0, r3
 800080c:	f002 fff8 	bl	8003800 <HAL_RCC_ClockConfig>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000816:	f000 f889 	bl	800092c <Error_Handler>
  }
}
 800081a:	bf00      	nop
 800081c:	3740      	adds	r7, #64	; 0x40
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
	...

08000824 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000828:	4b11      	ldr	r3, [pc, #68]	; (8000870 <MX_USART1_UART_Init+0x4c>)
 800082a:	4a12      	ldr	r2, [pc, #72]	; (8000874 <MX_USART1_UART_Init+0x50>)
 800082c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800082e:	4b10      	ldr	r3, [pc, #64]	; (8000870 <MX_USART1_UART_Init+0x4c>)
 8000830:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000834:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000836:	4b0e      	ldr	r3, [pc, #56]	; (8000870 <MX_USART1_UART_Init+0x4c>)
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800083c:	4b0c      	ldr	r3, [pc, #48]	; (8000870 <MX_USART1_UART_Init+0x4c>)
 800083e:	2200      	movs	r2, #0
 8000840:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000842:	4b0b      	ldr	r3, [pc, #44]	; (8000870 <MX_USART1_UART_Init+0x4c>)
 8000844:	2200      	movs	r2, #0
 8000846:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000848:	4b09      	ldr	r3, [pc, #36]	; (8000870 <MX_USART1_UART_Init+0x4c>)
 800084a:	220c      	movs	r2, #12
 800084c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800084e:	4b08      	ldr	r3, [pc, #32]	; (8000870 <MX_USART1_UART_Init+0x4c>)
 8000850:	2200      	movs	r2, #0
 8000852:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000854:	4b06      	ldr	r3, [pc, #24]	; (8000870 <MX_USART1_UART_Init+0x4c>)
 8000856:	2200      	movs	r2, #0
 8000858:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800085a:	4805      	ldr	r0, [pc, #20]	; (8000870 <MX_USART1_UART_Init+0x4c>)
 800085c:	f003 f968 	bl	8003b30 <HAL_UART_Init>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000866:	f000 f861 	bl	800092c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */
}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	2000008c 	.word	0x2000008c
 8000874:	40013800 	.word	0x40013800

08000878 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b088      	sub	sp, #32
 800087c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087e:	f107 0310 	add.w	r3, r7, #16
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
 8000886:	605a      	str	r2, [r3, #4]
 8000888:	609a      	str	r2, [r3, #8]
 800088a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800088c:	4b25      	ldr	r3, [pc, #148]	; (8000924 <MX_GPIO_Init+0xac>)
 800088e:	699b      	ldr	r3, [r3, #24]
 8000890:	4a24      	ldr	r2, [pc, #144]	; (8000924 <MX_GPIO_Init+0xac>)
 8000892:	f043 0320 	orr.w	r3, r3, #32
 8000896:	6193      	str	r3, [r2, #24]
 8000898:	4b22      	ldr	r3, [pc, #136]	; (8000924 <MX_GPIO_Init+0xac>)
 800089a:	699b      	ldr	r3, [r3, #24]
 800089c:	f003 0320 	and.w	r3, r3, #32
 80008a0:	60fb      	str	r3, [r7, #12]
 80008a2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a4:	4b1f      	ldr	r3, [pc, #124]	; (8000924 <MX_GPIO_Init+0xac>)
 80008a6:	699b      	ldr	r3, [r3, #24]
 80008a8:	4a1e      	ldr	r2, [pc, #120]	; (8000924 <MX_GPIO_Init+0xac>)
 80008aa:	f043 0304 	orr.w	r3, r3, #4
 80008ae:	6193      	str	r3, [r2, #24]
 80008b0:	4b1c      	ldr	r3, [pc, #112]	; (8000924 <MX_GPIO_Init+0xac>)
 80008b2:	699b      	ldr	r3, [r3, #24]
 80008b4:	f003 0304 	and.w	r3, r3, #4
 80008b8:	60bb      	str	r3, [r7, #8]
 80008ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008bc:	4b19      	ldr	r3, [pc, #100]	; (8000924 <MX_GPIO_Init+0xac>)
 80008be:	699b      	ldr	r3, [r3, #24]
 80008c0:	4a18      	ldr	r2, [pc, #96]	; (8000924 <MX_GPIO_Init+0xac>)
 80008c2:	f043 0308 	orr.w	r3, r3, #8
 80008c6:	6193      	str	r3, [r2, #24]
 80008c8:	4b16      	ldr	r3, [pc, #88]	; (8000924 <MX_GPIO_Init+0xac>)
 80008ca:	699b      	ldr	r3, [r3, #24]
 80008cc:	f003 0308 	and.w	r3, r3, #8
 80008d0:	607b      	str	r3, [r7, #4]
 80008d2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SCL_Pin | SDA_Pin | GPIO_PIN_12 | GPIO_PIN_13, GPIO_PIN_RESET);
 80008d4:	2200      	movs	r2, #0
 80008d6:	f44f 5143 	mov.w	r1, #12480	; 0x30c0
 80008da:	4813      	ldr	r0, [pc, #76]	; (8000928 <MX_GPIO_Init+0xb0>)
 80008dc:	f002 fcf5 	bl	80032ca <HAL_GPIO_WritePin>
//  HAL_GPIO_WritePin(GPIOB, SCL_Pin | SDA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : SCL_Pin SDA_Pin */
  GPIO_InitStruct.Pin = SCL_Pin | SDA_Pin;
 80008e0:	23c0      	movs	r3, #192	; 0xc0
 80008e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80008e4:	2311      	movs	r3, #17
 80008e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008ec:	2303      	movs	r3, #3
 80008ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008f0:	f107 0310 	add.w	r3, r7, #16
 80008f4:	4619      	mov	r1, r3
 80008f6:	480c      	ldr	r0, [pc, #48]	; (8000928 <MX_GPIO_Init+0xb0>)
 80008f8:	f002 fb54 	bl	8002fa4 <HAL_GPIO_Init>

  /*初始化使能端口*/
  GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13;
 80008fc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000900:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000902:	2301      	movs	r3, #1
 8000904:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800090a:	2303      	movs	r3, #3
 800090c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800090e:	f107 0310 	add.w	r3, r7, #16
 8000912:	4619      	mov	r1, r3
 8000914:	4804      	ldr	r0, [pc, #16]	; (8000928 <MX_GPIO_Init+0xb0>)
 8000916:	f002 fb45 	bl	8002fa4 <HAL_GPIO_Init>
}
 800091a:	bf00      	nop
 800091c:	3720      	adds	r7, #32
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40021000 	.word	0x40021000
 8000928:	40010c00 	.word	0x40010c00

0800092c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000930:	b672      	cpsid	i
}
 8000932:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000934:	e7fe      	b.n	8000934 <Error_Handler+0x8>
	...

08000938 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000938:	b480      	push	{r7}
 800093a:	b085      	sub	sp, #20
 800093c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800093e:	4b15      	ldr	r3, [pc, #84]	; (8000994 <HAL_MspInit+0x5c>)
 8000940:	699b      	ldr	r3, [r3, #24]
 8000942:	4a14      	ldr	r2, [pc, #80]	; (8000994 <HAL_MspInit+0x5c>)
 8000944:	f043 0301 	orr.w	r3, r3, #1
 8000948:	6193      	str	r3, [r2, #24]
 800094a:	4b12      	ldr	r3, [pc, #72]	; (8000994 <HAL_MspInit+0x5c>)
 800094c:	699b      	ldr	r3, [r3, #24]
 800094e:	f003 0301 	and.w	r3, r3, #1
 8000952:	60bb      	str	r3, [r7, #8]
 8000954:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000956:	4b0f      	ldr	r3, [pc, #60]	; (8000994 <HAL_MspInit+0x5c>)
 8000958:	69db      	ldr	r3, [r3, #28]
 800095a:	4a0e      	ldr	r2, [pc, #56]	; (8000994 <HAL_MspInit+0x5c>)
 800095c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000960:	61d3      	str	r3, [r2, #28]
 8000962:	4b0c      	ldr	r3, [pc, #48]	; (8000994 <HAL_MspInit+0x5c>)
 8000964:	69db      	ldr	r3, [r3, #28]
 8000966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800096e:	4b0a      	ldr	r3, [pc, #40]	; (8000998 <HAL_MspInit+0x60>)
 8000970:	685b      	ldr	r3, [r3, #4]
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000982:	60fb      	str	r3, [r7, #12]
 8000984:	4a04      	ldr	r2, [pc, #16]	; (8000998 <HAL_MspInit+0x60>)
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800098a:	bf00      	nop
 800098c:	3714      	adds	r7, #20
 800098e:	46bd      	mov	sp, r7
 8000990:	bc80      	pop	{r7}
 8000992:	4770      	bx	lr
 8000994:	40021000 	.word	0x40021000
 8000998:	40010000 	.word	0x40010000

0800099c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b088      	sub	sp, #32
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a4:	f107 0310 	add.w	r3, r7, #16
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	605a      	str	r2, [r3, #4]
 80009ae:	609a      	str	r2, [r3, #8]
 80009b0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4a1c      	ldr	r2, [pc, #112]	; (8000a28 <HAL_UART_MspInit+0x8c>)
 80009b8:	4293      	cmp	r3, r2
 80009ba:	d131      	bne.n	8000a20 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009bc:	4b1b      	ldr	r3, [pc, #108]	; (8000a2c <HAL_UART_MspInit+0x90>)
 80009be:	699b      	ldr	r3, [r3, #24]
 80009c0:	4a1a      	ldr	r2, [pc, #104]	; (8000a2c <HAL_UART_MspInit+0x90>)
 80009c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009c6:	6193      	str	r3, [r2, #24]
 80009c8:	4b18      	ldr	r3, [pc, #96]	; (8000a2c <HAL_UART_MspInit+0x90>)
 80009ca:	699b      	ldr	r3, [r3, #24]
 80009cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009d0:	60fb      	str	r3, [r7, #12]
 80009d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d4:	4b15      	ldr	r3, [pc, #84]	; (8000a2c <HAL_UART_MspInit+0x90>)
 80009d6:	699b      	ldr	r3, [r3, #24]
 80009d8:	4a14      	ldr	r2, [pc, #80]	; (8000a2c <HAL_UART_MspInit+0x90>)
 80009da:	f043 0304 	orr.w	r3, r3, #4
 80009de:	6193      	str	r3, [r2, #24]
 80009e0:	4b12      	ldr	r3, [pc, #72]	; (8000a2c <HAL_UART_MspInit+0x90>)
 80009e2:	699b      	ldr	r3, [r3, #24]
 80009e4:	f003 0304 	and.w	r3, r3, #4
 80009e8:	60bb      	str	r3, [r7, #8]
 80009ea:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80009ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f2:	2302      	movs	r3, #2
 80009f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009f6:	2303      	movs	r3, #3
 80009f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fa:	f107 0310 	add.w	r3, r7, #16
 80009fe:	4619      	mov	r1, r3
 8000a00:	480b      	ldr	r0, [pc, #44]	; (8000a30 <HAL_UART_MspInit+0x94>)
 8000a02:	f002 facf 	bl	8002fa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	2300      	movs	r3, #0
 8000a12:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a14:	f107 0310 	add.w	r3, r7, #16
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4805      	ldr	r0, [pc, #20]	; (8000a30 <HAL_UART_MspInit+0x94>)
 8000a1c:	f002 fac2 	bl	8002fa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000a20:	bf00      	nop
 8000a22:	3720      	adds	r7, #32
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	40013800 	.word	0x40013800
 8000a2c:	40021000 	.word	0x40021000
 8000a30:	40010800 	.word	0x40010800

08000a34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a38:	e7fe      	b.n	8000a38 <NMI_Handler+0x4>

08000a3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a3a:	b480      	push	{r7}
 8000a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a3e:	e7fe      	b.n	8000a3e <HardFault_Handler+0x4>

08000a40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a44:	e7fe      	b.n	8000a44 <MemManage_Handler+0x4>

08000a46 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a46:	b480      	push	{r7}
 8000a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a4a:	e7fe      	b.n	8000a4a <BusFault_Handler+0x4>

08000a4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a50:	e7fe      	b.n	8000a50 <UsageFault_Handler+0x4>

08000a52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a52:	b480      	push	{r7}
 8000a54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a56:	bf00      	nop
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bc80      	pop	{r7}
 8000a5c:	4770      	bx	lr

08000a5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a62:	bf00      	nop
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bc80      	pop	{r7}
 8000a68:	4770      	bx	lr

08000a6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bc80      	pop	{r7}
 8000a74:	4770      	bx	lr

08000a76 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a76:	b580      	push	{r7, lr}
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a7a:	f002 f96f 	bl	8002d5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}

08000a82 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a82:	b580      	push	{r7, lr}
 8000a84:	b086      	sub	sp, #24
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	60f8      	str	r0, [r7, #12]
 8000a8a:	60b9      	str	r1, [r7, #8]
 8000a8c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a8e:	2300      	movs	r3, #0
 8000a90:	617b      	str	r3, [r7, #20]
 8000a92:	e00a      	b.n	8000aaa <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a94:	f7ff fce4 	bl	8000460 <__io_getchar>
 8000a98:	4601      	mov	r1, r0
 8000a9a:	68bb      	ldr	r3, [r7, #8]
 8000a9c:	1c5a      	adds	r2, r3, #1
 8000a9e:	60ba      	str	r2, [r7, #8]
 8000aa0:	b2ca      	uxtb	r2, r1
 8000aa2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	3301      	adds	r3, #1
 8000aa8:	617b      	str	r3, [r7, #20]
 8000aaa:	697a      	ldr	r2, [r7, #20]
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	429a      	cmp	r2, r3
 8000ab0:	dbf0      	blt.n	8000a94 <_read+0x12>
	}

return len;
 8000ab2:	687b      	ldr	r3, [r7, #4]
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	3718      	adds	r7, #24
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}

08000abc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b086      	sub	sp, #24
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	60f8      	str	r0, [r7, #12]
 8000ac4:	60b9      	str	r1, [r7, #8]
 8000ac6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ac8:	2300      	movs	r3, #0
 8000aca:	617b      	str	r3, [r7, #20]
 8000acc:	e009      	b.n	8000ae2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000ace:	68bb      	ldr	r3, [r7, #8]
 8000ad0:	1c5a      	adds	r2, r3, #1
 8000ad2:	60ba      	str	r2, [r7, #8]
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f7ff fcb0 	bl	800043c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	3301      	adds	r3, #1
 8000ae0:	617b      	str	r3, [r7, #20]
 8000ae2:	697a      	ldr	r2, [r7, #20]
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	429a      	cmp	r2, r3
 8000ae8:	dbf1      	blt.n	8000ace <_write+0x12>
	}
	return len;
 8000aea:	687b      	ldr	r3, [r7, #4]
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3718      	adds	r7, #24
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}

08000af4 <_close>:

int _close(int file)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
	return -1;
 8000afc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	370c      	adds	r7, #12
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bc80      	pop	{r7}
 8000b08:	4770      	bx	lr

08000b0a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	b083      	sub	sp, #12
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	6078      	str	r0, [r7, #4]
 8000b12:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b1a:	605a      	str	r2, [r3, #4]
	return 0;
 8000b1c:	2300      	movs	r3, #0
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	370c      	adds	r7, #12
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bc80      	pop	{r7}
 8000b26:	4770      	bx	lr

08000b28 <_isatty>:

int _isatty(int file)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
	return 1;
 8000b30:	2301      	movs	r3, #1
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	370c      	adds	r7, #12
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bc80      	pop	{r7}
 8000b3a:	4770      	bx	lr

08000b3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b085      	sub	sp, #20
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	60f8      	str	r0, [r7, #12]
 8000b44:	60b9      	str	r1, [r7, #8]
 8000b46:	607a      	str	r2, [r7, #4]
	return 0;
 8000b48:	2300      	movs	r3, #0
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3714      	adds	r7, #20
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bc80      	pop	{r7}
 8000b52:	4770      	bx	lr

08000b54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b086      	sub	sp, #24
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b5c:	4a14      	ldr	r2, [pc, #80]	; (8000bb0 <_sbrk+0x5c>)
 8000b5e:	4b15      	ldr	r3, [pc, #84]	; (8000bb4 <_sbrk+0x60>)
 8000b60:	1ad3      	subs	r3, r2, r3
 8000b62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b68:	4b13      	ldr	r3, [pc, #76]	; (8000bb8 <_sbrk+0x64>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d102      	bne.n	8000b76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b70:	4b11      	ldr	r3, [pc, #68]	; (8000bb8 <_sbrk+0x64>)
 8000b72:	4a12      	ldr	r2, [pc, #72]	; (8000bbc <_sbrk+0x68>)
 8000b74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b76:	4b10      	ldr	r3, [pc, #64]	; (8000bb8 <_sbrk+0x64>)
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	4413      	add	r3, r2
 8000b7e:	693a      	ldr	r2, [r7, #16]
 8000b80:	429a      	cmp	r2, r3
 8000b82:	d207      	bcs.n	8000b94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b84:	f003 fa2e 	bl	8003fe4 <__errno>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	220c      	movs	r2, #12
 8000b8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b92:	e009      	b.n	8000ba8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b94:	4b08      	ldr	r3, [pc, #32]	; (8000bb8 <_sbrk+0x64>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b9a:	4b07      	ldr	r3, [pc, #28]	; (8000bb8 <_sbrk+0x64>)
 8000b9c:	681a      	ldr	r2, [r3, #0]
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	4413      	add	r3, r2
 8000ba2:	4a05      	ldr	r2, [pc, #20]	; (8000bb8 <_sbrk+0x64>)
 8000ba4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ba6:	68fb      	ldr	r3, [r7, #12]
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	3718      	adds	r7, #24
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	20002800 	.word	0x20002800
 8000bb4:	00000400 	.word	0x00000400
 8000bb8:	20000278 	.word	0x20000278
 8000bbc:	20000290 	.word	0x20000290

08000bc0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bc4:	bf00      	nop
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bc80      	pop	{r7}
 8000bca:	4770      	bx	lr

08000bcc <VL6180x_InitData>:
	LOG_FUNCTION_END(status);
	return status;
}

int VL6180x_InitData(VL6180xDev_t dev)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b088      	sub	sp, #32
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
	uint16_t u16;
	uint32_t XTalkCompRate_KCps;

	LOG_FUNCTION_START("");

	VL6180xDevDataSet(dev, EceFactorM, DEF_ECE_FACTOR_M);
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	2255      	movs	r2, #85	; 0x55
 8000bd8:	811a      	strh	r2, [r3, #8]
	VL6180xDevDataSet(dev, EceFactorD, DEF_ECE_FACTOR_D);
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2264      	movs	r2, #100	; 0x64
 8000bde:	815a      	strh	r2, [r3, #10]

	VL6180xDevDataSet(dev, RangeIgnore.Enabled, 0);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	2200      	movs	r2, #0
 8000be4:	741a      	strb	r2, [r3, #16]

#ifdef VL6180x_HAVE_UPSCALE_DATA
	VL6180xDevDataSet(dev, UpscaleFactor,  DEF_UPSCALE);
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	2201      	movs	r2, #1
 8000bea:	761a      	strb	r2, [r3, #24]
#endif

#ifdef VL6180x_HAVE_ALS_DATA
	VL6180xDevDataSet(dev, IntegrationPeriod, DEF_INT_PEFRIOD);
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	2264      	movs	r2, #100	; 0x64
 8000bf0:	825a      	strh	r2, [r3, #18]
	VL6180xDevDataSet(dev, AlsGainCode, DEF_ALS_GAIN);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	829a      	strh	r2, [r3, #20]
	VL6180xDevDataSet(dev, AlsScaler, DEF_ALS_SCALER);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	82da      	strh	r2, [r3, #22]
#endif

#ifdef VL6180x_HAVE_WRAP_AROUND_DATA
	VL6180xDevDataSet(dev, WrapAroundFilterActive, (VL6180x_WRAP_AROUND_FILTER_SUPPORT > 0));
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	2201      	movs	r2, #1
 8000c02:	765a      	strb	r2, [r3, #25]
	VL6180xDevDataSet(dev, DMaxEnable, DEF_DMAX_ENABLE);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	2201      	movs	r2, #1
 8000c08:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
#endif

	_DMax_OneTimeInit(dev);
 8000c0c:	6878      	ldr	r0, [r7, #4]
 8000c0e:	f001 fd3d 	bl	800268c <_DMax_OneTimeInit>
	do {

		/* backup offset initial value from nvm these must be done prior any over call that use offset */
		status = VL6180x_RdByte(dev, SYSRANGE_PART_TO_PART_RANGE_OFFSET, (uint8_t *)&offset);
 8000c12:	f107 0313 	add.w	r3, r7, #19
 8000c16:	461a      	mov	r2, r3
 8000c18:	2124      	movs	r1, #36	; 0x24
 8000c1a:	6878      	ldr	r0, [r7, #4]
 8000c1c:	f001 ff5d 	bl	8002ada <VL6180x_RdByte>
 8000c20:	61f8      	str	r0, [r7, #28]
		if (status) {
 8000c22:	69fb      	ldr	r3, [r7, #28]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14a      	bne.n	8000cbe <VL6180x_InitData+0xf2>
			VL6180x_ErrLog("SYSRANGE_PART_TO_PART_RANGE_OFFSET rd fail");
			break;
		}
		VL6180xDevDataSet(dev, Part2PartOffsetNVM, offset);
 8000c28:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd

		status = VL6180x_RdDWord(dev, SYSRANGE_RANGE_IGNORE_THRESHOLD, &CalValue);
 8000c32:	f107 030c 	add.w	r3, r7, #12
 8000c36:	461a      	mov	r2, r3
 8000c38:	2126      	movs	r1, #38	; 0x26
 8000c3a:	6878      	ldr	r0, [r7, #4]
 8000c3c:	f001 ffb6 	bl	8002bac <VL6180x_RdDWord>
 8000c40:	61f8      	str	r0, [r7, #28]
		if (status) {
 8000c42:	69fb      	ldr	r3, [r7, #28]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d13c      	bne.n	8000cc2 <VL6180x_InitData+0xf6>
			VL6180x_ErrLog("Part2PartAmbNVM rd fail");
			break;
		}
		if ((CalValue&0xFFFF0000) == 0) {
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	0c1b      	lsrs	r3, r3, #16
 8000c4c:	041b      	lsls	r3, r3, #16
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d101      	bne.n	8000c56 <VL6180x_InitData+0x8a>
			CalValue = 0x00CE03F8;
 8000c52:	4b22      	ldr	r3, [pc, #136]	; (8000cdc <VL6180x_InitData+0x110>)
 8000c54:	60fb      	str	r3, [r7, #12]
		}
		VL6180xDevDataSet(dev, Part2PartAmbNVM, CalValue);
 8000c56:	68fa      	ldr	r2, [r7, #12]
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	601a      	str	r2, [r3, #0]

		status = VL6180x_RdWord(dev, SYSRANGE_CROSSTALK_COMPENSATION_RATE , &u16);
 8000c5c:	f107 030a 	add.w	r3, r7, #10
 8000c60:	461a      	mov	r2, r3
 8000c62:	211e      	movs	r1, #30
 8000c64:	6878      	ldr	r0, [r7, #4]
 8000c66:	f001 ff68 	bl	8002b3a <VL6180x_RdWord>
 8000c6a:	61f8      	str	r0, [r7, #28]
		if (status) {
 8000c6c:	69fb      	ldr	r3, [r7, #28]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d129      	bne.n	8000cc6 <VL6180x_InitData+0xfa>
			VL6180x_ErrLog("SYSRANGE_CROSSTALK_COMPENSATION_RATE rd fail ");
			break;
		}
		XTalkCompRate_KCps = Fix7_2_KCPs(u16);
 8000c72:	897b      	ldrh	r3, [r7, #10]
 8000c74:	461a      	mov	r2, r3
 8000c76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c7a:	fb02 f303 	mul.w	r3, r2, r3
 8000c7e:	09db      	lsrs	r3, r3, #7
 8000c80:	61bb      	str	r3, [r7, #24]
		VL6180xDevDataSet(dev, XTalkCompRate_KCps, XTalkCompRate_KCps);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	69ba      	ldr	r2, [r7, #24]
 8000c86:	605a      	str	r2, [r3, #4]

		dmax_status = _DMax_InitData(dev);
 8000c88:	6878      	ldr	r0, [r7, #4]
 8000c8a:	f001 fd59 	bl	8002740 <_DMax_InitData>
 8000c8e:	6178      	str	r0, [r7, #20]
		if (dmax_status < 0) {
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	db19      	blt.n	8000cca <VL6180x_InitData+0xfe>
			VL6180x_ErrLog("DMax init failure");
			break;
		}

		/* Read or wait for fresh out of reset  */
		status = VL6180x_RdByte(dev, SYSTEM_FRESH_OUT_OF_RESET, &FreshOutReset);
 8000c96:	f107 0312 	add.w	r3, r7, #18
 8000c9a:	461a      	mov	r2, r3
 8000c9c:	2116      	movs	r1, #22
 8000c9e:	6878      	ldr	r0, [r7, #4]
 8000ca0:	f001 ff1b 	bl	8002ada <VL6180x_RdByte>
 8000ca4:	61f8      	str	r0, [r7, #28]
		if (status) {
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d110      	bne.n	8000cce <VL6180x_InitData+0x102>
			VL6180x_ErrLog("SYSTEM_FRESH_OUT_OF_RESET rd fail");
			break;
		}
		if (FreshOutReset != 1 || dmax_status)
 8000cac:	7cbb      	ldrb	r3, [r7, #18]
 8000cae:	2b01      	cmp	r3, #1
 8000cb0:	d102      	bne.n	8000cb8 <VL6180x_InitData+0xec>
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d00b      	beq.n	8000cd0 <VL6180x_InitData+0x104>
			status = CALIBRATION_WARNING;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	61fb      	str	r3, [r7, #28]
 8000cbc:	e008      	b.n	8000cd0 <VL6180x_InitData+0x104>
			break;
 8000cbe:	bf00      	nop
 8000cc0:	e006      	b.n	8000cd0 <VL6180x_InitData+0x104>
			break;
 8000cc2:	bf00      	nop
 8000cc4:	e004      	b.n	8000cd0 <VL6180x_InitData+0x104>
			break;
 8000cc6:	bf00      	nop
 8000cc8:	e002      	b.n	8000cd0 <VL6180x_InitData+0x104>
			break;
 8000cca:	bf00      	nop
 8000ccc:	e000      	b.n	8000cd0 <VL6180x_InitData+0x104>
			break;
 8000cce:	bf00      	nop

	} while (0);

	LOG_FUNCTION_END(status);
	return status;
 8000cd0:	69fb      	ldr	r3, [r7, #28]
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3720      	adds	r7, #32
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	00ce03f8 	.word	0x00ce03f8

08000ce0 <VL6180x_SetI2CAddress>:
	LOG_FUNCTION_END(status);
	return status;
}

int VL6180x_SetI2CAddress(VL6180xDev_t dev, uint8_t NewAddress)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	460b      	mov	r3, r1
 8000cea:	70fb      	strb	r3, [r7, #3]
	int status;
	LOG_FUNCTION_START("");

	status = VL6180x_WrByte(dev, I2C_SLAVE_DEVICE_ADDRESS, NewAddress / 2);
 8000cec:	78fb      	ldrb	r3, [r7, #3]
 8000cee:	085b      	lsrs	r3, r3, #1
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	f240 2112 	movw	r1, #530	; 0x212
 8000cf8:	6878      	ldr	r0, [r7, #4]
 8000cfa:	f001 fe1f 	bl	800293c <VL6180x_WrByte>
 8000cfe:	60f8      	str	r0, [r7, #12]
	if (status) {
		VL6180x_ErrLog("new i2c addr Wr fail");
	}
	LOG_FUNCTION_END(status);
	return status;
 8000d00:	68fb      	ldr	r3, [r7, #12]
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3710      	adds	r7, #16
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}

08000d0a <VL6180x_StaticInit>:
}



int VL6180x_StaticInit(VL6180xDev_t dev)
{
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b086      	sub	sp, #24
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	6078      	str	r0, [r7, #4]
	int status = 0, init_status;
 8000d12:	2300      	movs	r3, #0
 8000d14:	617b      	str	r3, [r7, #20]
	/* TODO doc When using configurable scaling but using 1x as start condition
	 * load tunning upscale  or not ??? */
	if (_GetUpscale(dev) == 1 && !(VL6180x_UPSCALE_SUPPORT < 0))
		init_status = VL6180x_RangeStaticInit(dev);
	else
		init_status = VL6180x_UpscaleStaticInit(dev);
 8000d16:	6878      	ldr	r0, [r7, #4]
 8000d18:	f000 fd3c 	bl	8001794 <VL6180x_UpscaleStaticInit>
 8000d1c:	6138      	str	r0, [r7, #16]

	if (init_status < 0) {
 8000d1e:	693b      	ldr	r3, [r7, #16]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	db2c      	blt.n	8000d7e <VL6180x_StaticInit+0x74>
	#if REFRESH_CACHED_DATA_AFTER_INIT
	#ifdef VL6180x_HAVE_ALS_DATA
	/* update cached value after tuning applied */
	do {
		uint8_t data;
		status =  VL6180x_RdByte(dev, FW_ALS_RESULT_SCALER, &data);
 8000d24:	f107 030f 	add.w	r3, r7, #15
 8000d28:	461a      	mov	r2, r3
 8000d2a:	f44f 7190 	mov.w	r1, #288	; 0x120
 8000d2e:	6878      	ldr	r0, [r7, #4]
 8000d30:	f001 fed3 	bl	8002ada <VL6180x_RdByte>
 8000d34:	6178      	str	r0, [r7, #20]
		if (status)
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d114      	bne.n	8000d66 <VL6180x_StaticInit+0x5c>
			break;
		VL6180xDevDataSet(dev, AlsScaler, data);
 8000d3c:	7bfb      	ldrb	r3, [r7, #15]
 8000d3e:	b29a      	uxth	r2, r3
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	82da      	strh	r2, [r3, #22]

		status =  VL6180x_RdByte(dev, SYSALS_ANALOGUE_GAIN, &data);
 8000d44:	f107 030f 	add.w	r3, r7, #15
 8000d48:	461a      	mov	r2, r3
 8000d4a:	213f      	movs	r1, #63	; 0x3f
 8000d4c:	6878      	ldr	r0, [r7, #4]
 8000d4e:	f001 fec4 	bl	8002ada <VL6180x_RdByte>
 8000d52:	6178      	str	r0, [r7, #20]
		if (status)
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d107      	bne.n	8000d6a <VL6180x_StaticInit+0x60>
			break;
		VL6180x_AlsSetAnalogueGain(dev, data);
 8000d5a:	7bfb      	ldrb	r3, [r7, #15]
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	6878      	ldr	r0, [r7, #4]
 8000d60:	f000 f8c9 	bl	8000ef6 <VL6180x_AlsSetAnalogueGain>
 8000d64:	e002      	b.n	8000d6c <VL6180x_StaticInit+0x62>
			break;
 8000d66:	bf00      	nop
 8000d68:	e000      	b.n	8000d6c <VL6180x_StaticInit+0x62>
			break;
 8000d6a:	bf00      	nop
	#endif
	#endif /* REFRESH_CACHED_DATA_AFTER_INIT */
	if (status < 0) {
		VL6180x_ErrLog("StaticInit fail");
	}
	if (!status && init_status) {
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d107      	bne.n	8000d82 <VL6180x_StaticInit+0x78>
 8000d72:	693b      	ldr	r3, [r7, #16]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d004      	beq.n	8000d82 <VL6180x_StaticInit+0x78>
		status = init_status;
 8000d78:	693b      	ldr	r3, [r7, #16]
 8000d7a:	617b      	str	r3, [r7, #20]
 8000d7c:	e002      	b.n	8000d84 <VL6180x_StaticInit+0x7a>
		goto error;
 8000d7e:	bf00      	nop
 8000d80:	e000      	b.n	8000d84 <VL6180x_StaticInit+0x7a>
	}
error:
 8000d82:	bf00      	nop
	LOG_FUNCTION_END(status);
	return status;
 8000d84:	697b      	ldr	r3, [r7, #20]
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3718      	adds	r7, #24
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}

08000d8e <VL6180x_SetGroupParamHold>:


int VL6180x_SetGroupParamHold(VL6180xDev_t dev, int Hold)
{
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	b084      	sub	sp, #16
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	6078      	str	r0, [r7, #4]
 8000d96:	6039      	str	r1, [r7, #0]
	int status;
	uint8_t value;

	LOG_FUNCTION_START("%d", Hold);
	if (Hold)
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d002      	beq.n	8000da4 <VL6180x_SetGroupParamHold+0x16>
		value = 1;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	73fb      	strb	r3, [r7, #15]
 8000da2:	e001      	b.n	8000da8 <VL6180x_SetGroupParamHold+0x1a>
	else
		value = 0;
 8000da4:	2300      	movs	r3, #0
 8000da6:	73fb      	strb	r3, [r7, #15]
	status = VL6180x_WrByte(dev, SYSTEM_GROUPED_PARAMETER_HOLD, value);
 8000da8:	7bfb      	ldrb	r3, [r7, #15]
 8000daa:	461a      	mov	r2, r3
 8000dac:	2117      	movs	r1, #23
 8000dae:	6878      	ldr	r0, [r7, #4]
 8000db0:	f001 fdc4 	bl	800293c <VL6180x_WrByte>
 8000db4:	60b8      	str	r0, [r7, #8]

	LOG_FUNCTION_END(status);
	return status;
 8000db6:	68bb      	ldr	r3, [r7, #8]

}
 8000db8:	4618      	mov	r0, r3
 8000dba:	3710      	adds	r7, #16
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <VL6180x_Prepare>:

int VL6180x_Prepare(VL6180xDev_t dev)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
	int status;
	LOG_FUNCTION_START("");

	do {
		status = VL6180x_StaticInit(dev);
 8000dc8:	6878      	ldr	r0, [r7, #4]
 8000dca:	f7ff ff9e 	bl	8000d0a <VL6180x_StaticInit>
 8000dce:	60f8      	str	r0, [r7, #12]
		if (status < 0)
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	db42      	blt.n	8000e5c <VL6180x_Prepare+0x9c>
			break;

		/* set range InterruptMode to new sample */
		status = VL6180x_RangeConfigInterrupt(dev, CONFIG_GPIO_INTERRUPT_NEW_SAMPLE_READY);
 8000dd6:	2104      	movs	r1, #4
 8000dd8:	6878      	ldr	r0, [r7, #4]
 8000dda:	f000 fcf9 	bl	80017d0 <VL6180x_RangeConfigInterrupt>
 8000dde:	60f8      	str	r0, [r7, #12]
		if (status)
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d13c      	bne.n	8000e60 <VL6180x_Prepare+0xa0>
			break;

		/* set default threshold */
		status = VL6180x_RangeSetRawThresholds(dev, 10, 200);
 8000de6:	22c8      	movs	r2, #200	; 0xc8
 8000de8:	210a      	movs	r1, #10
 8000dea:	6878      	ldr	r0, [r7, #4]
 8000dec:	f000 fa92 	bl	8001314 <VL6180x_RangeSetRawThresholds>
 8000df0:	60f8      	str	r0, [r7, #12]
		if (status) {
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d135      	bne.n	8000e64 <VL6180x_Prepare+0xa4>
			VL6180x_ErrLog("VL6180x_RangeSetRawThresholds fail");
			break;
		}
	#if VL6180x_ALS_SUPPORT
		status = VL6180x_AlsSetIntegrationPeriod(dev, 100);
 8000df8:	2164      	movs	r1, #100	; 0x64
 8000dfa:	6878      	ldr	r0, [r7, #4]
 8000dfc:	f000 f8c4 	bl	8000f88 <VL6180x_AlsSetIntegrationPeriod>
 8000e00:	60f8      	str	r0, [r7, #12]
		if (status)
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d12f      	bne.n	8000e68 <VL6180x_Prepare+0xa8>
			break;
		status = VL6180x_AlsSetInterMeasurementPeriod(dev,  200);
 8000e08:	21c8      	movs	r1, #200	; 0xc8
 8000e0a:	6878      	ldr	r0, [r7, #4]
 8000e0c:	f000 f89a 	bl	8000f44 <VL6180x_AlsSetInterMeasurementPeriod>
 8000e10:	60f8      	str	r0, [r7, #12]
		if (status)
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d129      	bne.n	8000e6c <VL6180x_Prepare+0xac>
			break;
		status = VL6180x_AlsSetAnalogueGain(dev,  0);
 8000e18:	2100      	movs	r1, #0
 8000e1a:	6878      	ldr	r0, [r7, #4]
 8000e1c:	f000 f86b 	bl	8000ef6 <VL6180x_AlsSetAnalogueGain>
 8000e20:	60f8      	str	r0, [r7, #12]
		if (status)
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d123      	bne.n	8000e70 <VL6180x_Prepare+0xb0>
			break;
		status = VL6180x_AlsSetThresholds(dev, 0, 0xFF);
 8000e28:	22ff      	movs	r2, #255	; 0xff
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	f000 f844 	bl	8000eba <VL6180x_AlsSetThresholds>
 8000e32:	60f8      	str	r0, [r7, #12]
		if (status)
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d11c      	bne.n	8000e74 <VL6180x_Prepare+0xb4>
			break;
		/* set Als InterruptMode to new sample */
		status = VL6180x_AlsConfigInterrupt(dev, CONFIG_GPIO_INTERRUPT_NEW_SAMPLE_READY);
 8000e3a:	2104      	movs	r1, #4
 8000e3c:	6878      	ldr	r0, [r7, #4]
 8000e3e:	f000 f821 	bl	8000e84 <VL6180x_AlsConfigInterrupt>
 8000e42:	60f8      	str	r0, [r7, #12]
		if (status) {
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d116      	bne.n	8000e78 <VL6180x_Prepare+0xb8>
			VL6180x_ErrLog("VL6180x_AlsConfigInterrupt fail");
			break;
		}
	#endif
	#if VL6180x_WRAP_AROUND_FILTER_SUPPORT
		_filter_Init(dev);
 8000e4a:	6878      	ldr	r0, [r7, #4]
 8000e4c:	f000 fdd7 	bl	80019fe <_filter_Init>
	#endif
		/* make sure to reset any left previous condition that can hangs first poll */
		status = VL6180x_ClearAllInterrupt(dev);
 8000e50:	2107      	movs	r1, #7
 8000e52:	6878      	ldr	r0, [r7, #4]
 8000e54:	f000 fb22 	bl	800149c <VL6180x_ClearInterrupt>
 8000e58:	60f8      	str	r0, [r7, #12]
 8000e5a:	e00e      	b.n	8000e7a <VL6180x_Prepare+0xba>
			break;
 8000e5c:	bf00      	nop
 8000e5e:	e00c      	b.n	8000e7a <VL6180x_Prepare+0xba>
			break;
 8000e60:	bf00      	nop
 8000e62:	e00a      	b.n	8000e7a <VL6180x_Prepare+0xba>
			break;
 8000e64:	bf00      	nop
 8000e66:	e008      	b.n	8000e7a <VL6180x_Prepare+0xba>
			break;
 8000e68:	bf00      	nop
 8000e6a:	e006      	b.n	8000e7a <VL6180x_Prepare+0xba>
			break;
 8000e6c:	bf00      	nop
 8000e6e:	e004      	b.n	8000e7a <VL6180x_Prepare+0xba>
			break;
 8000e70:	bf00      	nop
 8000e72:	e002      	b.n	8000e7a <VL6180x_Prepare+0xba>
			break;
 8000e74:	bf00      	nop
 8000e76:	e000      	b.n	8000e7a <VL6180x_Prepare+0xba>
			break;
 8000e78:	bf00      	nop
	} while (0);
	LOG_FUNCTION_END(status);

	return status;
 8000e7a:	68fb      	ldr	r3, [r7, #12]
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3710      	adds	r7, #16
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <VL6180x_AlsConfigInterrupt>:
	LOG_FUNCTION_END(status);
	return status;
}

int VL6180x_AlsConfigInterrupt(VL6180xDev_t dev, uint8_t ConfigGpioInt)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	460b      	mov	r3, r1
 8000e8e:	70fb      	strb	r3, [r7, #3]
	int status;

	if (ConfigGpioInt <= CONFIG_GPIO_INTERRUPT_NEW_SAMPLE_READY) {
 8000e90:	78fb      	ldrb	r3, [r7, #3]
 8000e92:	2b04      	cmp	r3, #4
 8000e94:	d809      	bhi.n	8000eaa <VL6180x_AlsConfigInterrupt+0x26>
		status = VL6180x_UpdateByte(dev, SYSTEM_INTERRUPT_CONFIG_GPIO, (uint8_t)(~CONFIG_GPIO_ALS_MASK), (ConfigGpioInt << 3));
 8000e96:	78fb      	ldrb	r3, [r7, #3]
 8000e98:	00db      	lsls	r3, r3, #3
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	22c7      	movs	r2, #199	; 0xc7
 8000e9e:	2114      	movs	r1, #20
 8000ea0:	6878      	ldr	r0, [r7, #4]
 8000ea2:	f001 fdd4 	bl	8002a4e <VL6180x_UpdateByte>
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	e002      	b.n	8000eb0 <VL6180x_AlsConfigInterrupt+0x2c>
	} else {
		VL6180x_ErrLog("Invalid config mode param %d", (int)ConfigGpioInt);
		status = INVALID_PARAMS;
 8000eaa:	f06f 0301 	mvn.w	r3, #1
 8000eae:	60fb      	str	r3, [r7, #12]
	}
	LOG_FUNCTION_END(status);
	return status;
 8000eb0:	68fb      	ldr	r3, [r7, #12]
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3710      	adds	r7, #16
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <VL6180x_AlsSetThresholds>:



int VL6180x_AlsSetThresholds(VL6180xDev_t dev, uint8_t low, uint8_t high)
{
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	b084      	sub	sp, #16
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	6078      	str	r0, [r7, #4]
 8000ec2:	460b      	mov	r3, r1
 8000ec4:	70fb      	strb	r3, [r7, #3]
 8000ec6:	4613      	mov	r3, r2
 8000ec8:	70bb      	strb	r3, [r7, #2]
	int status;

	LOG_FUNCTION_START("%d %d", (int)low, (int)high);

	status = VL6180x_WrByte(dev, SYSALS_THRESH_LOW, low);
 8000eca:	78fb      	ldrb	r3, [r7, #3]
 8000ecc:	461a      	mov	r2, r3
 8000ece:	213c      	movs	r1, #60	; 0x3c
 8000ed0:	6878      	ldr	r0, [r7, #4]
 8000ed2:	f001 fd33 	bl	800293c <VL6180x_WrByte>
 8000ed6:	60f8      	str	r0, [r7, #12]
	if (!status) {
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d106      	bne.n	8000eec <VL6180x_AlsSetThresholds+0x32>
		status = VL6180x_WrByte(dev, SYSALS_THRESH_HIGH, high);
 8000ede:	78bb      	ldrb	r3, [r7, #2]
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	213a      	movs	r1, #58	; 0x3a
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f001 fd29 	bl	800293c <VL6180x_WrByte>
 8000eea:	60f8      	str	r0, [r7, #12]
	}

	LOG_FUNCTION_END(status) ;
	return status;
 8000eec:	68fb      	ldr	r3, [r7, #12]
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3710      	adds	r7, #16
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <VL6180x_AlsSetAnalogueGain>:


int VL6180x_AlsSetAnalogueGain(VL6180xDev_t dev, uint8_t gain)
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	b084      	sub	sp, #16
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	6078      	str	r0, [r7, #4]
 8000efe:	460b      	mov	r3, r1
 8000f00:	70fb      	strb	r3, [r7, #3]
	int status;
	uint8_t GainTotal;

	LOG_FUNCTION_START("%d", (int)gain);
	gain &= ~0x40;
 8000f02:	78fb      	ldrb	r3, [r7, #3]
 8000f04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000f08:	70fb      	strb	r3, [r7, #3]
	if (gain > 7) {
 8000f0a:	78fb      	ldrb	r3, [r7, #3]
 8000f0c:	2b07      	cmp	r3, #7
 8000f0e:	d901      	bls.n	8000f14 <VL6180x_AlsSetAnalogueGain+0x1e>
		gain = 7;
 8000f10:	2307      	movs	r3, #7
 8000f12:	70fb      	strb	r3, [r7, #3]
	}
	GainTotal = gain | 0x40;
 8000f14:	78fb      	ldrb	r3, [r7, #3]
 8000f16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f1a:	73fb      	strb	r3, [r7, #15]

	status = VL6180x_WrByte(dev, SYSALS_ANALOGUE_GAIN, GainTotal);
 8000f1c:	7bfb      	ldrb	r3, [r7, #15]
 8000f1e:	461a      	mov	r2, r3
 8000f20:	213f      	movs	r1, #63	; 0x3f
 8000f22:	6878      	ldr	r0, [r7, #4]
 8000f24:	f001 fd0a 	bl	800293c <VL6180x_WrByte>
 8000f28:	60b8      	str	r0, [r7, #8]
	if (!status) {
 8000f2a:	68bb      	ldr	r3, [r7, #8]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d103      	bne.n	8000f38 <VL6180x_AlsSetAnalogueGain+0x42>
		VL6180xDevDataSet(dev, AlsGainCode, gain);
 8000f30:	78fb      	ldrb	r3, [r7, #3]
 8000f32:	b29a      	uxth	r2, r3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	829a      	strh	r2, [r3, #20]
	}

	LOG_FUNCTION_END_FMT(status, "%d %d", (int)gain, (int)GainTotal);
	return status;
 8000f38:	68bb      	ldr	r3, [r7, #8]
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3710      	adds	r7, #16
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
	...

08000f44 <VL6180x_AlsSetInterMeasurementPeriod>:

int VL6180x_AlsSetInterMeasurementPeriod(VL6180xDev_t dev,  uint16_t intermeasurement_period_ms)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	807b      	strh	r3, [r7, #2]
	int status;

	LOG_FUNCTION_START("%d", (int)intermeasurement_period_ms);
	/* clipping: range is 0-2550ms */
	if (intermeasurement_period_ms >= 255 * 10)
 8000f50:	887b      	ldrh	r3, [r7, #2]
 8000f52:	f640 12f5 	movw	r2, #2549	; 0x9f5
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d902      	bls.n	8000f60 <VL6180x_AlsSetInterMeasurementPeriod+0x1c>
		intermeasurement_period_ms = 255 * 10;
 8000f5a:	f640 13f6 	movw	r3, #2550	; 0x9f6
 8000f5e:	807b      	strh	r3, [r7, #2]
	status = VL6180x_WrByte(dev, SYSALS_INTERMEASUREMENT_PERIOD, (uint8_t)(intermeasurement_period_ms / 10));
 8000f60:	887b      	ldrh	r3, [r7, #2]
 8000f62:	4a08      	ldr	r2, [pc, #32]	; (8000f84 <VL6180x_AlsSetInterMeasurementPeriod+0x40>)
 8000f64:	fba2 2303 	umull	r2, r3, r2, r3
 8000f68:	08db      	lsrs	r3, r3, #3
 8000f6a:	b29b      	uxth	r3, r3
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	461a      	mov	r2, r3
 8000f70:	213e      	movs	r1, #62	; 0x3e
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	f001 fce2 	bl	800293c <VL6180x_WrByte>
 8000f78:	60f8      	str	r0, [r7, #12]

	LOG_FUNCTION_END_FMT(status, "%d", (int)intermeasurement_period_ms);
	return status;
 8000f7a:	68fb      	ldr	r3, [r7, #12]
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3710      	adds	r7, #16
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	cccccccd 	.word	0xcccccccd

08000f88 <VL6180x_AlsSetIntegrationPeriod>:


int VL6180x_AlsSetIntegrationPeriod(VL6180xDev_t dev, uint16_t period_ms)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	460b      	mov	r3, r1
 8000f92:	807b      	strh	r3, [r7, #2]
	int status;
	uint16_t SetIntegrationPeriod;

	LOG_FUNCTION_START("%d", (int)period_ms);

	if (period_ms >= 1)
 8000f94:	887b      	ldrh	r3, [r7, #2]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d003      	beq.n	8000fa2 <VL6180x_AlsSetIntegrationPeriod+0x1a>
		SetIntegrationPeriod = period_ms - 1;
 8000f9a:	887b      	ldrh	r3, [r7, #2]
 8000f9c:	3b01      	subs	r3, #1
 8000f9e:	81fb      	strh	r3, [r7, #14]
 8000fa0:	e001      	b.n	8000fa6 <VL6180x_AlsSetIntegrationPeriod+0x1e>
	else
		SetIntegrationPeriod = period_ms;
 8000fa2:	887b      	ldrh	r3, [r7, #2]
 8000fa4:	81fb      	strh	r3, [r7, #14]

	if (SetIntegrationPeriod > 464) {
 8000fa6:	89fb      	ldrh	r3, [r7, #14]
 8000fa8:	f5b3 7fe8 	cmp.w	r3, #464	; 0x1d0
 8000fac:	d903      	bls.n	8000fb6 <VL6180x_AlsSetIntegrationPeriod+0x2e>
		SetIntegrationPeriod = 464;
 8000fae:	f44f 73e8 	mov.w	r3, #464	; 0x1d0
 8000fb2:	81fb      	strh	r3, [r7, #14]
 8000fb4:	e005      	b.n	8000fc2 <VL6180x_AlsSetIntegrationPeriod+0x3a>
	} else if (SetIntegrationPeriod == 255)   {
 8000fb6:	89fb      	ldrh	r3, [r7, #14]
 8000fb8:	2bff      	cmp	r3, #255	; 0xff
 8000fba:	d102      	bne.n	8000fc2 <VL6180x_AlsSetIntegrationPeriod+0x3a>
		SetIntegrationPeriod++; /* can't write 255 since this causes the device to lock out.*/
 8000fbc:	89fb      	ldrh	r3, [r7, #14]
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	81fb      	strh	r3, [r7, #14]
	}

	status = VL6180x_WrWord(dev, SYSALS_INTEGRATION_PERIOD, SetIntegrationPeriod);
 8000fc2:	89fb      	ldrh	r3, [r7, #14]
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	2140      	movs	r1, #64	; 0x40
 8000fc8:	6878      	ldr	r0, [r7, #4]
 8000fca:	f001 fcdc 	bl	8002986 <VL6180x_WrWord>
 8000fce:	60b8      	str	r0, [r7, #8]
	if (!status) {
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d102      	bne.n	8000fdc <VL6180x_AlsSetIntegrationPeriod+0x54>
		VL6180xDevDataSet(dev, IntegrationPeriod, SetIntegrationPeriod) ;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	89fa      	ldrh	r2, [r7, #14]
 8000fda:	825a      	strh	r2, [r3, #18]
	}
	LOG_FUNCTION_END_FMT(status, "%d", (int)SetIntegrationPeriod);
	return status;
 8000fdc:	68bb      	ldr	r3, [r7, #8]
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3710      	adds	r7, #16
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <VL6180x_RangePollMeasurement>:

#endif /* HAVE_ALS_SUPPORT */


int VL6180x_RangePollMeasurement(VL6180xDev_t dev, VL6180x_RangeData_t *pRangeData)
{
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b086      	sub	sp, #24
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
 8000fee:	6039      	str	r1, [r7, #0]
		VL6180x_ErrLog("VL6180x_RangeClearInterrupt fail");
		goto done;
	}
	#endif
	/* //![single_shot_snipet] */
	status = VL6180x_RangeSetSystemMode(dev, MODE_START_STOP | MODE_SINGLESHOT);
 8000ff0:	2101      	movs	r1, #1
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	f000 fc44 	bl	8001880 <VL6180x_RangeSetSystemMode>
 8000ff8:	6178      	str	r0, [r7, #20]
	if (status) {
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d12d      	bne.n	800105c <VL6180x_RangePollMeasurement+0x76>
	}


	/* poll for new sample ready */
	while (1) {
		status = VL6180x_RangeGetInterruptStatus(dev, &IntStatus.val);
 8001000:	f107 030c 	add.w	r3, r7, #12
 8001004:	4619      	mov	r1, r3
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	f000 fa30 	bl	800146c <VL6180x_RangeGetInterruptStatus>
 800100c:	6178      	str	r0, [r7, #20]
		if (status) {
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d10c      	bne.n	800102e <VL6180x_RangePollMeasurement+0x48>
			break;
		}
		if (IntStatus.status.Range == RES_INT_STAT_GPIO_NEW_SAMPLE_READY || IntStatus.status.Error != 0) {
 8001014:	7b3b      	ldrb	r3, [r7, #12]
 8001016:	f003 0307 	and.w	r3, r3, #7
 800101a:	b2db      	uxtb	r3, r3
 800101c:	2b04      	cmp	r3, #4
 800101e:	d007      	beq.n	8001030 <VL6180x_RangePollMeasurement+0x4a>
 8001020:	7b3b      	ldrb	r3, [r7, #12]
 8001022:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001026:	b2db      	uxtb	r3, r3
 8001028:	2b00      	cmp	r3, #0
 800102a:	d101      	bne.n	8001030 <VL6180x_RangePollMeasurement+0x4a>
		status = VL6180x_RangeGetInterruptStatus(dev, &IntStatus.val);
 800102c:	e7e8      	b.n	8001000 <VL6180x_RangePollMeasurement+0x1a>
			break;
 800102e:	bf00      	nop

		VL6180x_PollDelay(dev);
	}
	/* //![single_shot_snipet] */

	if (!status) {
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d104      	bne.n	8001040 <VL6180x_RangePollMeasurement+0x5a>
		status = VL6180x_RangeGetMeasurement(dev, pRangeData);
 8001036:	6839      	ldr	r1, [r7, #0]
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f000 f8df 	bl	80011fc <VL6180x_RangeGetMeasurement>
 800103e:	6178      	str	r0, [r7, #20]
	}

	/*  clear range interrupt source */
	ClrStatus = VL6180x_RangeClearInterrupt(dev);
 8001040:	2101      	movs	r1, #1
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f000 fa2a 	bl	800149c <VL6180x_ClearInterrupt>
 8001048:	6138      	str	r0, [r7, #16]
	if (ClrStatus) {
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d007      	beq.n	8001060 <VL6180x_RangePollMeasurement+0x7a>
		VL6180x_ErrLog("VL6180x_RangeClearInterrupt fail");
		/*  leave initial status if already in error  */
		if (!status) {
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d104      	bne.n	8001060 <VL6180x_RangePollMeasurement+0x7a>
			status = ClrStatus;
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	617b      	str	r3, [r7, #20]
 800105a:	e002      	b.n	8001062 <VL6180x_RangePollMeasurement+0x7c>
		goto done;
 800105c:	bf00      	nop
 800105e:	e000      	b.n	8001062 <VL6180x_RangePollMeasurement+0x7c>
		}
	}
done:
 8001060:	bf00      	nop
	LOG_FUNCTION_END(status);
	return status;
 8001062:	697b      	ldr	r3, [r7, #20]
}
 8001064:	4618      	mov	r0, r3
 8001066:	3718      	adds	r7, #24
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <VL6180x_GetCachedDWord>:


#if VL6180x_CACHED_REG

int VL6180x_GetCachedDWord(VL6180xDev_t dev, uint16_t  index, uint32_t *pValue)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b088      	sub	sp, #32
 8001070:	af00      	add	r7, sp, #0
 8001072:	60f8      	str	r0, [r7, #12]
 8001074:	460b      	mov	r3, r1
 8001076:	607a      	str	r2, [r7, #4]
 8001078:	817b      	strh	r3, [r7, #10]
	int status;
	uint32_t Value;
	if (VL6180xDevDataGet(dev, CacheFilled) != 0 &&
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8001080:	2b00      	cmp	r3, #0
 8001082:	d024      	beq.n	80010ce <VL6180x_GetCachedDWord+0x62>
 8001084:	897b      	ldrh	r3, [r7, #10]
 8001086:	2b4c      	cmp	r3, #76	; 0x4c
 8001088:	d921      	bls.n	80010ce <VL6180x_GetCachedDWord+0x62>
		index >= VL6180x_FIRST_CACHED_INDEX  &&
 800108a:	897b      	ldrh	r3, [r7, #10]
 800108c:	2b81      	cmp	r3, #129	; 0x81
 800108e:	d81e      	bhi.n	80010ce <VL6180x_GetCachedDWord+0x62>
		index <= (VL6180x_LAST_CACHED_INDEX - 3)) {
		uint8_t *pBytes = &VL6180xDevDataGet(dev, CachedRegs[index - VL6180x_FIRST_CACHED_INDEX]);
 8001090:	897b      	ldrh	r3, [r7, #10]
 8001092:	3b4d      	subs	r3, #77	; 0x4d
 8001094:	3380      	adds	r3, #128	; 0x80
 8001096:	68fa      	ldr	r2, [r7, #12]
 8001098:	4413      	add	r3, r2
 800109a:	3301      	adds	r3, #1
 800109c:	61bb      	str	r3, [r7, #24]
		Value = ((uint32_t)pBytes[0] << 24) |
 800109e:	69bb      	ldr	r3, [r7, #24]
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	061a      	lsls	r2, r3, #24
				((uint32_t)pBytes[1] << 16) |
 80010a4:	69bb      	ldr	r3, [r7, #24]
 80010a6:	3301      	adds	r3, #1
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	041b      	lsls	r3, r3, #16
		Value = ((uint32_t)pBytes[0] << 24) |
 80010ac:	431a      	orrs	r2, r3
				((uint32_t)pBytes[2] << 8) |
 80010ae:	69bb      	ldr	r3, [r7, #24]
 80010b0:	3302      	adds	r3, #2
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	021b      	lsls	r3, r3, #8
				((uint32_t)pBytes[1] << 16) |
 80010b6:	4313      	orrs	r3, r2
				(uint32_t)pBytes[3];
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	3203      	adds	r2, #3
 80010bc:	7812      	ldrb	r2, [r2, #0]
		Value = ((uint32_t)pBytes[0] << 24) |
 80010be:	4313      	orrs	r3, r2
 80010c0:	617b      	str	r3, [r7, #20]
		*pValue = Value;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	697a      	ldr	r2, [r7, #20]
 80010c6:	601a      	str	r2, [r3, #0]
		status = 0;
 80010c8:	2300      	movs	r3, #0
 80010ca:	61fb      	str	r3, [r7, #28]
		index <= (VL6180x_LAST_CACHED_INDEX - 3)) {
 80010cc:	e006      	b.n	80010dc <VL6180x_GetCachedDWord+0x70>
	} else {
		status =  VL6180x_RdDWord(dev, index, pValue);
 80010ce:	897b      	ldrh	r3, [r7, #10]
 80010d0:	687a      	ldr	r2, [r7, #4]
 80010d2:	4619      	mov	r1, r3
 80010d4:	68f8      	ldr	r0, [r7, #12]
 80010d6:	f001 fd69 	bl	8002bac <VL6180x_RdDWord>
 80010da:	61f8      	str	r0, [r7, #28]
	}
	return status;
 80010dc:	69fb      	ldr	r3, [r7, #28]
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3720      	adds	r7, #32
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <VL6180x_GetCachedWord>:

int VL6180x_GetCachedWord(VL6180xDev_t dev, uint16_t  index, uint16_t *pValue)
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b088      	sub	sp, #32
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	60f8      	str	r0, [r7, #12]
 80010ee:	460b      	mov	r3, r1
 80010f0:	607a      	str	r2, [r7, #4]
 80010f2:	817b      	strh	r3, [r7, #10]
	int status;
	uint32_t Value;
	if (VL6180xDevDataGet(dev, CacheFilled) != 0 &&
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d01b      	beq.n	8001136 <VL6180x_GetCachedWord+0x50>
 80010fe:	897b      	ldrh	r3, [r7, #10]
 8001100:	2b4c      	cmp	r3, #76	; 0x4c
 8001102:	d918      	bls.n	8001136 <VL6180x_GetCachedWord+0x50>
		index >= VL6180x_FIRST_CACHED_INDEX  &&
 8001104:	897b      	ldrh	r3, [r7, #10]
 8001106:	2b83      	cmp	r3, #131	; 0x83
 8001108:	d815      	bhi.n	8001136 <VL6180x_GetCachedWord+0x50>
		index <= (VL6180x_LAST_CACHED_INDEX - 1)) {
		uint8_t *pBytes = &VL6180xDevDataGet(dev, CachedRegs[index - VL6180x_FIRST_CACHED_INDEX]);
 800110a:	897b      	ldrh	r3, [r7, #10]
 800110c:	3b4d      	subs	r3, #77	; 0x4d
 800110e:	3380      	adds	r3, #128	; 0x80
 8001110:	68fa      	ldr	r2, [r7, #12]
 8001112:	4413      	add	r3, r2
 8001114:	3301      	adds	r3, #1
 8001116:	61bb      	str	r3, [r7, #24]
		Value = ((uint32_t)pBytes[0] << 8) | (uint32_t)pBytes[1];
 8001118:	69bb      	ldr	r3, [r7, #24]
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	021b      	lsls	r3, r3, #8
 800111e:	69ba      	ldr	r2, [r7, #24]
 8001120:	3201      	adds	r2, #1
 8001122:	7812      	ldrb	r2, [r2, #0]
 8001124:	4313      	orrs	r3, r2
 8001126:	617b      	str	r3, [r7, #20]
		*pValue = Value;
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	b29a      	uxth	r2, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	801a      	strh	r2, [r3, #0]
		status = 0;
 8001130:	2300      	movs	r3, #0
 8001132:	61fb      	str	r3, [r7, #28]
		index <= (VL6180x_LAST_CACHED_INDEX - 1)) {
 8001134:	e006      	b.n	8001144 <VL6180x_GetCachedWord+0x5e>
	} else {
		status =  VL6180x_RdWord(dev, index, pValue);
 8001136:	897b      	ldrh	r3, [r7, #10]
 8001138:	687a      	ldr	r2, [r7, #4]
 800113a:	4619      	mov	r1, r3
 800113c:	68f8      	ldr	r0, [r7, #12]
 800113e:	f001 fcfc 	bl	8002b3a <VL6180x_RdWord>
 8001142:	61f8      	str	r0, [r7, #28]
	}
	return status;
 8001144:	69fb      	ldr	r3, [r7, #28]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}

0800114e <VL6180x_GetCachedByte>:

int VL6180x_GetCachedByte(VL6180xDev_t dev, uint16_t  index, uint8_t *pValue)
{
 800114e:	b580      	push	{r7, lr}
 8001150:	b086      	sub	sp, #24
 8001152:	af00      	add	r7, sp, #0
 8001154:	60f8      	str	r0, [r7, #12]
 8001156:	460b      	mov	r3, r1
 8001158:	607a      	str	r2, [r7, #4]
 800115a:	817b      	strh	r3, [r7, #10]
	int status;
	uint8_t Value;
	if (VL6180xDevDataGet(dev, CacheFilled) != 0 &&
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8001162:	2b00      	cmp	r3, #0
 8001164:	d012      	beq.n	800118c <VL6180x_GetCachedByte+0x3e>
 8001166:	897b      	ldrh	r3, [r7, #10]
 8001168:	2b4c      	cmp	r3, #76	; 0x4c
 800116a:	d90f      	bls.n	800118c <VL6180x_GetCachedByte+0x3e>
		index >= VL6180x_FIRST_CACHED_INDEX &&
 800116c:	897b      	ldrh	r3, [r7, #10]
 800116e:	2b84      	cmp	r3, #132	; 0x84
 8001170:	d80c      	bhi.n	800118c <VL6180x_GetCachedByte+0x3e>
		index <= VL6180x_LAST_CACHED_INDEX) {
		Value = VL6180xDevDataGet(dev, CachedRegs[index - VL6180x_FIRST_CACHED_INDEX]);
 8001172:	897b      	ldrh	r3, [r7, #10]
 8001174:	3b4d      	subs	r3, #77	; 0x4d
 8001176:	68fa      	ldr	r2, [r7, #12]
 8001178:	4413      	add	r3, r2
 800117a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800117e:	74fb      	strb	r3, [r7, #19]
		*pValue = Value;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	7cfa      	ldrb	r2, [r7, #19]
 8001184:	701a      	strb	r2, [r3, #0]
		status = 0;
 8001186:	2300      	movs	r3, #0
 8001188:	617b      	str	r3, [r7, #20]
 800118a:	e006      	b.n	800119a <VL6180x_GetCachedByte+0x4c>
	} else {
		status =  VL6180x_RdByte(dev, index, pValue);
 800118c:	897b      	ldrh	r3, [r7, #10]
 800118e:	687a      	ldr	r2, [r7, #4]
 8001190:	4619      	mov	r1, r3
 8001192:	68f8      	ldr	r0, [r7, #12]
 8001194:	f001 fca1 	bl	8002ada <VL6180x_RdByte>
 8001198:	6178      	str	r0, [r7, #20]
	}
	return status;
 800119a:	697b      	ldr	r3, [r7, #20]
}
 800119c:	4618      	mov	r0, r3
 800119e:	3718      	adds	r7, #24
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <_CachedRegs_Fetch>:


int _CachedRegs_Fetch(VL6180xDev_t dev)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
	int status;
	uint8_t *Buffer;
	if (VL6180xDevDataGet(dev, CacheFilled) == 0) {
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d10e      	bne.n	80011d4 <_CachedRegs_Fetch+0x30>
		VL6180xDevDataSet(dev, CacheFilled, 1);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2201      	movs	r2, #1
 80011ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
		Buffer = &VL6180xDevDataGet(dev, CachedRegs[0]);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	3381      	adds	r3, #129	; 0x81
 80011c2:	60bb      	str	r3, [r7, #8]
		status = VL6180x_RdMulti(dev, VL6180x_FIRST_CACHED_INDEX, Buffer, VL6180x_CACHED_REG_CNT);
 80011c4:	2338      	movs	r3, #56	; 0x38
 80011c6:	68ba      	ldr	r2, [r7, #8]
 80011c8:	214d      	movs	r1, #77	; 0x4d
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f001 fd2d 	bl	8002c2a <VL6180x_RdMulti>
 80011d0:	60f8      	str	r0, [r7, #12]
 80011d2:	e001      	b.n	80011d8 <_CachedRegs_Fetch+0x34>
	} else {
		status = 0 ;
 80011d4:	2300      	movs	r3, #0
 80011d6:	60fb      	str	r3, [r7, #12]
	}
	return status;
 80011d8:	68fb      	ldr	r3, [r7, #12]
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3710      	adds	r7, #16
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <_CachedRegs_Flush>:

void _CachedRegs_Flush(VL6180xDev_t dev)
{
 80011e2:	b480      	push	{r7}
 80011e4:	b083      	sub	sp, #12
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
	VL6180xDevDataSet(dev, CacheFilled, 0);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2200      	movs	r2, #0
 80011ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
}
 80011f2:	bf00      	nop
 80011f4:	370c      	adds	r7, #12
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bc80      	pop	{r7}
 80011fa:	4770      	bx	lr

080011fc <VL6180x_RangeGetMeasurement>:
#endif /* VL6180x_CACHED_REG */



int VL6180x_RangeGetMeasurement(VL6180xDev_t dev, VL6180x_RangeData_t *pRangeData)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	6039      	str	r1, [r7, #0]
	uint16_t RawRate;
	uint8_t RawStatus;

	LOG_FUNCTION_START("");

	status = _CachedRegs_Fetch(dev);
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f7ff ffcc 	bl	80011a4 <_CachedRegs_Fetch>
 800120c:	60f8      	str	r0, [r7, #12]
	if (status) {
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d153      	bne.n	80012bc <VL6180x_RangeGetMeasurement+0xc0>
		VL6180x_ErrLog("Cache register read fail");
		goto error;
	}
	status = VL6180x_RangeGetResult(dev, &pRangeData->range_mm);
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	4619      	mov	r1, r3
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f000 f85c 	bl	80012d6 <VL6180x_RangeGetResult>
 800121e:	60f8      	str	r0, [r7, #12]
	if (!status) {
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d14c      	bne.n	80012c0 <VL6180x_RangeGetMeasurement+0xc4>
		status = VL6180x_GetCachedWord(dev, RESULT_RANGE_SIGNAL_RATE, &RawRate);
 8001226:	f107 030a 	add.w	r3, r7, #10
 800122a:	461a      	mov	r2, r3
 800122c:	2166      	movs	r1, #102	; 0x66
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f7ff ff59 	bl	80010e6 <VL6180x_GetCachedWord>
 8001234:	60f8      	str	r0, [r7, #12]
		if (!status) {
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d144      	bne.n	80012c6 <VL6180x_RangeGetMeasurement+0xca>
			pRangeData->signalRate_mcps = VL6180x_9to7Conv(RawRate);
 800123c:	897b      	ldrh	r3, [r7, #10]
 800123e:	461a      	mov	r2, r3
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	605a      	str	r2, [r3, #4]
			status = VL6180x_GetCachedByte(dev, RESULT_RANGE_STATUS, &RawStatus);
 8001244:	f107 0309 	add.w	r3, r7, #9
 8001248:	461a      	mov	r2, r3
 800124a:	214d      	movs	r1, #77	; 0x4d
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f7ff ff7e 	bl	800114e <VL6180x_GetCachedByte>
 8001252:	60f8      	str	r0, [r7, #12]
			if (!status) {
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d105      	bne.n	8001266 <VL6180x_RangeGetMeasurement+0x6a>
				pRangeData->errorStatus = RawStatus >> 4;
 800125a:	7a7b      	ldrb	r3, [r7, #9]
 800125c:	091b      	lsrs	r3, r3, #4
 800125e:	b2db      	uxtb	r3, r3
 8001260:	461a      	mov	r2, r3
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	609a      	str	r2, [r3, #8]
			} else {
				VL6180x_ErrLog("Rd RESULT_RANGE_STATUS fail");
			}
	#if VL6180x_WRAP_AROUND_FILTER_SUPPORT || VL6180x_HAVE_DMAX_RANGING
			status = _GetRateResult(dev, pRangeData);
 8001266:	6839      	ldr	r1, [r7, #0]
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f001 f956 	bl	800251a <_GetRateResult>
 800126e:	60f8      	str	r0, [r7, #12]
			if (status)
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d126      	bne.n	80012c4 <VL6180x_RangeGetMeasurement+0xc8>
				goto error;
	#endif
	#if VL6180x_WRAP_AROUND_FILTER_SUPPORT
			/* if enabled run filter */
			if (_IsWrapArroundActive(dev)) {
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	7e5b      	ldrb	r3, [r3, #25]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d014      	beq.n	80012a8 <VL6180x_RangeGetMeasurement+0xac>
				status = _filter_GetResult(dev, pRangeData);
 800127e:	6839      	ldr	r1, [r7, #0]
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	f001 f8fb 	bl	800247c <_filter_GetResult>
 8001286:	60f8      	str	r0, [r7, #12]
				if (!status) {
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d10c      	bne.n	80012a8 <VL6180x_RangeGetMeasurement+0xac>
					/* patch the range status and measure if it is filtered */
					if(pRangeData->FilteredData.filterError != NoError) {
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001292:	2b00      	cmp	r3, #0
 8001294:	d008      	beq.n	80012a8 <VL6180x_RangeGetMeasurement+0xac>
						pRangeData->errorStatus = pRangeData->FilteredData.filterError;
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	609a      	str	r2, [r3, #8]
						pRangeData->range_mm = pRangeData->FilteredData.range_mm;
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	8c1b      	ldrh	r3, [r3, #32]
 80012a2:	461a      	mov	r2, r3
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	601a      	str	r2, [r3, #0]
				}
			}
	#endif

	#if VL6180x_HAVE_DMAX_RANGING
			if (_IsDMaxActive(dev)) {
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d009      	beq.n	80012c6 <VL6180x_RangeGetMeasurement+0xca>
				_DMax_Compute(dev, pRangeData);
 80012b2:	6839      	ldr	r1, [r7, #0]
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f001 fb01 	bl	80028bc <_DMax_Compute>
 80012ba:	e004      	b.n	80012c6 <VL6180x_RangeGetMeasurement+0xca>
		goto error;
 80012bc:	bf00      	nop
 80012be:	e002      	b.n	80012c6 <VL6180x_RangeGetMeasurement+0xca>
		    VL6180x_ErrLog("Rd RESULT_RANGE_SIGNAL_RATE fail");
		}
	} else {
		VL6180x_ErrLog("VL6180x_GetRangeResult fail");
	}
error:
 80012c0:	bf00      	nop
 80012c2:	e000      	b.n	80012c6 <VL6180x_RangeGetMeasurement+0xca>
				goto error;
 80012c4:	bf00      	nop
	_CachedRegs_Flush(dev);
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f7ff ff8b 	bl	80011e2 <_CachedRegs_Flush>
	LOG_FUNCTION_END_FMT(status, "%d %d %d", (int)pRangeData->range_mm, (int)pRangeData->signalRate_mcps,  (int)pRangeData->errorStatus) ;
	return status;
 80012cc:	68fb      	ldr	r3, [r7, #12]
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3710      	adds	r7, #16
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <VL6180x_RangeGetResult>:
	LOG_FUNCTION_END(status);
	return status;
}

int VL6180x_RangeGetResult(VL6180xDev_t dev, int32_t *pRange_mm)
{
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b086      	sub	sp, #24
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
 80012de:	6039      	str	r1, [r7, #0]
	uint8_t RawRange;
	int32_t Upscale;

	LOG_FUNCTION_START("%p", pRange_mm);

	status = VL6180x_GetCachedByte(dev, RESULT_RANGE_VAL, &RawRange);
 80012e0:	f107 030f 	add.w	r3, r7, #15
 80012e4:	461a      	mov	r2, r3
 80012e6:	2162      	movs	r1, #98	; 0x62
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f7ff ff30 	bl	800114e <VL6180x_GetCachedByte>
 80012ee:	6178      	str	r0, [r7, #20]
	if (!status) {
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d109      	bne.n	800130a <VL6180x_RangeGetResult+0x34>
		Upscale = _GetUpscale(dev);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	7e1b      	ldrb	r3, [r3, #24]
 80012fa:	613b      	str	r3, [r7, #16]
		*pRange_mm = Upscale * (int32_t)RawRange;
 80012fc:	7bfb      	ldrb	r3, [r7, #15]
 80012fe:	461a      	mov	r2, r3
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	fb03 f202 	mul.w	r2, r3, r2
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	601a      	str	r2, [r3, #0]
	}
	LOG_FUNCTION_END_FMT(status, "%d", (int)*pRange_mm);
	return status;
 800130a:	697b      	ldr	r3, [r7, #20]
}
 800130c:	4618      	mov	r0, r3
 800130e:	3718      	adds	r7, #24
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}

08001314 <VL6180x_RangeSetRawThresholds>:

int VL6180x_RangeSetRawThresholds(VL6180xDev_t dev, uint8_t low, uint8_t high)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	460b      	mov	r3, r1
 800131e:	70fb      	strb	r3, [r7, #3]
 8001320:	4613      	mov	r3, r2
 8001322:	70bb      	strb	r3, [r7, #2]
	int status;
	LOG_FUNCTION_START("%d %d", (int) low, (int)high);
	/* TODO we can optimize here grouping high/low in a word but that's cpu endianness dependent */
	status = VL6180x_WrByte(dev, SYSRANGE_THRESH_HIGH, high);
 8001324:	78bb      	ldrb	r3, [r7, #2]
 8001326:	461a      	mov	r2, r3
 8001328:	2119      	movs	r1, #25
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f001 fb06 	bl	800293c <VL6180x_WrByte>
 8001330:	60f8      	str	r0, [r7, #12]
	if (!status) {
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d106      	bne.n	8001346 <VL6180x_RangeSetRawThresholds+0x32>
		status = VL6180x_WrByte(dev, SYSRANGE_THRESH_LOW, low);
 8001338:	78fb      	ldrb	r3, [r7, #3]
 800133a:	461a      	mov	r2, r3
 800133c:	211a      	movs	r1, #26
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f001 fafc 	bl	800293c <VL6180x_WrByte>
 8001344:	60f8      	str	r0, [r7, #12]
	}

	LOG_FUNCTION_END(status);
	return status;
 8001346:	68fb      	ldr	r3, [r7, #12]
}
 8001348:	4618      	mov	r0, r3
 800134a:	3710      	adds	r7, #16
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}

08001350 <VL6180x_RangeSetThresholds>:

int VL6180x_RangeSetThresholds(VL6180xDev_t dev, uint16_t low, uint16_t high, int UseSafeParamHold)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b088      	sub	sp, #32
 8001354:	af00      	add	r7, sp, #0
 8001356:	60f8      	str	r0, [r7, #12]
 8001358:	607b      	str	r3, [r7, #4]
 800135a:	460b      	mov	r3, r1
 800135c:	817b      	strh	r3, [r7, #10]
 800135e:	4613      	mov	r3, r2
 8001360:	813b      	strh	r3, [r7, #8]
	int status;
	int scale;
	LOG_FUNCTION_START("%d %d", (int) low, (int)high);
	scale = _GetUpscale(dev, UpscaleFactor);
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	7e1b      	ldrb	r3, [r3, #24]
 8001366:	61bb      	str	r3, [r7, #24]
	if (low > scale * 255 || high > scale * 255) {
 8001368:	8979      	ldrh	r1, [r7, #10]
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	4613      	mov	r3, r2
 800136e:	021b      	lsls	r3, r3, #8
 8001370:	1a9b      	subs	r3, r3, r2
 8001372:	4299      	cmp	r1, r3
 8001374:	dc06      	bgt.n	8001384 <VL6180x_RangeSetThresholds+0x34>
 8001376:	8939      	ldrh	r1, [r7, #8]
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	4613      	mov	r3, r2
 800137c:	021b      	lsls	r3, r3, #8
 800137e:	1a9b      	subs	r3, r3, r2
 8001380:	4299      	cmp	r1, r3
 8001382:	dd03      	ble.n	800138c <VL6180x_RangeSetThresholds+0x3c>
		status = INVALID_PARAMS;
 8001384:	f06f 0301 	mvn.w	r3, #1
 8001388:	61fb      	str	r3, [r7, #28]
 800138a:	e028      	b.n	80013de <VL6180x_RangeSetThresholds+0x8e>
	} else {
		do {
			if (UseSafeParamHold) {
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d007      	beq.n	80013a2 <VL6180x_RangeSetThresholds+0x52>
				status = VL6180x_SetGroupParamHold(dev, 1);
 8001392:	2101      	movs	r1, #1
 8001394:	68f8      	ldr	r0, [r7, #12]
 8001396:	f7ff fcfa 	bl	8000d8e <VL6180x_SetGroupParamHold>
 800139a:	61f8      	str	r0, [r7, #28]
				if (status)
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d11c      	bne.n	80013dc <VL6180x_RangeSetThresholds+0x8c>
					break;
		    }
		    status = VL6180x_RangeSetRawThresholds(dev, (uint8_t)(low / scale), (uint8_t)(high / scale));
 80013a2:	897a      	ldrh	r2, [r7, #10]
 80013a4:	69bb      	ldr	r3, [r7, #24]
 80013a6:	fb92 f3f3 	sdiv	r3, r2, r3
 80013aa:	b2d9      	uxtb	r1, r3
 80013ac:	893a      	ldrh	r2, [r7, #8]
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	fb92 f3f3 	sdiv	r3, r2, r3
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	461a      	mov	r2, r3
 80013b8:	68f8      	ldr	r0, [r7, #12]
 80013ba:	f7ff ffab 	bl	8001314 <VL6180x_RangeSetRawThresholds>
 80013be:	61f8      	str	r0, [r7, #28]
		    if (status) {
				VL6180x_ErrLog("VL6180x_RangeSetRawThresholds fail");
		    }
		    if (UseSafeParamHold) {
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d00b      	beq.n	80013de <VL6180x_RangeSetThresholds+0x8e>
				int HoldStatus;
				/* tryt to unset param hold vene if previous fail */
				HoldStatus = VL6180x_SetGroupParamHold(dev, 0);
 80013c6:	2100      	movs	r1, #0
 80013c8:	68f8      	ldr	r0, [r7, #12]
 80013ca:	f7ff fce0 	bl	8000d8e <VL6180x_SetGroupParamHold>
 80013ce:	6178      	str	r0, [r7, #20]
				if (!status)
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d103      	bne.n	80013de <VL6180x_RangeSetThresholds+0x8e>
					status = HoldStatus;
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	61fb      	str	r3, [r7, #28]
 80013da:	e000      	b.n	80013de <VL6180x_RangeSetThresholds+0x8e>
					break;
 80013dc:	bf00      	nop
		    }
		} while (0);
	}

	LOG_FUNCTION_END(status);
	return status;
 80013de:	69fb      	ldr	r3, [r7, #28]
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3720      	adds	r7, #32
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <VL6180x_RangeGetThresholds>:


int VL6180x_RangeGetThresholds(VL6180xDev_t dev, uint16_t *low, uint16_t *high)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b088      	sub	sp, #32
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	60f8      	str	r0, [r7, #12]
 80013f0:	60b9      	str	r1, [r7, #8]
 80013f2:	607a      	str	r2, [r7, #4]
	int status = 0;
 80013f4:	2300      	movs	r3, #0
 80013f6:	61fb      	str	r3, [r7, #28]
	uint8_t RawLow, RawHigh;
	int scale;

	LOG_FUNCTION_START("%p %p", low , high);

	scale = _GetUpscale(dev, UpscaleFactor);
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	7e1b      	ldrb	r3, [r3, #24]
 80013fc:	61bb      	str	r3, [r7, #24]
	do {
		if (high != NULL) {
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d013      	beq.n	800142c <VL6180x_RangeGetThresholds+0x44>
			status = VL6180x_RdByte(dev, SYSRANGE_THRESH_HIGH, &RawHigh);
 8001404:	f107 0316 	add.w	r3, r7, #22
 8001408:	461a      	mov	r2, r3
 800140a:	2119      	movs	r1, #25
 800140c:	68f8      	ldr	r0, [r7, #12]
 800140e:	f001 fb64 	bl	8002ada <VL6180x_RdByte>
 8001412:	61f8      	str	r0, [r7, #28]
			if (status) {
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d120      	bne.n	800145c <VL6180x_RangeGetThresholds+0x74>
				VL6180x_ErrLog("rd SYSRANGE_THRESH_HIGH fail");
				break;
			}
			*high = (uint16_t)RawHigh * scale;
 800141a:	7dbb      	ldrb	r3, [r7, #22]
 800141c:	b29b      	uxth	r3, r3
 800141e:	69ba      	ldr	r2, [r7, #24]
 8001420:	b292      	uxth	r2, r2
 8001422:	fb02 f303 	mul.w	r3, r2, r3
 8001426:	b29a      	uxth	r2, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	801a      	strh	r2, [r3, #0]
		}
		if (low != NULL) {
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d017      	beq.n	8001462 <VL6180x_RangeGetThresholds+0x7a>
		    status = VL6180x_RdByte(dev, SYSRANGE_THRESH_LOW, &RawLow);
 8001432:	f107 0317 	add.w	r3, r7, #23
 8001436:	461a      	mov	r2, r3
 8001438:	211a      	movs	r1, #26
 800143a:	68f8      	ldr	r0, [r7, #12]
 800143c:	f001 fb4d 	bl	8002ada <VL6180x_RdByte>
 8001440:	61f8      	str	r0, [r7, #28]
			if (status) {
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d10b      	bne.n	8001460 <VL6180x_RangeGetThresholds+0x78>
				VL6180x_ErrLog("rd SYSRANGE_THRESH_LOW fail");
				break;
		    }
		    *low = (uint16_t)RawLow * scale;
 8001448:	7dfb      	ldrb	r3, [r7, #23]
 800144a:	b29b      	uxth	r3, r3
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	b292      	uxth	r2, r2
 8001450:	fb02 f303 	mul.w	r3, r2, r3
 8001454:	b29a      	uxth	r2, r3
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	801a      	strh	r2, [r3, #0]
 800145a:	e002      	b.n	8001462 <VL6180x_RangeGetThresholds+0x7a>
				break;
 800145c:	bf00      	nop
 800145e:	e000      	b.n	8001462 <VL6180x_RangeGetThresholds+0x7a>
				break;
 8001460:	bf00      	nop
		}
	} while (0);
	LOG_FUNCTION_END_FMT(status, "%d %d", (int)*low , (int)*high);
	return status;
 8001462:	69fb      	ldr	r3, [r7, #28]
}
 8001464:	4618      	mov	r0, r3
 8001466:	3720      	adds	r7, #32
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <VL6180x_RangeGetInterruptStatus>:


int VL6180x_RangeGetInterruptStatus(VL6180xDev_t dev, uint8_t *pIntStatus)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	6039      	str	r1, [r7, #0]
	int status;
	uint8_t IntStatus;
	LOG_FUNCTION_START("%p", pIntStatus);
	/* FIXME we are grouping "error" with over status the user must check implicitly for it
	 * not just new sample or over status , that will nevr show up in case of error*/
	status = VL6180x_GetCachedByte(dev, RESULT_INTERRUPT_STATUS_GPIO, &IntStatus);
 8001476:	f107 030b 	add.w	r3, r7, #11
 800147a:	461a      	mov	r2, r3
 800147c:	214f      	movs	r1, #79	; 0x4f
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	f7ff fe65 	bl	800114e <VL6180x_GetCachedByte>
 8001484:	60f8      	str	r0, [r7, #12]
	*pIntStatus = IntStatus & 0xC7;
 8001486:	7afb      	ldrb	r3, [r7, #11]
 8001488:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800148c:	b2da      	uxtb	r2, r3
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END_FMT(status, "%d", (int)*pIntStatus);
	return status;
 8001492:	68fb      	ldr	r3, [r7, #12]
}
 8001494:	4618      	mov	r0, r3
 8001496:	3710      	adds	r7, #16
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}

0800149c <VL6180x_ClearInterrupt>:
	LOG_FUNCTION_END_FMT(status, "%d", (int)*IntStatus);
	return status;
}

int VL6180x_ClearInterrupt(VL6180xDev_t dev, uint8_t IntClear)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	460b      	mov	r3, r1
 80014a6:	70fb      	strb	r3, [r7, #3]
	int status;
	LOG_FUNCTION_START("%d", (int)IntClear);
	if (IntClear <= 7) {
 80014a8:	78fb      	ldrb	r3, [r7, #3]
 80014aa:	2b07      	cmp	r3, #7
 80014ac:	d807      	bhi.n	80014be <VL6180x_ClearInterrupt+0x22>
		status = VL6180x_WrByte(dev, SYSTEM_INTERRUPT_CLEAR, IntClear);
 80014ae:	78fb      	ldrb	r3, [r7, #3]
 80014b0:	461a      	mov	r2, r3
 80014b2:	2115      	movs	r1, #21
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f001 fa41 	bl	800293c <VL6180x_WrByte>
 80014ba:	60f8      	str	r0, [r7, #12]
 80014bc:	e002      	b.n	80014c4 <VL6180x_ClearInterrupt+0x28>
	} else {
		status = INVALID_PARAMS;
 80014be:	f06f 0301 	mvn.w	r3, #1
 80014c2:	60fb      	str	r3, [r7, #12]
	}
	LOG_FUNCTION_END(status);
	return status;
 80014c4:	68fb      	ldr	r3, [r7, #12]
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3710      	adds	r7, #16
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <_UpscaleInitPatch0>:
}

#if VL6180x_UPSCALE_SUPPORT != 1

static int _UpscaleInitPatch0(VL6180xDev_t dev)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b084      	sub	sp, #16
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
	int status;
	uint32_t CalValue = 0;
 80014d6:	2300      	movs	r3, #0
 80014d8:	60fb      	str	r3, [r7, #12]
	CalValue = VL6180xDevDataGet(dev, Part2PartAmbNVM);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	60fb      	str	r3, [r7, #12]
	status = VL6180x_WrDWord(dev, 0xDA, CalValue);
 80014e0:	68fa      	ldr	r2, [r7, #12]
 80014e2:	21da      	movs	r1, #218	; 0xda
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f001 fa7b 	bl	80029e0 <VL6180x_WrDWord>
 80014ea:	60b8      	str	r0, [r7, #8]
	return status;
 80014ec:	68bb      	ldr	r3, [r7, #8]
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3710      	adds	r7, #16
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <VL6180x_UpscaleRegInit>:

/* only include up-scaling register setting when up-scale support is configured in */
int VL6180x_UpscaleRegInit(VL6180xDev_t dev)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b082      	sub	sp, #8
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
	/*  apply REGISTER_TUNING_ER02_100614_CustomerView.txt */
	VL6180x_WrByte(dev, 0x0207, 0x01);
 80014fe:	2201      	movs	r2, #1
 8001500:	f240 2107 	movw	r1, #519	; 0x207
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f001 fa19 	bl	800293c <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x0208, 0x01);
 800150a:	2201      	movs	r2, #1
 800150c:	f44f 7102 	mov.w	r1, #520	; 0x208
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f001 fa13 	bl	800293c <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x0096, 0x00);
 8001516:	2200      	movs	r2, #0
 8001518:	2196      	movs	r1, #150	; 0x96
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f001 fa0e 	bl	800293c <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x0097, 0x54);
 8001520:	2254      	movs	r2, #84	; 0x54
 8001522:	2197      	movs	r1, #151	; 0x97
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f001 fa09 	bl	800293c <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x00e3, 0x01);
 800152a:	2201      	movs	r2, #1
 800152c:	21e3      	movs	r1, #227	; 0xe3
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f001 fa04 	bl	800293c <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x00e4, 0x03);
 8001534:	2203      	movs	r2, #3
 8001536:	21e4      	movs	r1, #228	; 0xe4
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f001 f9ff 	bl	800293c <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x00e5, 0x02);
 800153e:	2202      	movs	r2, #2
 8001540:	21e5      	movs	r1, #229	; 0xe5
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f001 f9fa 	bl	800293c <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x00e6, 0x01);
 8001548:	2201      	movs	r2, #1
 800154a:	21e6      	movs	r1, #230	; 0xe6
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f001 f9f5 	bl	800293c <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x00e7, 0x03);
 8001552:	2203      	movs	r2, #3
 8001554:	21e7      	movs	r1, #231	; 0xe7
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f001 f9f0 	bl	800293c <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x00f5, 0x02);
 800155c:	2202      	movs	r2, #2
 800155e:	21f5      	movs	r1, #245	; 0xf5
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	f001 f9eb 	bl	800293c <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x00d9, 0x05);
 8001566:	2205      	movs	r2, #5
 8001568:	21d9      	movs	r1, #217	; 0xd9
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f001 f9e6 	bl	800293c <VL6180x_WrByte>

	_UpscaleInitPatch0(dev);
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f7ff ffac 	bl	80014ce <_UpscaleInitPatch0>

	VL6180x_WrByte(dev, 0x009f, 0x00);
 8001576:	2200      	movs	r2, #0
 8001578:	219f      	movs	r1, #159	; 0x9f
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f001 f9de 	bl	800293c <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x00a3, 0x28);
 8001580:	2228      	movs	r2, #40	; 0x28
 8001582:	21a3      	movs	r1, #163	; 0xa3
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f001 f9d9 	bl	800293c <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x00b7, 0x00);
 800158a:	2200      	movs	r2, #0
 800158c:	21b7      	movs	r1, #183	; 0xb7
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f001 f9d4 	bl	800293c <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x00bb, 0x28);
 8001594:	2228      	movs	r2, #40	; 0x28
 8001596:	21bb      	movs	r1, #187	; 0xbb
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	f001 f9cf 	bl	800293c <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x00b2, 0x09);
 800159e:	2209      	movs	r2, #9
 80015a0:	21b2      	movs	r1, #178	; 0xb2
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f001 f9ca 	bl	800293c <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x00ca, 0x09);
 80015a8:	2209      	movs	r2, #9
 80015aa:	21ca      	movs	r1, #202	; 0xca
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f001 f9c5 	bl	800293c <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x0198, 0x01);
 80015b2:	2201      	movs	r2, #1
 80015b4:	f44f 71cc 	mov.w	r1, #408	; 0x198
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	f001 f9bf 	bl	800293c <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x01b0, 0x17);
 80015be:	2217      	movs	r2, #23
 80015c0:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f001 f9b9 	bl	800293c <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x01ad, 0x00);
 80015ca:	2200      	movs	r2, #0
 80015cc:	f240 11ad 	movw	r1, #429	; 0x1ad
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	f001 f9b3 	bl	800293c <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x00ff, 0x05);
 80015d6:	2205      	movs	r2, #5
 80015d8:	21ff      	movs	r1, #255	; 0xff
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f001 f9ae 	bl	800293c <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x0100, 0x05);
 80015e0:	2205      	movs	r2, #5
 80015e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f001 f9a8 	bl	800293c <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x0199, 0x05);
 80015ec:	2205      	movs	r2, #5
 80015ee:	f240 1199 	movw	r1, #409	; 0x199
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f001 f9a2 	bl	800293c <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x01a6, 0x1b);
 80015f8:	221b      	movs	r2, #27
 80015fa:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f001 f99c 	bl	800293c <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x01ac, 0x3e);
 8001604:	223e      	movs	r2, #62	; 0x3e
 8001606:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f001 f996 	bl	800293c <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x01a7, 0x1f);
 8001610:	221f      	movs	r2, #31
 8001612:	f240 11a7 	movw	r1, #423	; 0x1a7
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f001 f990 	bl	800293c <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x0030, 0x00);
 800161c:	2200      	movs	r2, #0
 800161e:	2130      	movs	r1, #48	; 0x30
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f001 f98b 	bl	800293c <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x0011, 0x10);
 8001626:	2210      	movs	r2, #16
 8001628:	2111      	movs	r1, #17
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f001 f986 	bl	800293c <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x010a, 0x30);
 8001630:	2230      	movs	r2, #48	; 0x30
 8001632:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f001 f980 	bl	800293c <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x003f, 0x46);
 800163c:	2246      	movs	r2, #70	; 0x46
 800163e:	213f      	movs	r1, #63	; 0x3f
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f001 f97b 	bl	800293c <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x0031, 0xFF);
 8001646:	22ff      	movs	r2, #255	; 0xff
 8001648:	2131      	movs	r1, #49	; 0x31
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f001 f976 	bl	800293c <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x0040, 0x63);
 8001650:	2263      	movs	r2, #99	; 0x63
 8001652:	2140      	movs	r1, #64	; 0x40
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	f001 f971 	bl	800293c <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x002e, 0x01);
 800165a:	2201      	movs	r2, #1
 800165c:	212e      	movs	r1, #46	; 0x2e
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f001 f96c 	bl	800293c <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x002c, 0xff);
 8001664:	22ff      	movs	r2, #255	; 0xff
 8001666:	212c      	movs	r1, #44	; 0x2c
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f001 f967 	bl	800293c <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x001b, 0x09);
 800166e:	2209      	movs	r2, #9
 8001670:	211b      	movs	r1, #27
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f001 f962 	bl	800293c <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x003e, 0x31);
 8001678:	2231      	movs	r2, #49	; 0x31
 800167a:	213e      	movs	r1, #62	; 0x3e
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f001 f95d 	bl	800293c <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x0014, 0x24);
 8001682:	2224      	movs	r2, #36	; 0x24
 8001684:	2114      	movs	r1, #20
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f001 f958 	bl	800293c <VL6180x_WrByte>
#if VL6180x_EXTENDED_RANGE
	VL6180x_RangeSetMaxConvergenceTime(dev, 63);
#else
	VL6180x_RangeSetMaxConvergenceTime(dev, 50);
 800168c:	2132      	movs	r1, #50	; 0x32
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f000 f8d0 	bl	8001834 <VL6180x_RangeSetMaxConvergenceTime>
#endif
	return 0;
 8001694:	2300      	movs	r3, #0
}
 8001696:	4618      	mov	r0, r3
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
	...

080016a0 <VL6180x_UpscaleSetScaling>:
#else
#define VL6180x_UpscaleRegInit(...) -1
#endif

int VL6180x_UpscaleSetScaling(VL6180xDev_t dev, uint8_t scaling)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b086      	sub	sp, #24
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	460b      	mov	r3, r1
 80016aa:	70fb      	strb	r3, [r7, #3]
	/* we are in fixed config so only allow configured factor */
	#define min_scaling VL6180x_UPSCALE_SUPPORT
	#define max_scaling VL6180x_UPSCALE_SUPPORT
#endif

	if (scaling >= min_scaling  && scaling <= max_scaling) {
 80016ac:	78fb      	ldrb	r3, [r7, #3]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d063      	beq.n	800177a <VL6180x_UpscaleSetScaling+0xda>
 80016b2:	78fb      	ldrb	r3, [r7, #3]
 80016b4:	2b03      	cmp	r3, #3
 80016b6:	d860      	bhi.n	800177a <VL6180x_UpscaleSetScaling+0xda>

		Scaler = ScalerLookUP[scaling - 1];
 80016b8:	78fb      	ldrb	r3, [r7, #3]
 80016ba:	3b01      	subs	r3, #1
 80016bc:	4a34      	ldr	r2, [pc, #208]	; (8001790 <VL6180x_UpscaleSetScaling+0xf0>)
 80016be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016c2:	823b      	strh	r3, [r7, #16]
		status = VL6180x_WrWord(dev, RANGE_SCALER, Scaler);
 80016c4:	8a3b      	ldrh	r3, [r7, #16]
 80016c6:	461a      	mov	r2, r3
 80016c8:	2196      	movs	r1, #150	; 0x96
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f001 f95b 	bl	8002986 <VL6180x_WrWord>
 80016d0:	6178      	str	r0, [r7, #20]
		_SetUpscale(dev, scaling);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	78fa      	ldrb	r2, [r7, #3]
 80016d6:	761a      	strb	r2, [r3, #24]

		/* Apply scaling on  part-2-part offset */
		Offset = VL6180xDevDataGet(dev, Part2PartOffsetNVM) / scaling;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f993 30cd 	ldrsb.w	r3, [r3, #205]	; 0xcd
 80016de:	461a      	mov	r2, r3
 80016e0:	78fb      	ldrb	r3, [r7, #3]
 80016e2:	fb92 f3f3 	sdiv	r3, r2, r3
 80016e6:	73fb      	strb	r3, [r7, #15]
		status = VL6180x_WrByte(dev, SYSRANGE_PART_TO_PART_RANGE_OFFSET, Offset);
 80016e8:	7bfb      	ldrb	r3, [r7, #15]
 80016ea:	461a      	mov	r2, r3
 80016ec:	2124      	movs	r1, #36	; 0x24
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f001 f924 	bl	800293c <VL6180x_WrByte>
 80016f4:	6178      	str	r0, [r7, #20]

		/* Apply scaling on CrossTalkValidHeight */
		if (status == 0) {
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d10a      	bne.n	8001712 <VL6180x_UpscaleSetScaling+0x72>
			status = VL6180x_WrByte(dev, SYSRANGE_CROSSTALK_VALID_HEIGHT,
									DEF_CROSS_TALK_VALID_HEIGHT_VALUE /  scaling);
 80016fc:	78fb      	ldrb	r3, [r7, #3]
 80016fe:	2214      	movs	r2, #20
 8001700:	fb92 f3f3 	sdiv	r3, r2, r3
			status = VL6180x_WrByte(dev, SYSRANGE_CROSSTALK_VALID_HEIGHT,
 8001704:	b2db      	uxtb	r3, r3
 8001706:	461a      	mov	r2, r3
 8001708:	2121      	movs	r1, #33	; 0x21
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f001 f916 	bl	800293c <VL6180x_WrByte>
 8001710:	6178      	str	r0, [r7, #20]
		}
		/* Apply scaling on RangeIgnore ValidHeight if enabled */
		if( status == 0){
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d119      	bne.n	800174c <VL6180x_UpscaleSetScaling+0xac>
			if(  VL6180xDevDataGet(dev, RangeIgnore.Enabled) !=0 ){
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	7c1b      	ldrb	r3, [r3, #16]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d015      	beq.n	800174c <VL6180x_UpscaleSetScaling+0xac>
				ValidHeight = VL6180xDevDataGet(dev, RangeIgnore.ValidHeight);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	899b      	ldrh	r3, [r3, #12]
 8001724:	827b      	strh	r3, [r7, #18]
				ValidHeight  /= _GetUpscale(dev);
 8001726:	8a7b      	ldrh	r3, [r7, #18]
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	7e12      	ldrb	r2, [r2, #24]
 800172c:	fb93 f3f2 	sdiv	r3, r3, r2
 8001730:	827b      	strh	r3, [r7, #18]
				if( ValidHeight > 255 )
 8001732:	8a7b      	ldrh	r3, [r7, #18]
 8001734:	2bff      	cmp	r3, #255	; 0xff
 8001736:	d901      	bls.n	800173c <VL6180x_UpscaleSetScaling+0x9c>
					ValidHeight = 255;
 8001738:	23ff      	movs	r3, #255	; 0xff
 800173a:	827b      	strh	r3, [r7, #18]

				status = VL6180x_WrByte(dev, SYSRANGE_RANGE_IGNORE_VALID_HEIGHT,
 800173c:	8a7b      	ldrh	r3, [r7, #18]
 800173e:	b2db      	uxtb	r3, r3
 8001740:	461a      	mov	r2, r3
 8001742:	2125      	movs	r1, #37	; 0x25
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f001 f8f9 	bl	800293c <VL6180x_WrByte>
 800174a:	6178      	str	r0, [r7, #20]
							ValidHeight );
			}
		}

#if !VL6180x_EXTENDED_RANGE
		if (status == 0) {
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d10a      	bne.n	8001768 <VL6180x_UpscaleSetScaling+0xc8>
			status = VL6180x_RangeSetEceState(dev, scaling == 1); /* enable ece only at 1x scaling */
 8001752:	78fb      	ldrb	r3, [r7, #3]
 8001754:	2b01      	cmp	r3, #1
 8001756:	bf0c      	ite	eq
 8001758:	2301      	moveq	r3, #1
 800175a:	2300      	movne	r3, #0
 800175c:	b2db      	uxtb	r3, r3
 800175e:	4619      	mov	r1, r3
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f000 f84e 	bl	8001802 <VL6180x_RangeSetEceState>
 8001766:	6178      	str	r0, [r7, #20]
		}
		if (status == 0 && !VL6180x_EXTENDED_RANGE && scaling != 1) {
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d109      	bne.n	8001782 <VL6180x_UpscaleSetScaling+0xe2>
 800176e:	78fb      	ldrb	r3, [r7, #3]
 8001770:	2b01      	cmp	r3, #1
 8001772:	d006      	beq.n	8001782 <VL6180x_UpscaleSetScaling+0xe2>
			status = NOT_GUARANTEED ;
 8001774:	2303      	movs	r3, #3
 8001776:	617b      	str	r3, [r7, #20]
		if (status == 0 && !VL6180x_EXTENDED_RANGE && scaling != 1) {
 8001778:	e003      	b.n	8001782 <VL6180x_UpscaleSetScaling+0xe2>
		}
#endif
	} else {
		status = INVALID_PARAMS;
 800177a:	f06f 0301 	mvn.w	r3, #1
 800177e:	617b      	str	r3, [r7, #20]
 8001780:	e000      	b.n	8001784 <VL6180x_UpscaleSetScaling+0xe4>
		if (status == 0 && !VL6180x_EXTENDED_RANGE && scaling != 1) {
 8001782:	bf00      	nop
	}
#undef min_scaling
#undef max_scaling
	LOG_FUNCTION_END(status);
	return status;
 8001784:	697b      	ldr	r3, [r7, #20]
}
 8001786:	4618      	mov	r0, r3
 8001788:	3718      	adds	r7, #24
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	08004fd8 	.word	0x08004fd8

08001794 <VL6180x_UpscaleStaticInit>:
	return status;
}


static int  VL6180x_UpscaleStaticInit(VL6180xDev_t dev)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
	/* todo make these a fail macro in case only 1x is suppoted */
	int status;

	LOG_FUNCTION_START("");
	do {
		status = VL6180x_UpscaleRegInit(dev);
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f7ff feaa 	bl	80014f6 <VL6180x_UpscaleRegInit>
 80017a2:	60f8      	str	r0, [r7, #12]
		if (status) {
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	2b00      	cmp	r3, #0
			VL6180x_ErrLog("VL6180x_RangeSetEceState fail");
			break;
		}
#endif
	} while (0);
	if (!status) {
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d10b      	bne.n	80017c6 <VL6180x_UpscaleStaticInit+0x32>
		/*  must write the scaler at least once to the device to ensure the scaler is in a known state. */
		status = VL6180x_UpscaleSetScaling(dev, _GetUpscale(dev));
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	7e1b      	ldrb	r3, [r3, #24]
 80017b2:	4619      	mov	r1, r3
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f7ff ff73 	bl	80016a0 <VL6180x_UpscaleSetScaling>
 80017ba:	60f8      	str	r0, [r7, #12]
		VL6180x_WrByte(dev, 0x016, 0x00); /* change fresh out of set status to 0 */
 80017bc:	2200      	movs	r2, #0
 80017be:	2116      	movs	r1, #22
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f001 f8bb 	bl	800293c <VL6180x_WrByte>
	}
	LOG_FUNCTION_END(status);
	return status;
 80017c6:	68fb      	ldr	r3, [r7, #12]
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3710      	adds	r7, #16
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <VL6180x_RangeConfigInterrupt>:
	LOG_FUNCTION_END(status);
	return status;
}

int VL6180x_RangeConfigInterrupt(VL6180xDev_t dev, uint8_t ConfigGpioInt)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	460b      	mov	r3, r1
 80017da:	70fb      	strb	r3, [r7, #3]
	int status;

	if (ConfigGpioInt <= CONFIG_GPIO_INTERRUPT_NEW_SAMPLE_READY) {
 80017dc:	78fb      	ldrb	r3, [r7, #3]
 80017de:	2b04      	cmp	r3, #4
 80017e0:	d807      	bhi.n	80017f2 <VL6180x_RangeConfigInterrupt+0x22>
		status = VL6180x_UpdateByte(dev, SYSTEM_INTERRUPT_CONFIG_GPIO,
 80017e2:	78fb      	ldrb	r3, [r7, #3]
 80017e4:	22f8      	movs	r2, #248	; 0xf8
 80017e6:	2114      	movs	r1, #20
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f001 f930 	bl	8002a4e <VL6180x_UpdateByte>
 80017ee:	60f8      	str	r0, [r7, #12]
 80017f0:	e002      	b.n	80017f8 <VL6180x_RangeConfigInterrupt+0x28>
									(uint8_t)(~CONFIG_GPIO_RANGE_MASK),
									ConfigGpioInt);
	} else {
		VL6180x_ErrLog("Invalid config mode param %d", (int)ConfigGpioInt);
		status = INVALID_PARAMS;
 80017f2:	f06f 0301 	mvn.w	r3, #1
 80017f6:	60fb      	str	r3, [r7, #12]
	}
	LOG_FUNCTION_END(status);
	return status;
 80017f8:	68fb      	ldr	r3, [r7, #12]
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3710      	adds	r7, #16
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <VL6180x_RangeSetEceState>:
	LOG_FUNCTION_END(status);
	return status;
}

int VL6180x_RangeSetEceState(VL6180xDev_t dev, int enable)
{
 8001802:	b580      	push	{r7, lr}
 8001804:	b084      	sub	sp, #16
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
 800180a:	6039      	str	r1, [r7, #0]
	int status;
	uint8_t or_mask;

	LOG_FUNCTION_START("%d", (int)enable);
	if (enable)
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d002      	beq.n	8001818 <VL6180x_RangeSetEceState+0x16>
		or_mask = RANGE_CHECK_ECE_ENABLE_MASK;
 8001812:	2301      	movs	r3, #1
 8001814:	73fb      	strb	r3, [r7, #15]
 8001816:	e001      	b.n	800181c <VL6180x_RangeSetEceState+0x1a>
	else
		or_mask = 0;
 8001818:	2300      	movs	r3, #0
 800181a:	73fb      	strb	r3, [r7, #15]

	status = VL6180x_UpdateByte(dev, SYSRANGE_RANGE_CHECK_ENABLES, ~RANGE_CHECK_ECE_ENABLE_MASK, or_mask);
 800181c:	7bfb      	ldrb	r3, [r7, #15]
 800181e:	22fe      	movs	r2, #254	; 0xfe
 8001820:	212d      	movs	r1, #45	; 0x2d
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f001 f913 	bl	8002a4e <VL6180x_UpdateByte>
 8001828:	60b8      	str	r0, [r7, #8]
	LOG_FUNCTION_END(status);
	return status;
 800182a:	68bb      	ldr	r3, [r7, #8]
}
 800182c:	4618      	mov	r0, r3
 800182e:	3710      	adds	r7, #16
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}

08001834 <VL6180x_RangeSetMaxConvergenceTime>:


int VL6180x_RangeSetMaxConvergenceTime(VL6180xDev_t dev, uint8_t  MaxConTime_msec)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	460b      	mov	r3, r1
 800183e:	70fb      	strb	r3, [r7, #3]
	int status = 0;
 8001840:	2300      	movs	r3, #0
 8001842:	60fb      	str	r3, [r7, #12]
	LOG_FUNCTION_START("%d", (int)MaxConTime_msec);
	do {
		status = VL6180x_WrByte(dev, SYSRANGE_MAX_CONVERGENCE_TIME, MaxConTime_msec);
 8001844:	78fb      	ldrb	r3, [r7, #3]
 8001846:	461a      	mov	r2, r3
 8001848:	211c      	movs	r1, #28
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f001 f876 	bl	800293c <VL6180x_WrByte>
 8001850:	60f8      	str	r0, [r7, #12]
		if (status) {
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d10b      	bne.n	8001870 <VL6180x_RangeSetMaxConvergenceTime+0x3c>
			break;
		}
		status = VL6180x_RangeSetEarlyConvergenceEestimateThreshold(dev);
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f000 f82a 	bl	80018b2 <VL6180x_RangeSetEarlyConvergenceEestimateThreshold>
 800185e:	60f8      	str	r0, [r7, #12]
		if (status) {
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d106      	bne.n	8001874 <VL6180x_RangeSetMaxConvergenceTime+0x40>
			break;
		}
		status = _DMax_InitData(dev);
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	f000 ff6a 	bl	8002740 <_DMax_InitData>
 800186c:	60f8      	str	r0, [r7, #12]
 800186e:	e002      	b.n	8001876 <VL6180x_RangeSetMaxConvergenceTime+0x42>
			break;
 8001870:	bf00      	nop
 8001872:	e000      	b.n	8001876 <VL6180x_RangeSetMaxConvergenceTime+0x42>
			break;
 8001874:	bf00      	nop
	} while (0);
	LOG_FUNCTION_END(status);
	return status;
 8001876:	68fb      	ldr	r3, [r7, #12]
}
 8001878:	4618      	mov	r0, r3
 800187a:	3710      	adds	r7, #16
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}

08001880 <VL6180x_RangeSetSystemMode>:
	LOG_FUNCTION_END(status);
	return status;
}

int VL6180x_RangeSetSystemMode(VL6180xDev_t dev, uint8_t  mode)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	460b      	mov	r3, r1
 800188a:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("%d", (int)mode);
	/* FIXME we are not checking device is ready via @a VL6180x_RangeWaitDeviceReady
	 * so if called back to back real fast we are not checking
	 * if previous mode "set" got absorbed => bit 0 must be 0 so that it work
	 */
	if (mode <= 3) {
 800188c:	78fb      	ldrb	r3, [r7, #3]
 800188e:	2b03      	cmp	r3, #3
 8001890:	d807      	bhi.n	80018a2 <VL6180x_RangeSetSystemMode+0x22>
		status = VL6180x_WrByte(dev, SYSRANGE_START, mode);
 8001892:	78fb      	ldrb	r3, [r7, #3]
 8001894:	461a      	mov	r2, r3
 8001896:	2118      	movs	r1, #24
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f001 f84f 	bl	800293c <VL6180x_WrByte>
 800189e:	60f8      	str	r0, [r7, #12]
 80018a0:	e002      	b.n	80018a8 <VL6180x_RangeSetSystemMode+0x28>
		if (status) {
		    VL6180x_ErrLog("SYSRANGE_START wr fail");
		}
	} else {
		status = INVALID_PARAMS;
 80018a2:	f06f 0301 	mvn.w	r3, #1
 80018a6:	60fb      	str	r3, [r7, #12]
	}
	LOG_FUNCTION_END(status);
	return status;
 80018a8:	68fb      	ldr	r3, [r7, #12]
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3710      	adds	r7, #16
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <VL6180x_RangeSetEarlyConvergenceEestimateThreshold>:
	return status;
}


static int VL6180x_RangeSetEarlyConvergenceEestimateThreshold(VL6180xDev_t dev)
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b08e      	sub	sp, #56	; 0x38
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
	int status;

	const uint32_t cMicroSecPerMilliSec  = 1000;
 80018ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018be:	633b      	str	r3, [r7, #48]	; 0x30
	const uint32_t cEceSampleTime_us     = 500;
 80018c0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80018c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t ece_factor_m          = VL6180xDevDataGet(dev, EceFactorM);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	891b      	ldrh	r3, [r3, #8]
 80018ca:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t ece_factor_d          = VL6180xDevDataGet(dev, EceFactorD);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	895b      	ldrh	r3, [r3, #10]
 80018d0:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t AveTime;

	LOG_FUNCTION_START("");

	do {
		status = VL6180x_RdByte(dev, SYSRANGE_MAX_CONVERGENCE_TIME, &u8);
 80018d2:	f107 030f 	add.w	r3, r7, #15
 80018d6:	461a      	mov	r2, r3
 80018d8:	211c      	movs	r1, #28
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f001 f8fd 	bl	8002ada <VL6180x_RdByte>
 80018e0:	6378      	str	r0, [r7, #52]	; 0x34
		if (status) {
 80018e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d138      	bne.n	800195a <VL6180x_RangeSetEarlyConvergenceEestimateThreshold+0xa8>
			VL6180x_ErrLog("SYSRANGE_MAX_CONVERGENCE_TIME rd fail");
			break;
		}
		maxConv_ms = u8;
 80018e8:	7bfb      	ldrb	r3, [r7, #15]
 80018ea:	623b      	str	r3, [r7, #32]
		AveTime = _GetAveTotalTime(dev);
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f000 f83c 	bl	800196a <_GetAveTotalTime>
 80018f2:	61f8      	str	r0, [r7, #28]
		if (AveTime < 0) {
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	da03      	bge.n	8001902 <VL6180x_RangeSetEarlyConvergenceEestimateThreshold+0x50>
			status = -1;
 80018fa:	f04f 33ff 	mov.w	r3, #4294967295
 80018fe:	637b      	str	r3, [r7, #52]	; 0x34
			break;
 8001900:	e02e      	b.n	8001960 <VL6180x_RangeSetEarlyConvergenceEestimateThreshold+0xae>
		}

		convergTime_us = maxConv_ms * cMicroSecPerMilliSec - AveTime;
 8001902:	6a3b      	ldr	r3, [r7, #32]
 8001904:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001906:	fb03 f202 	mul.w	r2, r3, r2
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	61bb      	str	r3, [r7, #24]
		status = VL6180x_RdDWord(dev, 0xB8, &fineThresh);
 8001910:	f107 0310 	add.w	r3, r7, #16
 8001914:	461a      	mov	r2, r3
 8001916:	21b8      	movs	r1, #184	; 0xb8
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f001 f947 	bl	8002bac <VL6180x_RdDWord>
 800191e:	6378      	str	r0, [r7, #52]	; 0x34
		if (status) {
 8001920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001922:	2b00      	cmp	r3, #0
 8001924:	d11b      	bne.n	800195e <VL6180x_RangeSetEarlyConvergenceEestimateThreshold+0xac>
			VL6180x_ErrLog("reg 0xB8 rd fail");
			break;
		}
		fineThresh *= 256;
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	021b      	lsls	r3, r3, #8
 800192a:	613b      	str	r3, [r7, #16]
		eceThresh = ece_factor_m * cEceSampleTime_us * fineThresh / (convergTime_us * ece_factor_d);
 800192c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800192e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001930:	fb02 f303 	mul.w	r3, r2, r3
 8001934:	693a      	ldr	r2, [r7, #16]
 8001936:	fb03 f202 	mul.w	r2, r3, r2
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800193e:	fb01 f303 	mul.w	r3, r1, r3
 8001942:	fbb2 f3f3 	udiv	r3, r2, r3
 8001946:	617b      	str	r3, [r7, #20]

		status = VL6180x_WrWord(dev, SYSRANGE_EARLY_CONVERGENCE_ESTIMATE, (uint16_t)eceThresh);
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	b29b      	uxth	r3, r3
 800194c:	461a      	mov	r2, r3
 800194e:	2122      	movs	r1, #34	; 0x22
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f001 f818 	bl	8002986 <VL6180x_WrWord>
 8001956:	6378      	str	r0, [r7, #52]	; 0x34
 8001958:	e002      	b.n	8001960 <VL6180x_RangeSetEarlyConvergenceEestimateThreshold+0xae>
			break;
 800195a:	bf00      	nop
 800195c:	e000      	b.n	8001960 <VL6180x_RangeSetEarlyConvergenceEestimateThreshold+0xae>
			break;
 800195e:	bf00      	nop
	} while (0);

	LOG_FUNCTION_END(status);
	return status;
 8001960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8001962:	4618      	mov	r0, r3
 8001964:	3738      	adds	r7, #56	; 0x38
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <_GetAveTotalTime>:
/*
 * Return >0 = time
 *       <0 1 if fail to get read data from device to compute time
 */
static int32_t _GetAveTotalTime(VL6180xDev_t dev)
{
 800196a:	b580      	push	{r7, lr}
 800196c:	b08c      	sub	sp, #48	; 0x30
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
	uint32_t cFwOverhead_us = 24;
 8001972:	2318      	movs	r3, #24
 8001974:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t cVcpSetupTime_us = 70;
 8001976:	2346      	movs	r3, #70	; 0x46
 8001978:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t cPLL2_StartupDelay_us = 200;
 800197a:	23c8      	movs	r3, #200	; 0xc8
 800197c:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t cMeasMask = 0x07;
 800197e:	2307      	movs	r3, #7
 8001980:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t u8;
	int status;

	LOG_FUNCTION_START("");

	status = VL6180x_RdByte(dev, 0x109, &u8);
 8001984:	f107 030b 	add.w	r3, r7, #11
 8001988:	461a      	mov	r2, r3
 800198a:	f240 1109 	movw	r1, #265	; 0x109
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f001 f8a3 	bl	8002ada <VL6180x_RdByte>
 8001994:	61f8      	str	r0, [r7, #28]
	if (status) {
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d002      	beq.n	80019a2 <_GetAveTotalTime+0x38>
		VL6180x_ErrLog("rd 0x109 fail");
		return -1;
 800199c:	f04f 33ff 	mov.w	r3, #4294967295
 80019a0:	e029      	b.n	80019f6 <_GetAveTotalTime+0x8c>
	}
	Samples = u8 & cMeasMask;
 80019a2:	7afa      	ldrb	r2, [r7, #11]
 80019a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80019a8:	4013      	ands	r3, r2
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	61bb      	str	r3, [r7, #24]
	status = VL6180x_RdByte(dev, READOUT_AVERAGING_SAMPLE_PERIOD, &u8);
 80019ae:	f107 030b 	add.w	r3, r7, #11
 80019b2:	461a      	mov	r2, r3
 80019b4:	f44f 7185 	mov.w	r1, #266	; 0x10a
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	f001 f88e 	bl	8002ada <VL6180x_RdByte>
 80019be:	61f8      	str	r0, [r7, #28]
	if (status) {
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d002      	beq.n	80019cc <_GetAveTotalTime+0x62>
		VL6180x_ErrLog("i2c READOUT_AVERAGING_SAMPLE_PERIOD fail");
		return -1;
 80019c6:	f04f 33ff 	mov.w	r3, #4294967295
 80019ca:	e014      	b.n	80019f6 <_GetAveTotalTime+0x8c>
	}
	SamplePeriod = u8;
 80019cc:	7afb      	ldrb	r3, [r7, #11]
 80019ce:	617b      	str	r3, [r7, #20]
	SingleTime_us = cFwOverhead_us + cVcpSetupTime_us + (SamplePeriod * 10);
 80019d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019d4:	18d1      	adds	r1, r2, r3
 80019d6:	697a      	ldr	r2, [r7, #20]
 80019d8:	4613      	mov	r3, r2
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	4413      	add	r3, r2
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	440b      	add	r3, r1
 80019e2:	613b      	str	r3, [r7, #16]
	TotalAveTime_us = (Samples + 1) * SingleTime_us + cPLL2_StartupDelay_us;
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	3301      	adds	r3, #1
 80019e8:	693a      	ldr	r2, [r7, #16]
 80019ea:	fb03 f202 	mul.w	r2, r3, r2
 80019ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f0:	4413      	add	r3, r2
 80019f2:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_END(TotalAveTime_us);
	return TotalAveTime_us;
 80019f4:	68fb      	ldr	r3, [r7, #12]
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3730      	adds	r7, #48	; 0x30
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}

080019fe <_filter_Init>:
#define _FilterData(field) VL6180xDevDataGet(dev, FilterData.field)
/*
 * One time init
 */
int _filter_Init(VL6180xDev_t dev)
{
 80019fe:	b480      	push	{r7}
 8001a00:	b085      	sub	sp, #20
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	6078      	str	r0, [r7, #4]
	int i;
	_FilterData(MeasurementIndex) = 0;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	61da      	str	r2, [r3, #28]

	_FilterData(Default_ZeroVal) = 0;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	665a      	str	r2, [r3, #100]	; 0x64
	_FilterData(Default_VAVGVal) = 0;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2200      	movs	r2, #0
 8001a16:	669a      	str	r2, [r3, #104]	; 0x68
	_FilterData(NoDelay_ZeroVal) = 0;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	66da      	str	r2, [r3, #108]	; 0x6c
	_FilterData(NoDelay_VAVGVal) = 0;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2200      	movs	r2, #0
 8001a22:	671a      	str	r2, [r3, #112]	; 0x70
	_FilterData(Previous_VAVGDiff) = 0;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2200      	movs	r2, #0
 8001a28:	675a      	str	r2, [r3, #116]	; 0x74

	_FilterData(StdFilteredReads) = 0;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	_FilterData(FilteringOnGoingConsecutiveStates) = 0;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	679a      	str	r2, [r3, #120]	; 0x78

	for (i = 0; i < FILTER_NBOF_SAMPLES; i++) {
 8001a38:	2300      	movs	r3, #0
 8001a3a:	60fb      	str	r3, [r7, #12]
 8001a3c:	e011      	b.n	8001a62 <_filter_Init+0x64>
		_FilterData(LastTrueRange)[i] = FILTER_INVALID_DISTANCE;
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	3310      	adds	r3, #16
 8001a44:	005b      	lsls	r3, r3, #1
 8001a46:	4413      	add	r3, r2
 8001a48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a4c:	809a      	strh	r2, [r3, #4]
		_FilterData(LastReturnRates)[i] = 0;
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	330c      	adds	r3, #12
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	4413      	add	r3, r2
 8001a58:	2200      	movs	r2, #0
 8001a5a:	609a      	str	r2, [r3, #8]
	for (i = 0; i < FILTER_NBOF_SAMPLES; i++) {
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	3301      	adds	r3, #1
 8001a60:	60fb      	str	r3, [r7, #12]
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	2b09      	cmp	r3, #9
 8001a66:	ddea      	ble.n	8001a3e <_filter_Init+0x40>
	}
	_FilterData(MeasurementsSinceLastFlush)=0;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	621a      	str	r2, [r3, #32]
	return 0;
 8001a6e:	2300      	movs	r3, #0
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3714      	adds	r7, #20
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bc80      	pop	{r7}
 8001a78:	4770      	bx	lr

08001a7a <_filter_StdDevDamper>:
									uint32_t SignalRate,
									const uint32_t StdDevLimitLowLight,
									const uint32_t StdDevLimitLowLightSNR,
									const uint32_t StdDevLimitHighLight,
									const uint32_t StdDevLimitHighLightSNR)
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	b087      	sub	sp, #28
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	60f8      	str	r0, [r7, #12]
 8001a82:	60b9      	str	r1, [r7, #8]
 8001a84:	607a      	str	r2, [r7, #4]
 8001a86:	603b      	str	r3, [r7, #0]
	uint32_t newStdDev;
	uint16_t SNR;

	if (AmbientRate > 0)
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d008      	beq.n	8001aa0 <_filter_StdDevDamper+0x26>
		SNR = (uint16_t) ((100 * SignalRate) / AmbientRate);
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	2264      	movs	r2, #100	; 0x64
 8001a92:	fb03 f202 	mul.w	r2, r3, r2
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a9c:	827b      	strh	r3, [r7, #18]
 8001a9e:	e002      	b.n	8001aa6 <_filter_StdDevDamper+0x2c>
	else
		SNR = 9999;
 8001aa0:	f242 730f 	movw	r3, #9999	; 0x270f
 8001aa4:	827b      	strh	r3, [r7, #18]

	if (SNR >= StdDevLimitLowLightSNR) {
 8001aa6:	8a7b      	ldrh	r3, [r7, #18]
 8001aa8:	683a      	ldr	r2, [r7, #0]
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d802      	bhi.n	8001ab4 <_filter_StdDevDamper+0x3a>
		newStdDev = StdDevLimitLowLight;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	617b      	str	r3, [r7, #20]
 8001ab2:	e016      	b.n	8001ae2 <_filter_StdDevDamper+0x68>
	} else {
		if (SNR <= StdDevLimitHighLightSNR)
 8001ab4:	8a7b      	ldrh	r3, [r7, #18]
 8001ab6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d302      	bcc.n	8001ac2 <_filter_StdDevDamper+0x48>
			newStdDev = StdDevLimitHighLight;
 8001abc:	6a3b      	ldr	r3, [r7, #32]
 8001abe:	617b      	str	r3, [r7, #20]
 8001ac0:	e00f      	b.n	8001ae2 <_filter_StdDevDamper+0x68>
		else {
			newStdDev = (uint32_t)(StdDevLimitHighLight -
									(SNR - StdDevLimitHighLightSNR) *
 8001ac2:	8a7a      	ldrh	r2, [r7, #18]
 8001ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac6:	1ad3      	subs	r3, r2, r3
									(StdDevLimitHighLight - StdDevLimitLowLight) /
 8001ac8:	6a39      	ldr	r1, [r7, #32]
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	1a8a      	subs	r2, r1, r2
									(SNR - StdDevLimitHighLightSNR) *
 8001ace:	fb03 f202 	mul.w	r2, r3, r2
									(StdDevLimitLowLightSNR - StdDevLimitHighLightSNR));
 8001ad2:	6839      	ldr	r1, [r7, #0]
 8001ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad6:	1acb      	subs	r3, r1, r3
									(StdDevLimitHighLight - StdDevLimitLowLight) /
 8001ad8:	fbb2 f3f3 	udiv	r3, r2, r3
			newStdDev = (uint32_t)(StdDevLimitHighLight -
 8001adc:	6a3a      	ldr	r2, [r7, #32]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	617b      	str	r3, [r7, #20]
		}
	}

	return newStdDev;
 8001ae2:	697b      	ldr	r3, [r7, #20]
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	371c      	adds	r7, #28
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bc80      	pop	{r7}
 8001aec:	4770      	bx	lr
	...

08001af0 <_filter_Start>:
								uint16_t m_trueRange_mm,
								uint16_t m_rawRange_mm,
								uint32_t m_rtnSignalRate,
								uint32_t m_rtnAmbientRate,
								uint16_t errorCode)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b0aa      	sub	sp, #168	; 0xa8
 8001af4:	af02      	add	r7, sp, #8
 8001af6:	60f8      	str	r0, [r7, #12]
 8001af8:	607b      	str	r3, [r7, #4]
 8001afa:	460b      	mov	r3, r1
 8001afc:	817b      	strh	r3, [r7, #10]
 8001afe:	4613      	mov	r3, r2
 8001b00:	813b      	strh	r3, [r7, #8]
	int status;
	uint16_t m_newTrueRange_mm = 0;
 8001b02:	2300      	movs	r3, #0
 8001b04:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
	#if VL6180x_HAVE_MULTI_READ
	uint8_t MultiReadBuf[8];
	#endif
	uint16_t i;
	uint16_t bypassFilter = 0;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
	uint16_t resetVAVGData = 1;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

	uint16_t filterErrorCode = NoError;
 8001b14:	2300      	movs	r3, #0
 8001b16:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
	uint16_t filterErrorCodeOnRangingErrorCode = NoError;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
	uint16_t registerValue;

	uint32_t register32BitsValue1;
	uint32_t register32BitsValue2;

	uint16_t ValidDistance = 0;
 8001b20:	2300      	movs	r3, #0
 8001b22:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
	uint16_t SuspicuousRangingZone = 0;
 8001b26:	2300      	movs	r3, #0
 8001b28:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90

	uint16_t WrapAroundFlag = 0;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
	uint16_t NoWrapAroundFlag = 0;
 8001b32:	2300      	movs	r3, #0
 8001b34:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
	uint16_t NoWrapAroundHighConfidenceFlag = 0;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	uint16_t FlushFilter = 0;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
	uint32_t RateChange = 0;
 8001b44:	2300      	movs	r3, #0
 8001b46:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

	uint16_t StdDevSamplesMinNeeded = 0;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
	uint16_t StdDevSamples = 0;
 8001b50:	2300      	movs	r3, #0
 8001b52:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
	uint32_t StdDevDistanceSum = 0;
 8001b56:	2300      	movs	r3, #0
 8001b58:	67fb      	str	r3, [r7, #124]	; 0x7c
	uint32_t StdDevDistanceMean = 0;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	67bb      	str	r3, [r7, #120]	; 0x78
	uint32_t StdDevDistance = 0;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	677b      	str	r3, [r7, #116]	; 0x74
	uint32_t StdDevRateSum = 0;
 8001b62:	2300      	movs	r3, #0
 8001b64:	673b      	str	r3, [r7, #112]	; 0x70
	uint32_t StdDevRateMean = 0;
 8001b66:	2300      	movs	r3, #0
 8001b68:	66fb      	str	r3, [r7, #108]	; 0x6c
	uint32_t StdDevRate = 0;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	66bb      	str	r3, [r7, #104]	; 0x68
	uint32_t StdDevLimitWithTargetMove = 0;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	667b      	str	r3, [r7, #100]	; 0x64
	uint32_t WrapAroundLowReturnRateLimit;
	uint32_t WrapAroundLowReturnRateLimit2;
	uint32_t WrapAroundLowReturnRateFilterLimit;
	uint32_t WrapAroundHighReturnRateFilterLimit;

	uint32_t MAX_VAVGDiff = 1800;
 8001b72:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 8001b76:	657b      	str	r3, [r7, #84]	; 0x54

	uint8_t u8;//, u8_2;
	uint32_t XTalkCompRate_KCps;
	uint32_t StdDevLimit = 300;
 8001b78:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001b7c:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t MaxOrInvalidDistance =   255*_GetUpscale(dev);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	7e1b      	ldrb	r3, [r3, #24]
 8001b82:	461a      	mov	r2, r3
 8001b84:	4613      	mov	r3, r2
 8001b86:	021b      	lsls	r3, r3, #8
 8001b88:	1a9b      	subs	r3, r3, r2
 8001b8a:	64fb      	str	r3, [r7, #76]	; 0x4c
	/* #define MaxOrInvalidDistance  (uint16_t) (255 * 3) */

	/* Check if distance is Valid or not */
	switch (errorCode) {
 8001b8c:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8001b90:	3b0c      	subs	r3, #12
 8001b92:	2b03      	cmp	r3, #3
 8001b94:	d825      	bhi.n	8001be2 <_filter_Start+0xf2>
 8001b96:	a201      	add	r2, pc, #4	; (adr r2, 8001b9c <_filter_Start+0xac>)
 8001b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b9c:	08001bad 	.word	0x08001bad
 8001ba0:	08001bbb 	.word	0x08001bbb
 8001ba4:	08001bad 	.word	0x08001bad
 8001ba8:	08001bbb 	.word	0x08001bbb
	case Raw_Ranging_Algo_Underflow:
	case Ranging_Algo_Underflow:
		filterErrorCodeOnRangingErrorCode = RangingFiltered; /* If we have to go through filter, mean we have here a wraparound case */
 8001bac:	2310      	movs	r3, #16
 8001bae:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
		ValidDistance = 0;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
		break;
 8001bb8:	e022      	b.n	8001c00 <_filter_Start+0x110>
	case Raw_Ranging_Algo_Overflow:
	case Ranging_Algo_Overflow:
		filterErrorCodeOnRangingErrorCode = RangingFiltered; /* If we have to go through filter, mean we have here a wraparound case */
 8001bba:	2310      	movs	r3, #16
 8001bbc:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
		//m_trueRange_mm = MaxOrInvalidDistance;
		m_trueRange_mm = 200*_GetUpscale(dev);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	7e1b      	ldrb	r3, [r3, #24]
 8001bc4:	b29b      	uxth	r3, r3
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	0092      	lsls	r2, r2, #2
 8001bca:	4413      	add	r3, r2
 8001bcc:	461a      	mov	r2, r3
 8001bce:	0091      	lsls	r1, r2, #2
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	4413      	add	r3, r2
 8001bd6:	00db      	lsls	r3, r3, #3
 8001bd8:	817b      	strh	r3, [r7, #10]
		ValidDistance = 1;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
		break;
 8001be0:	e00e      	b.n	8001c00 <_filter_Start+0x110>
	default:
		if (m_rawRange_mm >= MaxOrInvalidDistance) {
 8001be2:	893b      	ldrh	r3, [r7, #8]
 8001be4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d806      	bhi.n	8001bf8 <_filter_Start+0x108>
			ValidDistance = 0;
 8001bea:	2300      	movs	r3, #0
 8001bec:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
			bypassFilter = 1; /* Bypass the filter in this case as produced distance is not usable (and also the VAVGVal and ZeroVal values) */
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
		} else {
			ValidDistance = 1;
		}
		break;
 8001bf6:	e002      	b.n	8001bfe <_filter_Start+0x10e>
			ValidDistance = 1;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
		break;
 8001bfe:	bf00      	nop
	}
	m_newTrueRange_mm = m_trueRange_mm;
 8001c00:	897b      	ldrh	r3, [r7, #10]
 8001c02:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e

	XTalkCompRate_KCps = VL6180xDevDataGet(dev, XTalkCompRate_KCps);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	64bb      	str	r3, [r7, #72]	; 0x48

	/* Update signal rate limits depending on crosstalk */
	SignalRateDMax = (uint32_t)_GetDMaxDataRetSignalAt400mm(dev) ;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001c12:	647b      	str	r3, [r7, #68]	; 0x44
	WrapAroundLowReturnRateLimit = WrapAroundLowReturnRateLimit_ROM  + XTalkCompRate_KCps;
 8001c14:	4b90      	ldr	r3, [pc, #576]	; (8001e58 <_filter_Start+0x368>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001c1a:	4413      	add	r3, r2
 8001c1c:	643b      	str	r3, [r7, #64]	; 0x40
	WrapAroundLowReturnRateLimit2 = ((WrapAroundLowReturnRateLimit2_ROM *
 8001c1e:	4b8f      	ldr	r3, [pc, #572]	; (8001e5c <_filter_Start+0x36c>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001c24:	fb02 f303 	mul.w	r3, r2, r3
									SignalRateDMax) / 312) +
 8001c28:	08db      	lsrs	r3, r3, #3
 8001c2a:	4a8d      	ldr	r2, [pc, #564]	; (8001e60 <_filter_Start+0x370>)
 8001c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c30:	089b      	lsrs	r3, r3, #2
	WrapAroundLowReturnRateLimit2 = ((WrapAroundLowReturnRateLimit2_ROM *
 8001c32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001c34:	4413      	add	r3, r2
 8001c36:	63fb      	str	r3, [r7, #60]	; 0x3c
									XTalkCompRate_KCps;
	WrapAroundLowReturnRateFilterLimit = ((WrapAroundLowReturnRateFilterLimit_ROM *
 8001c38:	4b8a      	ldr	r3, [pc, #552]	; (8001e64 <_filter_Start+0x374>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001c3e:	fb02 f303 	mul.w	r3, r2, r3
									SignalRateDMax) / 312) + XTalkCompRate_KCps;
 8001c42:	08db      	lsrs	r3, r3, #3
 8001c44:	4a86      	ldr	r2, [pc, #536]	; (8001e60 <_filter_Start+0x370>)
 8001c46:	fba2 2303 	umull	r2, r3, r2, r3
 8001c4a:	089b      	lsrs	r3, r3, #2
	WrapAroundLowReturnRateFilterLimit = ((WrapAroundLowReturnRateFilterLimit_ROM *
 8001c4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001c4e:	4413      	add	r3, r2
 8001c50:	63bb      	str	r3, [r7, #56]	; 0x38
	WrapAroundHighReturnRateFilterLimit = ((WrapAroundHighReturnRateFilterLimit_ROM *
 8001c52:	4b85      	ldr	r3, [pc, #532]	; (8001e68 <_filter_Start+0x378>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001c58:	fb02 f303 	mul.w	r3, r2, r3
									SignalRateDMax) / 312) + XTalkCompRate_KCps;
 8001c5c:	08db      	lsrs	r3, r3, #3
 8001c5e:	4a80      	ldr	r2, [pc, #512]	; (8001e60 <_filter_Start+0x370>)
 8001c60:	fba2 2303 	umull	r2, r3, r2, r3
 8001c64:	089b      	lsrs	r3, r3, #2
	WrapAroundHighReturnRateFilterLimit = ((WrapAroundHighReturnRateFilterLimit_ROM *
 8001c66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001c68:	4413      	add	r3, r2
 8001c6a:	637b      	str	r3, [r7, #52]	; 0x34


	/* Checks on low range data */
	if ((m_rawRange_mm < WrapAroundLowRawRangeLimit) && (m_rtnSignalRate < WrapAroundLowReturnRateLimit)) {
 8001c6c:	4b7f      	ldr	r3, [pc, #508]	; (8001e6c <_filter_Start+0x37c>)
 8001c6e:	881b      	ldrh	r3, [r3, #0]
 8001c70:	893a      	ldrh	r2, [r7, #8]
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d209      	bcs.n	8001c8a <_filter_Start+0x19a>
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d205      	bcs.n	8001c8a <_filter_Start+0x19a>
		filterErrorCode = RangingFiltered; /* On this condition, wraparound case is ensured */
 8001c7e:	2310      	movs	r3, #16
 8001c80:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
		bypassFilter = 1;
 8001c84:	2301      	movs	r3, #1
 8001c86:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
	}
	if ((m_rawRange_mm < WrapAroundLowRawRangeLimit2) && (m_rtnSignalRate < WrapAroundLowReturnRateLimit2)) {
 8001c8a:	4b79      	ldr	r3, [pc, #484]	; (8001e70 <_filter_Start+0x380>)
 8001c8c:	881b      	ldrh	r3, [r3, #0]
 8001c8e:	893a      	ldrh	r2, [r7, #8]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d209      	bcs.n	8001ca8 <_filter_Start+0x1b8>
 8001c94:	687a      	ldr	r2, [r7, #4]
 8001c96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d205      	bcs.n	8001ca8 <_filter_Start+0x1b8>
		filterErrorCode = RangingFiltered; /* On this condition, wraparound case is ensured */
 8001c9c:	2310      	movs	r3, #16
 8001c9e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
		bypassFilter = 1;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
	}
	if ((m_rawRange_mm < WrapAroundLowRawRangeLimit2) && (m_rtnSignalRate < (WrapAroundLowReturnRateLimit2 + WrapAroundLowRawRangeLimit2SuspicuousAddedSignalRate))) {
 8001ca8:	4b71      	ldr	r3, [pc, #452]	; (8001e70 <_filter_Start+0x380>)
 8001caa:	881b      	ldrh	r3, [r3, #0]
 8001cac:	893a      	ldrh	r2, [r7, #8]
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d209      	bcs.n	8001cc6 <_filter_Start+0x1d6>
 8001cb2:	4b70      	ldr	r3, [pc, #448]	; (8001e74 <_filter_Start+0x384>)
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cb8:	4413      	add	r3, r2
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d202      	bcs.n	8001cc6 <_filter_Start+0x1d6>
		SuspicuousRangingZone = 1; /* On this area, we are in an highly suspicuous wraparound ares, filter parameter will be stengthen */
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
	}


	/* Checks on Ambient rate level */
	if (m_rtnAmbientRate > WrapAroundMaximumAmbientRateFilterLimit) {
 8001cc6:	4b6c      	ldr	r3, [pc, #432]	; (8001e78 <_filter_Start+0x388>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d905      	bls.n	8001cde <_filter_Start+0x1ee>
		/* Too high ambient rate */
		FlushFilter = 1;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
		bypassFilter = 1;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
	}
    
	/*  Checks on Filter flush */
	if (m_rtnSignalRate < MinReturnRateFilterFlush) {
 8001cde:	4b67      	ldr	r3, [pc, #412]	; (8001e7c <_filter_Start+0x38c>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d205      	bcs.n	8001cf4 <_filter_Start+0x204>
		/* Completely lost target, so flush the filter */
		FlushFilter = 1;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
		bypassFilter = 1;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
	}
	if (_FilterData(LastReturnRates)[0] != 0) {
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d020      	beq.n	8001d3e <_filter_Start+0x24e>
		if (m_rtnSignalRate > _FilterData(LastReturnRates)[0])
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d90d      	bls.n	8001d22 <_filter_Start+0x232>
			RateChange = (100 *
						(m_rtnSignalRate - _FilterData(LastReturnRates)[0])) /
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	1ad3      	subs	r3, r2, r3
			RateChange = (100 *
 8001d0e:	2264      	movs	r2, #100	; 0x64
 8001d10:	fb03 f202 	mul.w	r2, r3, r2
						_FilterData(LastReturnRates)[0];
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
			RateChange = (100 *
 8001d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001d20:	e010      	b.n	8001d44 <_filter_Start+0x254>
		else
			RateChange = (100 *
						(_FilterData(LastReturnRates)[0] - m_rtnSignalRate)) /
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	1ad3      	subs	r3, r2, r3
			RateChange = (100 *
 8001d2a:	2264      	movs	r2, #100	; 0x64
 8001d2c:	fb03 f202 	mul.w	r2, r3, r2
						_FilterData(LastReturnRates)[0];
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
			RateChange = (100 *
 8001d34:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001d3c:	e002      	b.n	8001d44 <_filter_Start+0x254>
	} else
		RateChange = 0;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	if (RateChange > MaxReturnRateChangeFilterFlush) {
 8001d44:	4b4e      	ldr	r3, [pc, #312]	; (8001e80 <_filter_Start+0x390>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d902      	bls.n	8001d56 <_filter_Start+0x266>
		FlushFilter = 1;
 8001d50:	2301      	movs	r3, #1
 8001d52:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
	}
	/* TODO optimize filter  using circular buffer */
	if (FlushFilter == 1) {
 8001d56:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d124      	bne.n	8001da8 <_filter_Start+0x2b8>
		_FilterData(MeasurementIndex) = 0;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2200      	movs	r2, #0
 8001d62:	61da      	str	r2, [r3, #28]
		for (i = 0; i < FILTER_NBOF_SAMPLES; i++) {
 8001d64:	2300      	movs	r3, #0
 8001d66:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8001d6a:	e015      	b.n	8001d98 <_filter_Start+0x2a8>
			_FilterData(LastTrueRange)[i] = FILTER_INVALID_DISTANCE;
 8001d6c:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8001d70:	68fa      	ldr	r2, [r7, #12]
 8001d72:	3310      	adds	r3, #16
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	4413      	add	r3, r2
 8001d78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d7c:	809a      	strh	r2, [r3, #4]
			_FilterData(LastReturnRates)[i] = 0;
 8001d7e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8001d82:	68fa      	ldr	r2, [r7, #12]
 8001d84:	330c      	adds	r3, #12
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	4413      	add	r3, r2
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	609a      	str	r2, [r3, #8]
		for (i = 0; i < FILTER_NBOF_SAMPLES; i++) {
 8001d8e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8001d92:	3301      	adds	r3, #1
 8001d94:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8001d98:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8001d9c:	2b09      	cmp	r3, #9
 8001d9e:	d9e5      	bls.n	8001d6c <_filter_Start+0x27c>
		}
		_FilterData(MeasurementsSinceLastFlush)=0;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2200      	movs	r2, #0
 8001da4:	621a      	str	r2, [r3, #32]
 8001da6:	e02d      	b.n	8001e04 <_filter_Start+0x314>
	} else {
		for (i = (uint16_t) (FILTER_NBOF_SAMPLES - 1); i > 0; i--) {
 8001da8:	2309      	movs	r3, #9
 8001daa:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8001dae:	e025      	b.n	8001dfc <_filter_Start+0x30c>
			_FilterData(LastTrueRange)[i] = _FilterData(LastTrueRange)[i - 1];
 8001db0:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8001db4:	3b01      	subs	r3, #1
 8001db6:	f8b7 109c 	ldrh.w	r1, [r7, #156]	; 0x9c
 8001dba:	68fa      	ldr	r2, [r7, #12]
 8001dbc:	3310      	adds	r3, #16
 8001dbe:	005b      	lsls	r3, r3, #1
 8001dc0:	4413      	add	r3, r2
 8001dc2:	8898      	ldrh	r0, [r3, #4]
 8001dc4:	68fa      	ldr	r2, [r7, #12]
 8001dc6:	f101 0310 	add.w	r3, r1, #16
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	4413      	add	r3, r2
 8001dce:	4602      	mov	r2, r0
 8001dd0:	809a      	strh	r2, [r3, #4]
			_FilterData(LastReturnRates)[i] = _FilterData(LastReturnRates)[i - 1];
 8001dd2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	f8b7 009c 	ldrh.w	r0, [r7, #156]	; 0x9c
 8001ddc:	68fa      	ldr	r2, [r7, #12]
 8001dde:	330c      	adds	r3, #12
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	4413      	add	r3, r2
 8001de4:	689a      	ldr	r2, [r3, #8]
 8001de6:	68f9      	ldr	r1, [r7, #12]
 8001de8:	f100 030c 	add.w	r3, r0, #12
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	440b      	add	r3, r1
 8001df0:	609a      	str	r2, [r3, #8]
		for (i = (uint16_t) (FILTER_NBOF_SAMPLES - 1); i > 0; i--) {
 8001df2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8001df6:	3b01      	subs	r3, #1
 8001df8:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8001dfc:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d1d5      	bne.n	8001db0 <_filter_Start+0x2c0>
		}
	}

	if (ValidDistance == 1)
 8001e04:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d103      	bne.n	8001e14 <_filter_Start+0x324>
		_FilterData(LastTrueRange)[0] = m_trueRange_mm;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	897a      	ldrh	r2, [r7, #10]
 8001e10:	849a      	strh	r2, [r3, #36]	; 0x24
 8001e12:	e003      	b.n	8001e1c <_filter_Start+0x32c>
	else
		_FilterData(LastTrueRange)[0] = FILTER_INVALID_DISTANCE;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e1a:	849a      	strh	r2, [r3, #36]	; 0x24
	_FilterData(LastReturnRates)[0] = m_rtnSignalRate;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	639a      	str	r2, [r3, #56]	; 0x38
	_FilterData(MeasurementsSinceLastFlush)++;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	6a1b      	ldr	r3, [r3, #32]
 8001e26:	1c5a      	adds	r2, r3, #1
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	621a      	str	r2, [r3, #32]

	/* Check if we need to go through the filter or not */
	if (!(((m_rawRange_mm < WrapAroundHighRawRangeFilterLimit) &&
 8001e2c:	4b15      	ldr	r3, [pc, #84]	; (8001e84 <_filter_Start+0x394>)
 8001e2e:	881b      	ldrh	r3, [r3, #0]
 8001e30:	893a      	ldrh	r2, [r7, #8]
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d203      	bcs.n	8001e3e <_filter_Start+0x34e>
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d324      	bcc.n	8001e88 <_filter_Start+0x398>
		(m_rtnSignalRate < WrapAroundLowReturnRateFilterLimit)) ||
		((m_rawRange_mm >= WrapAroundHighRawRangeFilterLimit) &&
 8001e3e:	4b11      	ldr	r3, [pc, #68]	; (8001e84 <_filter_Start+0x394>)
 8001e40:	881b      	ldrh	r3, [r3, #0]
	if (!(((m_rawRange_mm < WrapAroundHighRawRangeFilterLimit) &&
 8001e42:	893a      	ldrh	r2, [r7, #8]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d303      	bcc.n	8001e50 <_filter_Start+0x360>
		((m_rawRange_mm >= WrapAroundHighRawRangeFilterLimit) &&
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d31b      	bcc.n	8001e88 <_filter_Start+0x398>
		(m_rtnSignalRate < WrapAroundHighReturnRateFilterLimit))))
		bypassFilter = 1;
 8001e50:	2301      	movs	r3, #1
 8001e52:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8001e56:	e02d      	b.n	8001eb4 <_filter_Start+0x3c4>
 8001e58:	08004fe8 	.word	0x08004fe8
 8001e5c:	08004fec 	.word	0x08004fec
 8001e60:	1a41a41b 	.word	0x1a41a41b
 8001e64:	08004ff0 	.word	0x08004ff0
 8001e68:	08004ff4 	.word	0x08004ff4
 8001e6c:	08004ff8 	.word	0x08004ff8
 8001e70:	08004ffa 	.word	0x08004ffa
 8001e74:	08004ffc 	.word	0x08004ffc
 8001e78:	08005000 	.word	0x08005000
 8001e7c:	08005004 	.word	0x08005004
 8001e80:	08005008 	.word	0x08005008
 8001e84:	0800500c 	.word	0x0800500c
	else {
		/* if some wraparound filtering due to some ranging error code has been detected, update the filter status and bypass the filter */
		if(filterErrorCodeOnRangingErrorCode!=NoError){
 8001e88:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d011      	beq.n	8001eb4 <_filter_Start+0x3c4>
#ifndef PRESERVE_DEVICE_ERROR_CODE
			filterErrorCode = filterErrorCodeOnRangingErrorCode;
#else
			if((errorCode==Raw_Ranging_Algo_Underflow) || (errorCode==Ranging_Algo_Underflow)) {
 8001e90:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8001e94:	2b0c      	cmp	r3, #12
 8001e96:	d003      	beq.n	8001ea0 <_filter_Start+0x3b0>
 8001e98:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8001e9c:	2b0e      	cmp	r3, #14
 8001e9e:	d103      	bne.n	8001ea8 <_filter_Start+0x3b8>
				/* Preserves the error codes except for Raw_Ranging_Algo_Underflow and Ranging_Algo_Underflow */
				filterErrorCode = filterErrorCodeOnRangingErrorCode;
 8001ea0:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8001ea4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
			}
#endif
			bypassFilter = 1;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
			resetVAVGData = 0;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
		}
	}

	/* Check which kind of measurement has been made */
	status = VL6180x_RdByte(dev, 0x01AC, &u8);
 8001eb4:	f107 0317 	add.w	r3, r7, #23
 8001eb8:	461a      	mov	r2, r3
 8001eba:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8001ebe:	68f8      	ldr	r0, [r7, #12]
 8001ec0:	f000 fe0b 	bl	8002ada <VL6180x_RdByte>
 8001ec4:	6338      	str	r0, [r7, #48]	; 0x30
	if (status) {
 8001ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	f040 82ba 	bne.w	8002442 <_filter_Start+0x952>
		VL6180x_ErrLog("0x01AC rd fail");
		goto done_err;
	}
	registerValue = u8;
 8001ece:	7dfb      	ldrb	r3, [r7, #23]
 8001ed0:	85fb      	strh	r3, [r7, #46]	; 0x2e

	/* Read data for filtering */
#if VL6180x_HAVE_MULTI_READ
	status = VL6180x_RdMulti(dev, 0x10C, MultiReadBuf, 8); /* read only 8 lsb bits */
 8001ed2:	f107 0218 	add.w	r2, r7, #24
 8001ed6:	2308      	movs	r3, #8
 8001ed8:	f44f 7186 	mov.w	r1, #268	; 0x10c
 8001edc:	68f8      	ldr	r0, [r7, #12]
 8001ede:	f000 fea4 	bl	8002c2a <VL6180x_RdMulti>
 8001ee2:	6338      	str	r0, [r7, #48]	; 0x30
	if (status) {
 8001ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	f040 82ad 	bne.w	8002446 <_filter_Start+0x956>
		VL6180x_ErrLog("0x10C multi rd fail");
		goto done_err;
	}
	register32BitsValue1 = ((uint32_t) MultiReadBuf[0] << 24)
 8001eec:	7e3b      	ldrb	r3, [r7, #24]
 8001eee:	061a      	lsls	r2, r3, #24
			+ ((uint32_t) MultiReadBuf[1] << 16)
 8001ef0:	7e7b      	ldrb	r3, [r7, #25]
 8001ef2:	041b      	lsls	r3, r3, #16
 8001ef4:	441a      	add	r2, r3
			+ ((uint32_t) MultiReadBuf[2] << 8)
 8001ef6:	7ebb      	ldrb	r3, [r7, #26]
 8001ef8:	021b      	lsls	r3, r3, #8
 8001efa:	4413      	add	r3, r2
			+ ((uint32_t) MultiReadBuf[3] << 0);
 8001efc:	7efa      	ldrb	r2, [r7, #27]
	register32BitsValue1 = ((uint32_t) MultiReadBuf[0] << 24)
 8001efe:	4413      	add	r3, r2
 8001f00:	62bb      	str	r3, [r7, #40]	; 0x28
	register32BitsValue2 = ((uint32_t) MultiReadBuf[4] << 24)
 8001f02:	7f3b      	ldrb	r3, [r7, #28]
 8001f04:	061a      	lsls	r2, r3, #24
			+ ((uint32_t) MultiReadBuf[5] << 16)
 8001f06:	7f7b      	ldrb	r3, [r7, #29]
 8001f08:	041b      	lsls	r3, r3, #16
 8001f0a:	441a      	add	r2, r3
			+ ((uint32_t) MultiReadBuf[6] << 8)
 8001f0c:	7fbb      	ldrb	r3, [r7, #30]
 8001f0e:	021b      	lsls	r3, r3, #8
 8001f10:	4413      	add	r3, r2
			+ ((uint32_t) MultiReadBuf[7] << 0);
 8001f12:	7ffa      	ldrb	r2, [r7, #31]
	register32BitsValue2 = ((uint32_t) MultiReadBuf[4] << 24)
 8001f14:	4413      	add	r3, r2
 8001f16:	627b      	str	r3, [r7, #36]	; 0x24
		goto done_err;
	}
#endif


	if ((FlushFilter == 1) || ((bypassFilter == 1) && (resetVAVGData == 1))) {
 8001f18:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d007      	beq.n	8001f30 <_filter_Start+0x440>
 8001f20:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d121      	bne.n	8001f6c <_filter_Start+0x47c>
 8001f28:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d11d      	bne.n	8001f6c <_filter_Start+0x47c>
		if (registerValue != 0x3E) {
 8001f30:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001f32:	2b3e      	cmp	r3, #62	; 0x3e
 8001f34:	d00a      	beq.n	8001f4c <_filter_Start+0x45c>
			status = VL6180x_WrByte(dev, 0x1AC, 0x3E);
 8001f36:	223e      	movs	r2, #62	; 0x3e
 8001f38:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8001f3c:	68f8      	ldr	r0, [r7, #12]
 8001f3e:	f000 fcfd 	bl	800293c <VL6180x_WrByte>
 8001f42:	6338      	str	r0, [r7, #48]	; 0x30
			if (status) {
 8001f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	f040 827f 	bne.w	800244a <_filter_Start+0x95a>
			//	VL6180x_ErrLog("0x0F2 bypass wr fail");
			//	goto done_err;
			//}
		}
		/* Set both Default and NoDelay To same value */
		_FilterData(Default_ZeroVal) = register32BitsValue1;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f50:	665a      	str	r2, [r3, #100]	; 0x64
		_FilterData(Default_VAVGVal) = register32BitsValue2;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f56:	669a      	str	r2, [r3, #104]	; 0x68
		_FilterData(NoDelay_ZeroVal) = register32BitsValue1;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f5c:	66da      	str	r2, [r3, #108]	; 0x6c
		_FilterData(NoDelay_VAVGVal) = register32BitsValue2;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f62:	671a      	str	r2, [r3, #112]	; 0x70

		_FilterData(MeasurementIndex) = 0;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2200      	movs	r2, #0
 8001f68:	61da      	str	r2, [r3, #28]
 8001f6a:	e030      	b.n	8001fce <_filter_Start+0x4de>
	} else {
		if (registerValue == 0x3E) {
 8001f6c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001f6e:	2b3e      	cmp	r3, #62	; 0x3e
 8001f70:	d106      	bne.n	8001f80 <_filter_Start+0x490>
			_FilterData(Default_ZeroVal) = register32BitsValue1;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f76:	665a      	str	r2, [r3, #100]	; 0x64
			_FilterData(Default_VAVGVal) = register32BitsValue2;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f7c:	669a      	str	r2, [r3, #104]	; 0x68
 8001f7e:	e005      	b.n	8001f8c <_filter_Start+0x49c>
		} else {
			_FilterData(NoDelay_ZeroVal) = register32BitsValue1;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f84:	66da      	str	r2, [r3, #108]	; 0x6c
			_FilterData(NoDelay_VAVGVal) = register32BitsValue2;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f8a:	671a      	str	r2, [r3, #112]	; 0x70
		}

		if (_FilterData(MeasurementIndex) % WrapAroundNoDelayCheckPeriod == 0) {
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	69db      	ldr	r3, [r3, #28]
 8001f90:	4a7f      	ldr	r2, [pc, #508]	; (8002190 <_filter_Start+0x6a0>)
 8001f92:	8812      	ldrh	r2, [r2, #0]
 8001f94:	fbb3 f1f2 	udiv	r1, r3, r2
 8001f98:	fb01 f202 	mul.w	r2, r1, r2
 8001f9c:	1a9b      	subs	r3, r3, r2
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d102      	bne.n	8001fa8 <_filter_Start+0x4b8>
			u8 = 0x3C;
 8001fa2:	233c      	movs	r3, #60	; 0x3c
 8001fa4:	75fb      	strb	r3, [r7, #23]
 8001fa6:	e001      	b.n	8001fac <_filter_Start+0x4bc>
			//u8_2 = 0x05;
		} else {
			u8 = 0x3E;
 8001fa8:	233e      	movs	r3, #62	; 0x3e
 8001faa:	75fb      	strb	r3, [r7, #23]
			//u8_2 = 0x01;
		}
		status = VL6180x_WrByte(dev, 0x01AC, u8);
 8001fac:	7dfb      	ldrb	r3, [r7, #23]
 8001fae:	461a      	mov	r2, r3
 8001fb0:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8001fb4:	68f8      	ldr	r0, [r7, #12]
 8001fb6:	f000 fcc1 	bl	800293c <VL6180x_WrByte>
 8001fba:	6338      	str	r0, [r7, #48]	; 0x30
		if (status) {
 8001fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	f040 8245 	bne.w	800244e <_filter_Start+0x95e>
		//status = VL6180x_WrByte(dev, 0x0F2, u8_2);
		//if (status) {
		//	VL6180x_ErrLog("0x0F2  wr fail");
		//	goto done_err;
		//}
		_FilterData(MeasurementIndex)++;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	69db      	ldr	r3, [r3, #28]
 8001fc8:	1c5a      	adds	r2, r3, #1
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	61da      	str	r2, [r3, #28]
	}

	if (bypassFilter == 1) {
 8001fce:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d10d      	bne.n	8001ff2 <_filter_Start+0x502>
		/* Do not go through the filter */

		/* Update filter error code */
		_FilterData(filterError) = filterErrorCode;
 8001fd6:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	67da      	str	r2, [r3, #124]	; 0x7c

		/* Update reported range */
		if(filterErrorCode==RangingFiltered)
 8001fde:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8001fe2:	2b10      	cmp	r3, #16
 8001fe4:	d102      	bne.n	8001fec <_filter_Start+0x4fc>
			m_newTrueRange_mm = MaxOrInvalidDistance; /* Set to invalid distance */
 8001fe6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fe8:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e

		return m_newTrueRange_mm;
 8001fec:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8001ff0:	e230      	b.n	8002454 <_filter_Start+0x964>
	}

	/* Computes current VAVGDiff */
	if (_FilterData(Default_VAVGVal) > _FilterData(NoDelay_VAVGVal))
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d906      	bls.n	800200c <_filter_Start+0x51c>
		VAVGDiff = _FilterData(Default_VAVGVal) - _FilterData(NoDelay_VAVGVal);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	663b      	str	r3, [r7, #96]	; 0x60
 800200a:	e001      	b.n	8002010 <_filter_Start+0x520>
	else
		VAVGDiff = 0;
 800200c:	2300      	movs	r3, #0
 800200e:	663b      	str	r3, [r7, #96]	; 0x60
	_FilterData(Previous_VAVGDiff) = VAVGDiff;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002014:	675a      	str	r2, [r3, #116]	; 0x74

	if(SuspicuousRangingZone==0)
 8002016:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 800201a:	2b00      	cmp	r3, #0
 800201c:	d103      	bne.n	8002026 <_filter_Start+0x536>
		MAX_VAVGDiff = MAX_VAVGDiff_ROM;
 800201e:	4b5d      	ldr	r3, [pc, #372]	; (8002194 <_filter_Start+0x6a4>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	657b      	str	r3, [r7, #84]	; 0x54
 8002024:	e006      	b.n	8002034 <_filter_Start+0x544>
	else
		/* In suspicuous area, strengthen the filter */
		MAX_VAVGDiff = MAX_VAVGDiff_ROM / SuspicuousMAX_VAVGDiffRatio;
 8002026:	4b5b      	ldr	r3, [pc, #364]	; (8002194 <_filter_Start+0x6a4>)
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	4b5b      	ldr	r3, [pc, #364]	; (8002198 <_filter_Start+0x6a8>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002032:	657b      	str	r3, [r7, #84]	; 0x54

	/* Check the VAVGDiff */
	if (_FilterData(Default_ZeroVal) > _FilterData(NoDelay_ZeroVal))
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800203c:	429a      	cmp	r2, r3
 800203e:	d906      	bls.n	800204e <_filter_Start+0x55e>
		IdealVAVGDiff = _FilterData(Default_ZeroVal) - _FilterData(NoDelay_ZeroVal);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800204c:	e005      	b.n	800205a <_filter_Start+0x56a>
	else
		IdealVAVGDiff = _FilterData(NoDelay_ZeroVal) - _FilterData(Default_ZeroVal);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (IdealVAVGDiff > MAX_VAVGDiff)
 800205a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800205c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800205e:	429a      	cmp	r2, r3
 8002060:	d904      	bls.n	800206c <_filter_Start+0x57c>
		MinVAVGDiff = IdealVAVGDiff - MAX_VAVGDiff;
 8002062:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002064:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	65bb      	str	r3, [r7, #88]	; 0x58
 800206a:	e001      	b.n	8002070 <_filter_Start+0x580>
	else
		MinVAVGDiff = 0;
 800206c:	2300      	movs	r3, #0
 800206e:	65bb      	str	r3, [r7, #88]	; 0x58
	MaxVAVGDiff = IdealVAVGDiff + MAX_VAVGDiff;
 8002070:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002072:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002074:	4413      	add	r3, r2
 8002076:	623b      	str	r3, [r7, #32]
	if (VAVGDiff < MinVAVGDiff || VAVGDiff > MaxVAVGDiff) {
 8002078:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800207a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800207c:	429a      	cmp	r2, r3
 800207e:	d303      	bcc.n	8002088 <_filter_Start+0x598>
 8002080:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002082:	6a3b      	ldr	r3, [r7, #32]
 8002084:	429a      	cmp	r2, r3
 8002086:	d906      	bls.n	8002096 <_filter_Start+0x5a6>
		WrapAroundFlag = 1;
 8002088:	2301      	movs	r3, #1
 800208a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
		filterErrorCode = RangingFiltered;
 800208e:	2310      	movs	r3, #16
 8002090:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 8002094:	e149      	b.n	800232a <_filter_Start+0x83a>
	} else {
		/* Go through filtering check */

		if(_FilterData(MeasurementIndex)<=1)
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	69db      	ldr	r3, [r3, #28]
 800209a:	2b01      	cmp	r3, #1
 800209c:	d803      	bhi.n	80020a6 <_filter_Start+0x5b6>
			/* On measurement after a bypass, uses an increase number of samples */
			StdDevSamplesMinNeeded = MIN_FILTER_STDDEV_SAMPLES_AFTER_FLUSH_OR_BYPASS;
 800209e:	2305      	movs	r3, #5
 80020a0:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
 80020a4:	e002      	b.n	80020ac <_filter_Start+0x5bc>
		else
			StdDevSamplesMinNeeded = MIN_FILTER_STDDEV_SAMPLES;
 80020a6:	2303      	movs	r3, #3
 80020a8:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82

		/* StdDevLimit Damper on SNR */
		StdDevLimit = _filter_StdDevDamper(m_rtnAmbientRate, m_rtnSignalRate, StdDevLimitLowLight, StdDevLimitLowLightSNR, StdDevLimitHighLight, StdDevLimitHighLightSNR);
 80020ac:	4b3b      	ldr	r3, [pc, #236]	; (800219c <_filter_Start+0x6ac>)
 80020ae:	6819      	ldr	r1, [r3, #0]
 80020b0:	4b3b      	ldr	r3, [pc, #236]	; (80021a0 <_filter_Start+0x6b0>)
 80020b2:	6818      	ldr	r0, [r3, #0]
 80020b4:	4b3b      	ldr	r3, [pc, #236]	; (80021a4 <_filter_Start+0x6b4>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a3b      	ldr	r2, [pc, #236]	; (80021a8 <_filter_Start+0x6b8>)
 80020ba:	6812      	ldr	r2, [r2, #0]
 80020bc:	9201      	str	r2, [sp, #4]
 80020be:	9300      	str	r3, [sp, #0]
 80020c0:	4603      	mov	r3, r0
 80020c2:	460a      	mov	r2, r1
 80020c4:	6879      	ldr	r1, [r7, #4]
 80020c6:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 80020ca:	f7ff fcd6 	bl	8001a7a <_filter_StdDevDamper>
 80020ce:	6538      	str	r0, [r7, #80]	; 0x50

		/* Standard deviations computations */
		StdDevSamples = 0;
 80020d0:	2300      	movs	r3, #0
 80020d2:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
		StdDevDistanceSum = 0;
 80020d6:	2300      	movs	r3, #0
 80020d8:	67fb      	str	r3, [r7, #124]	; 0x7c
		StdDevDistanceMean = 0;
 80020da:	2300      	movs	r3, #0
 80020dc:	67bb      	str	r3, [r7, #120]	; 0x78
		StdDevDistance = 0;
 80020de:	2300      	movs	r3, #0
 80020e0:	677b      	str	r3, [r7, #116]	; 0x74
		StdDevRateSum = 0;
 80020e2:	2300      	movs	r3, #0
 80020e4:	673b      	str	r3, [r7, #112]	; 0x70
		StdDevRateMean = 0;
 80020e6:	2300      	movs	r3, #0
 80020e8:	66fb      	str	r3, [r7, #108]	; 0x6c
		StdDevRate = 0;
 80020ea:	2300      	movs	r3, #0
 80020ec:	66bb      	str	r3, [r7, #104]	; 0x68
		for (i = 0; (i < FILTER_NBOF_SAMPLES) && (StdDevSamples < FILTER_STDDEV_SAMPLES); i++) {
 80020ee:	2300      	movs	r3, #0
 80020f0:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 80020f4:	e029      	b.n	800214a <_filter_Start+0x65a>
			if (_FilterData(LastTrueRange)[i] != FILTER_INVALID_DISTANCE) {
 80020f6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80020fa:	68fa      	ldr	r2, [r7, #12]
 80020fc:	3310      	adds	r3, #16
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	4413      	add	r3, r2
 8002102:	889b      	ldrh	r3, [r3, #4]
 8002104:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002108:	4293      	cmp	r3, r2
 800210a:	d019      	beq.n	8002140 <_filter_Start+0x650>
				StdDevSamples = (uint16_t) (StdDevSamples + 1);
 800210c:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8002110:	3301      	adds	r3, #1
 8002112:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
				StdDevDistanceSum = (uint32_t) (StdDevDistanceSum + _FilterData(LastTrueRange)[i]);
 8002116:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800211a:	68fa      	ldr	r2, [r7, #12]
 800211c:	3310      	adds	r3, #16
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	4413      	add	r3, r2
 8002122:	889b      	ldrh	r3, [r3, #4]
 8002124:	461a      	mov	r2, r3
 8002126:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002128:	4413      	add	r3, r2
 800212a:	67fb      	str	r3, [r7, #124]	; 0x7c
				StdDevRateSum = (uint32_t) (StdDevRateSum + _FilterData(LastReturnRates)[i]);
 800212c:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002130:	68fa      	ldr	r2, [r7, #12]
 8002132:	330c      	adds	r3, #12
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	4413      	add	r3, r2
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800213c:	4413      	add	r3, r2
 800213e:	673b      	str	r3, [r7, #112]	; 0x70
		for (i = 0; (i < FILTER_NBOF_SAMPLES) && (StdDevSamples < FILTER_STDDEV_SAMPLES); i++) {
 8002140:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002144:	3301      	adds	r3, #1
 8002146:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 800214a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800214e:	2b09      	cmp	r3, #9
 8002150:	d803      	bhi.n	800215a <_filter_Start+0x66a>
 8002152:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8002156:	2b05      	cmp	r3, #5
 8002158:	d9cd      	bls.n	80020f6 <_filter_Start+0x606>
			}
		}
		if (StdDevSamples > 0) {
 800215a:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 800215e:	2b00      	cmp	r3, #0
 8002160:	d00b      	beq.n	800217a <_filter_Start+0x68a>
			StdDevDistanceMean = (uint32_t) (StdDevDistanceSum / StdDevSamples);
 8002162:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8002166:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002168:	fbb2 f3f3 	udiv	r3, r2, r3
 800216c:	67bb      	str	r3, [r7, #120]	; 0x78
			StdDevRateMean = (uint32_t) (StdDevRateSum / StdDevSamples);
 800216e:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8002172:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002174:	fbb2 f3f3 	udiv	r3, r2, r3
 8002178:	66fb      	str	r3, [r7, #108]	; 0x6c
		}
		/* TODO optimize shorten Std dev in aisngle loop computation using sum of x2 - (sum of x)2 */
		StdDevSamples = 0;
 800217a:	2300      	movs	r3, #0
 800217c:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
		StdDevDistanceSum = 0;
 8002180:	2300      	movs	r3, #0
 8002182:	67fb      	str	r3, [r7, #124]	; 0x7c
		StdDevRateSum = 0;
 8002184:	2300      	movs	r3, #0
 8002186:	673b      	str	r3, [r7, #112]	; 0x70
		for (i = 0; (i < FILTER_NBOF_SAMPLES) && (StdDevSamples < FILTER_STDDEV_SAMPLES); i++) {
 8002188:	2300      	movs	r3, #0
 800218a:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 800218e:	e056      	b.n	800223e <_filter_Start+0x74e>
 8002190:	0800500e 	.word	0x0800500e
 8002194:	08005010 	.word	0x08005010
 8002198:	08005014 	.word	0x08005014
 800219c:	08005018 	.word	0x08005018
 80021a0:	0800501c 	.word	0x0800501c
 80021a4:	08005020 	.word	0x08005020
 80021a8:	08005024 	.word	0x08005024
			if (_FilterData(LastTrueRange)[i] != FILTER_INVALID_DISTANCE) {
 80021ac:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80021b0:	68fa      	ldr	r2, [r7, #12]
 80021b2:	3310      	adds	r3, #16
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	4413      	add	r3, r2
 80021b8:	889b      	ldrh	r3, [r3, #4]
 80021ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021be:	4293      	cmp	r3, r2
 80021c0:	d038      	beq.n	8002234 <_filter_Start+0x744>
				StdDevSamples = (uint16_t) (StdDevSamples + 1);
 80021c2:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 80021c6:	3301      	adds	r3, #1
 80021c8:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
				StdDevDistanceSum = (uint32_t) (StdDevDistanceSum +
									(int)(_FilterData(LastTrueRange)[i] -
 80021cc:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80021d0:	68fa      	ldr	r2, [r7, #12]
 80021d2:	3310      	adds	r3, #16
 80021d4:	005b      	lsls	r3, r3, #1
 80021d6:	4413      	add	r3, r2
 80021d8:	889b      	ldrh	r3, [r3, #4]
 80021da:	461a      	mov	r2, r3
 80021dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	4619      	mov	r1, r3
											StdDevDistanceMean) *
											(int) (_FilterData(LastTrueRange)[i] -
 80021e2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80021e6:	68fa      	ldr	r2, [r7, #12]
 80021e8:	3310      	adds	r3, #16
 80021ea:	005b      	lsls	r3, r3, #1
 80021ec:	4413      	add	r3, r2
 80021ee:	889b      	ldrh	r3, [r3, #4]
 80021f0:	461a      	mov	r2, r3
 80021f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021f4:	1ad3      	subs	r3, r2, r3
											StdDevDistanceMean) *
 80021f6:	fb01 f303 	mul.w	r3, r1, r3
 80021fa:	461a      	mov	r2, r3
				StdDevDistanceSum = (uint32_t) (StdDevDistanceSum +
 80021fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80021fe:	4413      	add	r3, r2
 8002200:	67fb      	str	r3, [r7, #124]	; 0x7c
													StdDevDistanceMean));
				StdDevRateSum = (uint32_t) (StdDevRateSum +
									(int) (_FilterData(LastReturnRates)[i] -
 8002202:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002206:	68fa      	ldr	r2, [r7, #12]
 8002208:	330c      	adds	r3, #12
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	4413      	add	r3, r2
 800220e:	689a      	ldr	r2, [r3, #8]
 8002210:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	4619      	mov	r1, r3
											StdDevRateMean) *
											(int) (_FilterData(LastReturnRates)[i] -
 8002216:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800221a:	68fa      	ldr	r2, [r7, #12]
 800221c:	330c      	adds	r3, #12
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	4413      	add	r3, r2
 8002222:	689a      	ldr	r2, [r3, #8]
 8002224:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002226:	1ad3      	subs	r3, r2, r3
											StdDevRateMean) *
 8002228:	fb01 f303 	mul.w	r3, r1, r3
 800222c:	461a      	mov	r2, r3
				StdDevRateSum = (uint32_t) (StdDevRateSum +
 800222e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002230:	4413      	add	r3, r2
 8002232:	673b      	str	r3, [r7, #112]	; 0x70
		for (i = 0; (i < FILTER_NBOF_SAMPLES) && (StdDevSamples < FILTER_STDDEV_SAMPLES); i++) {
 8002234:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002238:	3301      	adds	r3, #1
 800223a:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 800223e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002242:	2b09      	cmp	r3, #9
 8002244:	d803      	bhi.n	800224e <_filter_Start+0x75e>
 8002246:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 800224a:	2b05      	cmp	r3, #5
 800224c:	d9ae      	bls.n	80021ac <_filter_Start+0x6bc>
													StdDevRateMean));
			}
		}
		if (StdDevSamples >= StdDevSamplesMinNeeded) {
 800224e:	f8b7 2080 	ldrh.w	r2, [r7, #128]	; 0x80
 8002252:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002256:	429a      	cmp	r2, r3
 8002258:	d30e      	bcc.n	8002278 <_filter_Start+0x788>
			StdDevDistance = (uint16_t) (StdDevDistanceSum / StdDevSamples);
 800225a:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 800225e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002260:	fbb2 f3f3 	udiv	r3, r2, r3
 8002264:	b29b      	uxth	r3, r3
 8002266:	677b      	str	r3, [r7, #116]	; 0x74
			StdDevRate = (uint16_t) (StdDevRateSum / StdDevSamples);
 8002268:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 800226c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800226e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002272:	b29b      	uxth	r3, r3
 8002274:	66bb      	str	r3, [r7, #104]	; 0x68
 8002276:	e003      	b.n	8002280 <_filter_Start+0x790>
		} else {
			StdDevDistance = 0;
 8002278:	2300      	movs	r3, #0
 800227a:	677b      	str	r3, [r7, #116]	; 0x74
			StdDevRate = 0;
 800227c:	2300      	movs	r3, #0
 800227e:	66bb      	str	r3, [r7, #104]	; 0x68
		}

		/* Check Return rate standard deviation */
		if (StdDevRate < StdDevMovingTargetStdDevLimit) {
 8002280:	4b76      	ldr	r3, [pc, #472]	; (800245c <_filter_Start+0x96c>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002286:	429a      	cmp	r2, r3
 8002288:	d249      	bcs.n	800231e <_filter_Start+0x82e>
			if (StdDevSamples < StdDevSamplesMinNeeded) {
 800228a:	f8b7 2080 	ldrh.w	r2, [r7, #128]	; 0x80
 800228e:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002292:	429a      	cmp	r2, r3
 8002294:	d203      	bcs.n	800229e <_filter_Start+0x7ae>
				//m_newTrueRange_mm = MaxOrInvalidDistance;
				filterErrorCode = RangingFiltered;
 8002296:	2310      	movs	r3, #16
 8002298:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 800229c:	e045      	b.n	800232a <_filter_Start+0x83a>
			} else {
				/* Check distance standard deviation */
				if (StdDevRate < StdDevMovingTargetReturnRateLimit)
 800229e:	4b70      	ldr	r3, [pc, #448]	; (8002460 <_filter_Start+0x970>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d20e      	bcs.n	80022c6 <_filter_Start+0x7d6>
					StdDevLimitWithTargetMove = StdDevLimit +
						(((StdDevMovingTargetStdDevForReturnRateLimit -
 80022a8:	4b6e      	ldr	r3, [pc, #440]	; (8002464 <_filter_Start+0x974>)
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022ae:	1ad3      	subs	r3, r2, r3
							StdDevLimit) * StdDevRate) /
 80022b0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80022b2:	fb03 f202 	mul.w	r2, r3, r2
 80022b6:	4b6a      	ldr	r3, [pc, #424]	; (8002460 <_filter_Start+0x970>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	fbb2 f3f3 	udiv	r3, r2, r3
					StdDevLimitWithTargetMove = StdDevLimit +
 80022be:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80022c0:	4413      	add	r3, r2
 80022c2:	667b      	str	r3, [r7, #100]	; 0x64
 80022c4:	e002      	b.n	80022cc <_filter_Start+0x7dc>
							StdDevMovingTargetReturnRateLimit);
				else
					StdDevLimitWithTargetMove = StdDevMovingTargetStdDevForReturnRateLimit;
 80022c6:	4b67      	ldr	r3, [pc, #412]	; (8002464 <_filter_Start+0x974>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	667b      	str	r3, [r7, #100]	; 0x64

				if(_FilterData(filterError)==NoError){
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d105      	bne.n	80022e0 <_filter_Start+0x7f0>
					/* No wrapAround detected yet, so relax constraints on the std dev */
					StdDevLimitWithTargetMove = StdDevLimitWithTargetMove * StdDevNoWrapDetectedMultiplier;
 80022d4:	4b64      	ldr	r3, [pc, #400]	; (8002468 <_filter_Start+0x978>)
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80022da:	fb02 f303 	mul.w	r3, r2, r3
 80022de:	667b      	str	r3, [r7, #100]	; 0x64
				}

				if (((StdDevDistance * StdDevHighConfidenceSNRLimit) < StdDevLimit) && (StdDevSamples>=FILTER_STDDEV_SAMPLES)) {
 80022e0:	4b62      	ldr	r3, [pc, #392]	; (800246c <_filter_Start+0x97c>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80022e6:	fb02 f303 	mul.w	r3, r2, r3
 80022ea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d907      	bls.n	8002300 <_filter_Start+0x810>
 80022f0:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 80022f4:	2b05      	cmp	r3, #5
 80022f6:	d903      	bls.n	8002300 <_filter_Start+0x810>
					NoWrapAroundHighConfidenceFlag = 1;
 80022f8:	2301      	movs	r3, #1
 80022fa:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80022fe:	e014      	b.n	800232a <_filter_Start+0x83a>
				} else {
					if (StdDevDistance < StdDevLimitWithTargetMove) {
 8002300:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002302:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002304:	429a      	cmp	r2, r3
 8002306:	d203      	bcs.n	8002310 <_filter_Start+0x820>
							NoWrapAroundFlag = 1;
 8002308:	2301      	movs	r3, #1
 800230a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 800230e:	e00c      	b.n	800232a <_filter_Start+0x83a>
						} else {
						WrapAroundFlag = 1;
 8002310:	2301      	movs	r3, #1
 8002312:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
						filterErrorCode = RangingFiltered;
 8002316:	2310      	movs	r3, #16
 8002318:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 800231c:	e005      	b.n	800232a <_filter_Start+0x83a>
					}
				}
			}
		} else {
			/* Target moving too fast */
			WrapAroundFlag = 1;
 800231e:	2301      	movs	r3, #1
 8002320:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
			filterErrorCode = RangingFiltered;
 8002324:	2310      	movs	r3, #16
 8002326:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
		}
	}

	if (ValidDistance == 0) {
 800232a:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800232e:	2b00      	cmp	r3, #0
 8002330:	d10d      	bne.n	800234e <_filter_Start+0x85e>
		/* In case of invalid distance */
		if (_FilterData(StdFilteredReads) > 0)
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8002338:	2b00      	cmp	r3, #0
 800233a:	d04e      	beq.n	80023da <_filter_Start+0x8ea>
			_FilterData(StdFilteredReads) = (uint16_t) (_FilterData(StdFilteredReads) - 1);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8002342:	3b01      	subs	r3, #1
 8002344:	b29a      	uxth	r2, r3
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800234c:	e045      	b.n	80023da <_filter_Start+0x8ea>
	} else {
		if (WrapAroundFlag == 1) {
 800234e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8002352:	2b01      	cmp	r3, #1
 8002354:	d116      	bne.n	8002384 <_filter_Start+0x894>
			_FilterData(StdFilteredReads) = (uint16_t) (_FilterData(StdFilteredReads) +
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800235c:	4b44      	ldr	r3, [pc, #272]	; (8002470 <_filter_Start+0x980>)
 800235e:	881b      	ldrh	r3, [r3, #0]
 8002360:	4413      	add	r3, r2
 8002362:	b29a      	uxth	r2, r3
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
											StdFilteredReadsIncrement);
			if (_FilterData(StdFilteredReads) > StdMaxFilteredReads)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8002370:	4b40      	ldr	r3, [pc, #256]	; (8002474 <_filter_Start+0x984>)
 8002372:	881b      	ldrh	r3, [r3, #0]
 8002374:	429a      	cmp	r2, r3
 8002376:	d930      	bls.n	80023da <_filter_Start+0x8ea>
				_FilterData(StdFilteredReads) = StdMaxFilteredReads;
 8002378:	4b3e      	ldr	r3, [pc, #248]	; (8002474 <_filter_Start+0x984>)
 800237a:	881a      	ldrh	r2, [r3, #0]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8002382:	e02a      	b.n	80023da <_filter_Start+0x8ea>
		} else {
			if (NoWrapAroundFlag == 1) {
 8002384:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8002388:	2b01      	cmp	r3, #1
 800238a:	d11e      	bne.n	80023ca <_filter_Start+0x8da>
				if (_FilterData(StdFilteredReads) > 0) {
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8002392:	2b00      	cmp	r3, #0
 8002394:	d021      	beq.n	80023da <_filter_Start+0x8ea>
					filterErrorCode = RangingFiltered;
 8002396:	2310      	movs	r3, #16
 8002398:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
					if (_FilterData(StdFilteredReads) > StdFilteredReadsDecrement)
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80023a2:	4b35      	ldr	r3, [pc, #212]	; (8002478 <_filter_Start+0x988>)
 80023a4:	881b      	ldrh	r3, [r3, #0]
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d90a      	bls.n	80023c0 <_filter_Start+0x8d0>
						_FilterData(StdFilteredReads) = (uint16_t) (_FilterData(StdFilteredReads) -
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80023b0:	4b31      	ldr	r3, [pc, #196]	; (8002478 <_filter_Start+0x988>)
 80023b2:	881b      	ldrh	r3, [r3, #0]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	b29a      	uxth	r2, r3
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80023be:	e00c      	b.n	80023da <_filter_Start+0x8ea>
														StdFilteredReadsDecrement);
					else
						_FilterData(StdFilteredReads) = 0;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2200      	movs	r2, #0
 80023c4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80023c8:	e007      	b.n	80023da <_filter_Start+0x8ea>
				}
			} else {
				if (NoWrapAroundHighConfidenceFlag == 1) {
 80023ca:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d103      	bne.n	80023da <_filter_Start+0x8ea>
					_FilterData(StdFilteredReads) = 0;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2200      	movs	r2, #0
 80023d6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	}

	/* If we detect a change from no Error to RangingFilteringOnGoing, then it means that
	 * the filter detected a change in te scene, so discard all previous measurements.
	 */
	if((_FilterData(filterError) == NoError) && (filterErrorCode!=NoError)) {
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d121      	bne.n	8002426 <_filter_Start+0x936>
 80023e2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d01d      	beq.n	8002426 <_filter_Start+0x936>
		for (i = 1; i < FILTER_NBOF_SAMPLES; i++) {
 80023ea:	2301      	movs	r3, #1
 80023ec:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 80023f0:	e015      	b.n	800241e <_filter_Start+0x92e>
			_FilterData(LastTrueRange)[i] = FILTER_INVALID_DISTANCE;
 80023f2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80023f6:	68fa      	ldr	r2, [r7, #12]
 80023f8:	3310      	adds	r3, #16
 80023fa:	005b      	lsls	r3, r3, #1
 80023fc:	4413      	add	r3, r2
 80023fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002402:	809a      	strh	r2, [r3, #4]
			_FilterData(LastReturnRates)[i] = 0;
 8002404:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002408:	68fa      	ldr	r2, [r7, #12]
 800240a:	330c      	adds	r3, #12
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	4413      	add	r3, r2
 8002410:	2200      	movs	r2, #0
 8002412:	609a      	str	r2, [r3, #8]
		for (i = 1; i < FILTER_NBOF_SAMPLES; i++) {
 8002414:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002418:	3301      	adds	r3, #1
 800241a:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 800241e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002422:	2b09      	cmp	r3, #9
 8002424:	d9e5      	bls.n	80023f2 <_filter_Start+0x902>
		}
	}

	/* Update filter error code */
	_FilterData(filterError) = filterErrorCode;
 8002426:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	67da      	str	r2, [r3, #124]	; 0x7c

	/* Update reported range */
	if(filterErrorCode==RangingFiltered)
 800242e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8002432:	2b10      	cmp	r3, #16
 8002434:	d102      	bne.n	800243c <_filter_Start+0x94c>
		m_newTrueRange_mm = MaxOrInvalidDistance; /* Set to invalid distance */
 8002436:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002438:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e

	return m_newTrueRange_mm;
 800243c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002440:	e008      	b.n	8002454 <_filter_Start+0x964>
		goto done_err;
 8002442:	bf00      	nop
 8002444:	e004      	b.n	8002450 <_filter_Start+0x960>
		goto done_err;
 8002446:	bf00      	nop
 8002448:	e002      	b.n	8002450 <_filter_Start+0x960>
				goto done_err;
 800244a:	bf00      	nop
 800244c:	e000      	b.n	8002450 <_filter_Start+0x960>
			goto done_err;
 800244e:	bf00      	nop
done_err:
	return -1;
 8002450:	f04f 33ff 	mov.w	r3, #4294967295

#undef MaxOrInvalidDistance
}
 8002454:	4618      	mov	r0, r3
 8002456:	37a0      	adds	r7, #160	; 0xa0
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	08005028 	.word	0x08005028
 8002460:	0800502c 	.word	0x0800502c
 8002464:	08005030 	.word	0x08005030
 8002468:	08005034 	.word	0x08005034
 800246c:	08005038 	.word	0x08005038
 8002470:	0800503c 	.word	0x0800503c
 8002474:	0800503e 	.word	0x0800503e
 8002478:	08005040 	.word	0x08005040

0800247c <_filter_GetResult>:


static int _filter_GetResult(VL6180xDev_t dev, VL6180x_RangeData_t *pRangeData)
{
 800247c:	b590      	push	{r4, r7, lr}
 800247e:	b08b      	sub	sp, #44	; 0x2c
 8002480:	af02      	add	r7, sp, #8
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	6039      	str	r1, [r7, #0]
	uint32_t m_rawRange_mm = 0;
 8002486:	2300      	movs	r3, #0
 8002488:	61bb      	str	r3, [r7, #24]
	int32_t  FilteredRange;
	const uint8_t scaler = _GetUpscale(dev);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	7e1b      	ldrb	r3, [r3, #24]
 800248e:	75fb      	strb	r3, [r7, #23]
	uint8_t u8;
	int status;

	do {
		status = VL6180x_GetCachedByte(dev, RESULT_RANGE_RAW, &u8);
 8002490:	f107 030f 	add.w	r3, r7, #15
 8002494:	461a      	mov	r2, r3
 8002496:	2164      	movs	r1, #100	; 0x64
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f7fe fe58 	bl	800114e <VL6180x_GetCachedByte>
 800249e:	61f8      	str	r0, [r7, #28]
		if (status) {
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d133      	bne.n	800250e <_filter_GetResult+0x92>
		    VL6180x_ErrLog("RESULT_RANGE_RAW rd fail");
		    break;
		}
		m_rawRange_mm = u8;
 80024a6:	7bfb      	ldrb	r3, [r7, #15]
 80024a8:	61bb      	str	r3, [r7, #24]

		FilteredRange = _filter_Start(dev, pRangeData->range_mm, (m_rawRange_mm * scaler), pRangeData->rtnRate, pRangeData->rtnAmbRate, pRangeData->errorStatus);
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	b299      	uxth	r1, r3
 80024b0:	7dfb      	ldrb	r3, [r7, #23]
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	b292      	uxth	r2, r2
 80024b8:	fb02 f303 	mul.w	r3, r2, r3
 80024bc:	b298      	uxth	r0, r3
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	691c      	ldr	r4, [r3, #16]
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	683a      	ldr	r2, [r7, #0]
 80024c8:	6892      	ldr	r2, [r2, #8]
 80024ca:	b292      	uxth	r2, r2
 80024cc:	9201      	str	r2, [sp, #4]
 80024ce:	9300      	str	r3, [sp, #0]
 80024d0:	4623      	mov	r3, r4
 80024d2:	4602      	mov	r2, r0
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f7ff fb0b 	bl	8001af0 <_filter_Start>
 80024da:	6138      	str	r0, [r7, #16]
		if (FilteredRange < 0) {
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	da03      	bge.n	80024ea <_filter_GetResult+0x6e>
		    status = -1;
 80024e2:	f04f 33ff 	mov.w	r3, #4294967295
 80024e6:	61fb      	str	r3, [r7, #28]
		    break;
 80024e8:	e012      	b.n	8002510 <_filter_GetResult+0x94>
		}
		pRangeData->FilteredData.range_mm = FilteredRange;
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	b29a      	uxth	r2, r3
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	841a      	strh	r2, [r3, #32]
		pRangeData->FilteredData.rawRange_mm = m_rawRange_mm * scaler;
 80024f2:	7dfb      	ldrb	r3, [r7, #23]
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	69ba      	ldr	r2, [r7, #24]
 80024f8:	b292      	uxth	r2, r2
 80024fa:	fb02 f303 	mul.w	r3, r2, r3
 80024fe:	b29a      	uxth	r2, r3
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	845a      	strh	r2, [r3, #34]	; 0x22
		pRangeData->FilteredData.filterError= _FilterData(filterError);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	625a      	str	r2, [r3, #36]	; 0x24
 800250c:	e000      	b.n	8002510 <_filter_GetResult+0x94>
		    break;
 800250e:	bf00      	nop
	} while (0);
	return status;
 8002510:	69fb      	ldr	r3, [r7, #28]
}
 8002512:	4618      	mov	r0, r3
 8002514:	3724      	adds	r7, #36	; 0x24
 8002516:	46bd      	mov	sp, r7
 8002518:	bd90      	pop	{r4, r7, pc}

0800251a <_GetRateResult>:
#endif /* VL6180x_WRAP_AROUND_FILTER_SUPPORT */

#ifdef VL6180x_HAVE_RATE_DATA

static int _GetRateResult(VL6180xDev_t dev, VL6180x_RangeData_t *pRangeData)
{
 800251a:	b580      	push	{r7, lr}
 800251c:	b08c      	sub	sp, #48	; 0x30
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
 8002522:	6039      	str	r1, [r7, #0]
	uint32_t m_rtnConvTime = 0;
 8002524:	2300      	movs	r3, #0
 8002526:	617b      	str	r3, [r7, #20]
	uint32_t m_rtnSignalRate = 0;
 8002528:	2300      	movs	r3, #0
 800252a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t m_rtnAmbientRate = 0;
 800252c:	2300      	movs	r3, #0
 800252e:	623b      	str	r3, [r7, #32]
	uint32_t m_rtnSignalCount = 0;
 8002530:	2300      	movs	r3, #0
 8002532:	613b      	str	r3, [r7, #16]
	uint32_t m_rtnAmbientCount = 0;
 8002534:	2300      	movs	r3, #0
 8002536:	60fb      	str	r3, [r7, #12]
	uint32_t m_refConvTime = 0;
 8002538:	2300      	movs	r3, #0
 800253a:	60bb      	str	r3, [r7, #8]
	uint32_t cRtnSignalCountMax = 0x7FFFFFFF;
 800253c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8002540:	61fb      	str	r3, [r7, #28]
	uint32_t cDllPeriods = 6;
 8002542:	2306      	movs	r3, #6
 8002544:	61bb      	str	r3, [r7, #24]
	uint32_t calcConvTime = 0;
 8002546:	2300      	movs	r3, #0
 8002548:	62fb      	str	r3, [r7, #44]	; 0x2c

	int status;

	do {
		status = VL6180x_GetCachedDWord(dev, RESULT_RANGE_RETURN_SIGNAL_COUNT, &m_rtnSignalCount);
 800254a:	f107 0310 	add.w	r3, r7, #16
 800254e:	461a      	mov	r2, r3
 8002550:	216c      	movs	r1, #108	; 0x6c
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f7fe fd8a 	bl	800106c <VL6180x_GetCachedDWord>
 8002558:	62b8      	str	r0, [r7, #40]	; 0x28
		if (status) {
 800255a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800255c:	2b00      	cmp	r3, #0
 800255e:	d156      	bne.n	800260e <_GetRateResult+0xf4>
			VL6180x_ErrLog("RESULT_RANGE_RETURN_SIGNAL_COUNT rd fail");
			break;
		}
		if (m_rtnSignalCount > cRtnSignalCountMax) {
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	69fa      	ldr	r2, [r7, #28]
 8002564:	429a      	cmp	r2, r3
 8002566:	d201      	bcs.n	800256c <_GetRateResult+0x52>
			m_rtnSignalCount = 0;
 8002568:	2300      	movs	r3, #0
 800256a:	613b      	str	r3, [r7, #16]
		}

		status = VL6180x_GetCachedDWord(dev, RESULT_RANGE_RETURN_AMB_COUNT, &m_rtnAmbientCount);
 800256c:	f107 030c 	add.w	r3, r7, #12
 8002570:	461a      	mov	r2, r3
 8002572:	2174      	movs	r1, #116	; 0x74
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f7fe fd79 	bl	800106c <VL6180x_GetCachedDWord>
 800257a:	62b8      	str	r0, [r7, #40]	; 0x28
		if (status) {
 800257c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800257e:	2b00      	cmp	r3, #0
 8002580:	d147      	bne.n	8002612 <_GetRateResult+0xf8>
			VL6180x_ErrLog("RESULT_RANGE_RETURN_AMB_COUNTrd fail");
			break;
		}


		status = VL6180x_GetCachedDWord(dev, RESULT_RANGE_RETURN_CONV_TIME, &m_rtnConvTime);
 8002582:	f107 0314 	add.w	r3, r7, #20
 8002586:	461a      	mov	r2, r3
 8002588:	217c      	movs	r1, #124	; 0x7c
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f7fe fd6e 	bl	800106c <VL6180x_GetCachedDWord>
 8002590:	62b8      	str	r0, [r7, #40]	; 0x28
		if (status) {
 8002592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002594:	2b00      	cmp	r3, #0
 8002596:	d13e      	bne.n	8002616 <_GetRateResult+0xfc>
			VL6180x_ErrLog("RESULT_RANGE_RETURN_CONV_TIME rd fail");
			break;
		}

		status = VL6180x_GetCachedDWord(dev, RESULT_RANGE_REFERENCE_CONV_TIME, &m_refConvTime);
 8002598:	f107 0308 	add.w	r3, r7, #8
 800259c:	461a      	mov	r2, r3
 800259e:	2180      	movs	r1, #128	; 0x80
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f7fe fd63 	bl	800106c <VL6180x_GetCachedDWord>
 80025a6:	62b8      	str	r0, [r7, #40]	; 0x28
		if (status) {
 80025a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d135      	bne.n	800261a <_GetRateResult+0x100>
			VL6180x_ErrLog("RESULT_RANGE_REFERENCE_CONV_TIME rd fail");
			break;
		}

		pRangeData->rtnConvTime = m_rtnConvTime;
 80025ae:	697a      	ldr	r2, [r7, #20]
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	615a      	str	r2, [r3, #20]
		pRangeData->refConvTime = m_refConvTime;
 80025b4:	68ba      	ldr	r2, [r7, #8]
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	619a      	str	r2, [r3, #24]

		calcConvTime = m_refConvTime;
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (m_rtnConvTime > m_refConvTime) {
 80025be:	697a      	ldr	r2, [r7, #20]
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d901      	bls.n	80025ca <_GetRateResult+0xb0>
			calcConvTime = m_rtnConvTime;
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	62fb      	str	r3, [r7, #44]	; 0x2c
		}
		if (calcConvTime == 0)
 80025ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d102      	bne.n	80025d6 <_GetRateResult+0xbc>
			calcConvTime = 63000;
 80025d0:	f24f 6318 	movw	r3, #63000	; 0xf618
 80025d4:	62fb      	str	r3, [r7, #44]	; 0x2c

		m_rtnSignalRate = (m_rtnSignalCount * 1000) / calcConvTime;
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80025dc:	fb03 f202 	mul.w	r2, r3, r2
 80025e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80025e6:	627b      	str	r3, [r7, #36]	; 0x24
		m_rtnAmbientRate = (m_rtnAmbientCount * cDllPeriods * 1000) / calcConvTime;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	69ba      	ldr	r2, [r7, #24]
 80025ec:	fb02 f303 	mul.w	r3, r2, r3
 80025f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80025f4:	fb03 f202 	mul.w	r2, r3, r2
 80025f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80025fe:	623b      	str	r3, [r7, #32]

		pRangeData->rtnRate = m_rtnSignalRate;
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002604:	611a      	str	r2, [r3, #16]
		pRangeData->rtnAmbRate = m_rtnAmbientRate;
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	6a3a      	ldr	r2, [r7, #32]
 800260a:	60da      	str	r2, [r3, #12]
 800260c:	e006      	b.n	800261c <_GetRateResult+0x102>
			break;
 800260e:	bf00      	nop
 8002610:	e004      	b.n	800261c <_GetRateResult+0x102>
			break;
 8002612:	bf00      	nop
 8002614:	e002      	b.n	800261c <_GetRateResult+0x102>
			break;
 8002616:	bf00      	nop
 8002618:	e000      	b.n	800261c <_GetRateResult+0x102>
			break;
 800261a:	bf00      	nop


	} while (0);
	return status;
 800261c:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800261e:	4618      	mov	r0, r3
 8002620:	3730      	adds	r7, #48	; 0x30
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}

08002626 <VL6180x_SqrtUint32>:
/*
 * 32 bit integer square root with not so bad precision (integer result) and is quite fast
 * see http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
 */
uint32_t VL6180x_SqrtUint32(uint32_t num)
{
 8002626:	b480      	push	{r7}
 8002628:	b085      	sub	sp, #20
 800262a:	af00      	add	r7, sp, #0
 800262c:	6078      	str	r0, [r7, #4]
	uint32_t res = 0;
 800262e:	2300      	movs	r3, #0
 8002630:	60fb      	str	r3, [r7, #12]
	uint32_t bit = 1 << 30; /* The second-to-top bit is set: 1 << 30 for 32 bits */
 8002632:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002636:	60bb      	str	r3, [r7, #8]

	/* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 8002638:	e002      	b.n	8002640 <VL6180x_SqrtUint32+0x1a>
		bit >>= 2;
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	089b      	lsrs	r3, r3, #2
 800263e:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 8002640:	68ba      	ldr	r2, [r7, #8]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	429a      	cmp	r2, r3
 8002646:	d8f8      	bhi.n	800263a <VL6180x_SqrtUint32+0x14>

	while (bit != 0) {
 8002648:	e017      	b.n	800267a <VL6180x_SqrtUint32+0x54>
		if (num >= res + bit) {
 800264a:	68fa      	ldr	r2, [r7, #12]
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	4413      	add	r3, r2
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	429a      	cmp	r2, r3
 8002654:	d30b      	bcc.n	800266e <VL6180x_SqrtUint32+0x48>
		    num -= res + bit;
 8002656:	68fa      	ldr	r2, [r7, #12]
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	4413      	add	r3, r2
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	607b      	str	r3, [r7, #4]
		    res = (res >> 1) + bit;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	085b      	lsrs	r3, r3, #1
 8002666:	68ba      	ldr	r2, [r7, #8]
 8002668:	4413      	add	r3, r2
 800266a:	60fb      	str	r3, [r7, #12]
 800266c:	e002      	b.n	8002674 <VL6180x_SqrtUint32+0x4e>
		} else
		    res >>= 1;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	085b      	lsrs	r3, r3, #1
 8002672:	60fb      	str	r3, [r7, #12]
		bit >>= 2;
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	089b      	lsrs	r3, r3, #2
 8002678:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d1e4      	bne.n	800264a <VL6180x_SqrtUint32+0x24>
	}
	return res;
 8002680:	68fb      	ldr	r3, [r7, #12]
}
 8002682:	4618      	mov	r0, r3
 8002684:	3714      	adds	r7, #20
 8002686:	46bd      	mov	sp, r7
 8002688:	bc80      	pop	{r7}
 800268a:	4770      	bx	lr

0800268c <_DMax_OneTimeInit>:
#endif


/* DMax one time init */
void _DMax_OneTimeInit(VL6180xDev_t dev)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
	_DMaxData(ambTuningWindowFactor_K) = DEF_AMBIENT_TUNING;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2250      	movs	r2, #80	; 0x50
 8002698:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
}
 800269c:	bf00      	nop
 800269e:	370c      	adds	r7, #12
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bc80      	pop	{r7}
 80026a4:	4770      	bx	lr
	...

080026a8 <_DMax_RawValueAtRateKCps>:


static uint32_t _DMax_RawValueAtRateKCps(VL6180xDev_t dev, int32_t rate)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b088      	sub	sp, #32
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
	uint32_t RawDMax;
	DMaxFix_t retSignalAt400mm;
	uint32_t ambTuningWindowFactor_K;


	ambTuningWindowFactor_K = _DMaxData(ambTuningWindowFactor_K);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80026b8:	617b      	str	r3, [r7, #20]
	snrLimit_K              = _DMaxData(snrLimit_K);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80026c0:	613b      	str	r3, [r7, #16]
	retSignalAt400mm        = _DMaxData(retSignalAt400mm);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80026c8:	60fb      	str	r3, [r7, #12]
	/* 12 to 18 bits Kcps */
	if (rate > 0) {
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	dd2c      	ble.n	800272a <_DMax_RawValueAtRateKCps+0x82>
		DMaxSq = 400 * 400 * 1000 / rate - (400 * 400 / 330);
 80026d0:	4a1a      	ldr	r2, [pc, #104]	; (800273c <_DMax_RawValueAtRateKCps+0x94>)
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	fb92 f3f3 	sdiv	r3, r2, r3
 80026d8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80026dc:	61fb      	str	r3, [r7, #28]
		/* K of (1/RtnAmb -1/330 )=> 30bit- (12-18)bit  => 12-18 bits*/
		if (DMaxSq <= 0) {
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	dc02      	bgt.n	80026ea <_DMax_RawValueAtRateKCps+0x42>
		    RawDMax = 0;
 80026e4:	2300      	movs	r3, #0
 80026e6:	61bb      	str	r3, [r7, #24]
 80026e8:	e022      	b.n	8002730 <_DMax_RawValueAtRateKCps+0x88>
		} else {
		    /* value can be more 32 bit so base on raneg apply
			 * retSignalAt400mm before or after division to presevr accuracy */
		    if (DMaxSq < (2 << 12)) {
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026f0:	da0b      	bge.n	800270a <_DMax_RawValueAtRateKCps+0x62>
				DMaxSq = DMaxSq * retSignalAt400mm /
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	68fa      	ldr	r2, [r7, #12]
 80026f6:	fb02 f303 	mul.w	r3, r2, r3
 80026fa:	4619      	mov	r1, r3
							(snrLimit_K + ambTuningWindowFactor_K);
 80026fc:	693a      	ldr	r2, [r7, #16]
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	4413      	add	r3, r2
				DMaxSq = DMaxSq * retSignalAt400mm /
 8002702:	fbb1 f3f3 	udiv	r3, r1, r3
 8002706:	61fb      	str	r3, [r7, #28]
 8002708:	e009      	b.n	800271e <_DMax_RawValueAtRateKCps+0x76>
				/* max 12 + 12 to 18 -10 => 12-26 bit */
		    } else {
				DMaxSq = DMaxSq / (snrLimit_K + ambTuningWindowFactor_K) * retSignalAt400mm;
 800270a:	69fa      	ldr	r2, [r7, #28]
 800270c:	6939      	ldr	r1, [r7, #16]
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	440b      	add	r3, r1
 8002712:	fbb2 f3f3 	udiv	r3, r2, r3
 8002716:	68fa      	ldr	r2, [r7, #12]
 8002718:	fb02 f303 	mul.w	r3, r2, r3
 800271c:	61fb      	str	r3, [r7, #28]
				/* 12 to 18 -10 + 12 to 18 *=> 12-26 bit */
		    }
		    RawDMax = VL6180x_SqrtUint32(DMaxSq);
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	4618      	mov	r0, r3
 8002722:	f7ff ff80 	bl	8002626 <VL6180x_SqrtUint32>
 8002726:	61b8      	str	r0, [r7, #24]
 8002728:	e002      	b.n	8002730 <_DMax_RawValueAtRateKCps+0x88>
		}
	} else {
		RawDMax = 0x7FFFFFFF; /* bigest possibmle 32bit signed value */
 800272a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800272e:	61bb      	str	r3, [r7, #24]
	}
	return RawDMax;
 8002730:	69bb      	ldr	r3, [r7, #24]
}
 8002732:	4618      	mov	r0, r3
 8002734:	3720      	adds	r7, #32
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	09896800 	.word	0x09896800

08002740 <_DMax_InitData>:
 *  SYSRANGE_MAX_CONVERGENCE_TIME
 *  SYSRANGE_RANGE_CHECK_ENABLES    mask RANGE_CHECK_RANGE_ENABLE_MASK
 *  range 0xb8-0xbb (0xbb)
 */
static int _DMax_InitData(VL6180xDev_t dev)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b08c      	sub	sp, #48	; 0x30
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
	int32_t minSignalNeeded;
	uint8_t SysRangeCheckEn;
	uint8_t snrLimit;
	static const int ROMABLE_DATA MaxConvTimeAdjust = -4;

	warning = 0;
 8002748:	2300      	movs	r3, #0
 800274a:	62bb      	str	r3, [r7, #40]	; 0x28

	LOG_FUNCTION_START("");
	do {
		status = VL6180x_RdByte(dev, 0x02A, &u8);
 800274c:	f107 0313 	add.w	r3, r7, #19
 8002750:	461a      	mov	r2, r3
 8002752:	212a      	movs	r1, #42	; 0x2a
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f000 f9c0 	bl	8002ada <VL6180x_RdByte>
 800275a:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (status) {
 800275c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800275e:	2b00      	cmp	r3, #0
 8002760:	f040 8095 	bne.w	800288e <_DMax_InitData+0x14e>
		    VL6180x_ErrLog("Reg 0x02A rd fail");
		    break;
		}

		if (u8 == 0) {
 8002764:	7cfb      	ldrb	r3, [r7, #19]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d103      	bne.n	8002772 <_DMax_InitData+0x32>
		    warning = CALIBRATION_WARNING;
 800276a:	2301      	movs	r3, #1
 800276c:	62bb      	str	r3, [r7, #40]	; 0x28
		    u8 = 40; /* use a default average value */
 800276e:	2328      	movs	r3, #40	; 0x28
 8002770:	74fb      	strb	r3, [r7, #19]
		}
		Reg2A_KCps = Fix7_2_KCPs(u8); /* convert to KCPs */
 8002772:	7cfb      	ldrb	r3, [r7, #19]
 8002774:	461a      	mov	r2, r3
 8002776:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800277a:	fb02 f303 	mul.w	r3, r2, r3
 800277e:	09db      	lsrs	r3, r3, #7
 8002780:	61fb      	str	r3, [r7, #28]

		status = VL6180x_RdByte(dev, SYSRANGE_RANGE_CHECK_ENABLES, &SysRangeCheckEn);
 8002782:	f107 030a 	add.w	r3, r7, #10
 8002786:	461a      	mov	r2, r3
 8002788:	212d      	movs	r1, #45	; 0x2d
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f000 f9a5 	bl	8002ada <VL6180x_RdByte>
 8002790:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (status) {
 8002792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002794:	2b00      	cmp	r3, #0
 8002796:	d17c      	bne.n	8002892 <_DMax_InitData+0x152>
		    VL6180x_ErrLog("SYSRANGE_RANGE_CHECK_ENABLES rd fail ");
		    break;
		}

		status = VL6180x_RdByte(dev, SYSRANGE_MAX_CONVERGENCE_TIME, &MaxConvTime);
 8002798:	f107 030b 	add.w	r3, r7, #11
 800279c:	461a      	mov	r2, r3
 800279e:	211c      	movs	r1, #28
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f000 f99a 	bl	8002ada <VL6180x_RdByte>
 80027a6:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (status) {
 80027a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d173      	bne.n	8002896 <_DMax_InitData+0x156>
		    VL6180x_ErrLog("SYSRANGE_MAX_CONVERGENCE_TIME rd fail ");
			break;
		}

		status = VL6180x_RdDWord(dev, 0x0B8, &RegB8);
 80027ae:	f107 030c 	add.w	r3, r7, #12
 80027b2:	461a      	mov	r2, r3
 80027b4:	21b8      	movs	r1, #184	; 0xb8
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f000 f9f8 	bl	8002bac <VL6180x_RdDWord>
 80027bc:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (status) {
 80027be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d16a      	bne.n	800289a <_DMax_InitData+0x15a>
		    VL6180x_ErrLog("reg 0x0B8 rd fail ");
		    break;
		}

		status = VL6180x_RdByte(dev, SYSRANGE_MAX_AMBIENT_LEVEL_MULT, &snrLimit);
 80027c4:	f107 0309 	add.w	r3, r7, #9
 80027c8:	461a      	mov	r2, r3
 80027ca:	212c      	movs	r1, #44	; 0x2c
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f000 f984 	bl	8002ada <VL6180x_RdByte>
 80027d2:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (status) {
 80027d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d161      	bne.n	800289e <_DMax_InitData+0x15e>
		    VL6180x_ErrLog("SYSRANGE_MAX_AMBIENT_LEVEL_MULT rd fail ");
		    break;
		}
		_DMaxData(snrLimit_K) = (int32_t)16 * 1000 / snrLimit;
 80027da:	7a7b      	ldrb	r3, [r7, #9]
 80027dc:	461a      	mov	r2, r3
 80027de:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 80027e2:	fb93 f2f2 	sdiv	r2, r3, r2
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		XTalkCompRate_KCps =   VL6180xDevDataGet(dev, XTalkCompRate_KCps);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	61bb      	str	r3, [r7, #24]

		if (Reg2A_KCps >= XTalkCompRate_KCps) {
 80027f2:	69fa      	ldr	r2, [r7, #28]
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d304      	bcc.n	8002804 <_DMax_InitData+0xc4>
		    _DMaxData(retSignalAt400mm) = Reg2A_KCps;
 80027fa:	69fa      	ldr	r2, [r7, #28]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 8002802:	e003      	b.n	800280c <_DMax_InitData+0xcc>
		} else{
		    _DMaxData(retSignalAt400mm) = 0;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2200      	movs	r2, #0
 8002808:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			/* Reg2A_K - XTalkCompRate_KCp <0 is invalid */
		}

		/* if xtalk range check is off omit it in snr clipping */
		if (SysRangeCheckEn&RANGE_CHECK_RANGE_ENABLE_MASK) {
 800280c:	7abb      	ldrb	r3, [r7, #10]
 800280e:	f003 0302 	and.w	r3, r3, #2
 8002812:	2b00      	cmp	r3, #0
 8002814:	d013      	beq.n	800283e <_DMax_InitData+0xfe>
		    status = VL6180x_RdWord(dev, SYSRANGE_RANGE_IGNORE_THRESHOLD, &u16);
 8002816:	f107 0310 	add.w	r3, r7, #16
 800281a:	461a      	mov	r2, r3
 800281c:	2126      	movs	r1, #38	; 0x26
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f000 f98b 	bl	8002b3a <VL6180x_RdWord>
 8002824:	62f8      	str	r0, [r7, #44]	; 0x2c
		    if (status) {
 8002826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002828:	2b00      	cmp	r3, #0
 800282a:	d13a      	bne.n	80028a2 <_DMax_InitData+0x162>
				VL6180x_ErrLog("SYSRANGE_RANGE_IGNORE_THRESHOLD rd fail ");
				break;
		    }
		    RangeIgnoreThreshold = Fix7_2_KCPs(u16);
 800282c:	8a3b      	ldrh	r3, [r7, #16]
 800282e:	461a      	mov	r2, r3
 8002830:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002834:	fb02 f303 	mul.w	r3, r2, r3
 8002838:	09db      	lsrs	r3, r3, #7
 800283a:	627b      	str	r3, [r7, #36]	; 0x24
 800283c:	e001      	b.n	8002842 <_DMax_InitData+0x102>
		} else{
		    RangeIgnoreThreshold  = 0;
 800283e:	2300      	movs	r3, #0
 8002840:	627b      	str	r3, [r7, #36]	; 0x24
		}

		minSignalNeeded = (RegB8 * 256) / ((int32_t)MaxConvTime + (int32_t)MaxConvTimeAdjust);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	021b      	lsls	r3, r3, #8
 8002846:	7afa      	ldrb	r2, [r7, #11]
 8002848:	4611      	mov	r1, r2
 800284a:	4a1b      	ldr	r2, [pc, #108]	; (80028b8 <_DMax_InitData+0x178>)
 800284c:	6812      	ldr	r2, [r2, #0]
 800284e:	440a      	add	r2, r1
 8002850:	fbb3 f3f2 	udiv	r3, r3, r2
 8002854:	623b      	str	r3, [r7, #32]
		/* KCps 8+8 bit -(1 to 6 bit) => 15-10 bit */
		/* minSignalNeeded = max ( minSignalNeeded,  RangeIgnoreThreshold - XTalkCompRate_KCps) */
		if (minSignalNeeded  <= (int32_t)RangeIgnoreThreshold - (int32_t)XTalkCompRate_KCps)
 8002856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	6a3a      	ldr	r2, [r7, #32]
 800285e:	429a      	cmp	r2, r3
 8002860:	dc03      	bgt.n	800286a <_DMax_InitData+0x12a>
		    minSignalNeeded  =  RangeIgnoreThreshold - XTalkCompRate_KCps;
 8002862:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	623b      	str	r3, [r7, #32]

		u32 = (minSignalNeeded*(uint32_t)snrLimit) / 16;
 800286a:	7a7b      	ldrb	r3, [r7, #9]
 800286c:	461a      	mov	r2, r3
 800286e:	6a3b      	ldr	r3, [r7, #32]
 8002870:	fb02 f303 	mul.w	r3, r2, r3
 8002874:	091b      	lsrs	r3, r3, #4
 8002876:	617b      	str	r3, [r7, #20]
		_DMaxData(ClipSnrLimit) = _DMax_RawValueAtRateKCps(dev, u32);
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	4619      	mov	r1, r3
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f7ff ff13 	bl	80026a8 <_DMax_RawValueAtRateKCps>
 8002882:	4603      	mov	r3, r0
 8002884:	b29a      	uxth	r2, r3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
 800288c:	e00a      	b.n	80028a4 <_DMax_InitData+0x164>
		    break;
 800288e:	bf00      	nop
 8002890:	e008      	b.n	80028a4 <_DMax_InitData+0x164>
		    break;
 8002892:	bf00      	nop
 8002894:	e006      	b.n	80028a4 <_DMax_InitData+0x164>
			break;
 8002896:	bf00      	nop
 8002898:	e004      	b.n	80028a4 <_DMax_InitData+0x164>
		    break;
 800289a:	bf00      	nop
 800289c:	e002      	b.n	80028a4 <_DMax_InitData+0x164>
		    break;
 800289e:	bf00      	nop
 80028a0:	e000      	b.n	80028a4 <_DMax_InitData+0x164>
				break;
 80028a2:	bf00      	nop
		/* clip to dmax to min signal snr limit rate*/
	} while (0);
	if (!status)
 80028a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d101      	bne.n	80028ae <_DMax_InitData+0x16e>
		status = warning;
 80028aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	LOG_FUNCTION_END(status);
	return status;
 80028ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3730      	adds	r7, #48	; 0x30
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	08005044 	.word	0x08005044

080028bc <_DMax_Compute>:

static int _DMax_Compute(VL6180xDev_t dev, VL6180x_RangeData_t *pRange)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b086      	sub	sp, #24
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]
	int32_t DMax;
	int scaling;
	uint16_t HwLimitAtScale;
	static const int ROMABLE_DATA rtnAmbLowLimit_KCps = 330 * 1000;

	rtnAmbRate = pRange->rtnAmbRate;
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	68db      	ldr	r3, [r3, #12]
 80028ca:	613b      	str	r3, [r7, #16]
	if (rtnAmbRate  < rtnAmbLowLimit_KCps) {
 80028cc:	4b19      	ldr	r3, [pc, #100]	; (8002934 <_DMax_Compute+0x78>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	461a      	mov	r2, r3
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d224      	bcs.n	8002922 <_DMax_Compute+0x66>
		DMax = _DMax_RawValueAtRateKCps(dev, rtnAmbRate);
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	4619      	mov	r1, r3
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f7ff fee3 	bl	80026a8 <_DMax_RawValueAtRateKCps>
 80028e2:	4603      	mov	r3, r0
 80028e4:	617b      	str	r3, [r7, #20]
		scaling = _GetUpscale(dev);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	7e1b      	ldrb	r3, [r3, #24]
 80028ea:	60fb      	str	r3, [r7, #12]
		HwLimitAtScale = UpperLimitLookUP[scaling - 1];
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	3b01      	subs	r3, #1
 80028f0:	4a11      	ldr	r2, [pc, #68]	; (8002938 <_DMax_Compute+0x7c>)
 80028f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80028f6:	817b      	strh	r3, [r7, #10]

		if (DMax > _DMaxData(ClipSnrLimit)) {
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	; 0xc8
 80028fe:	461a      	mov	r2, r3
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	4293      	cmp	r3, r2
 8002904:	dd03      	ble.n	800290e <_DMax_Compute+0x52>
		    DMax = _DMaxData(ClipSnrLimit);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	; 0xc8
 800290c:	617b      	str	r3, [r7, #20]
		}
		if (DMax > HwLimitAtScale) {
 800290e:	897b      	ldrh	r3, [r7, #10]
 8002910:	697a      	ldr	r2, [r7, #20]
 8002912:	429a      	cmp	r2, r3
 8002914:	dd01      	ble.n	800291a <_DMax_Compute+0x5e>
		    DMax = HwLimitAtScale;
 8002916:	897b      	ldrh	r3, [r7, #10]
 8002918:	617b      	str	r3, [r7, #20]
		}
		pRange->DMax = DMax;
 800291a:	697a      	ldr	r2, [r7, #20]
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	61da      	str	r2, [r3, #28]
 8002920:	e002      	b.n	8002928 <_DMax_Compute+0x6c>
	} else {
		pRange->DMax = 0;
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	2200      	movs	r2, #0
 8002926:	61da      	str	r2, [r3, #28]
	}
	return 0;
 8002928:	2300      	movs	r3, #0
}
 800292a:	4618      	mov	r0, r3
 800292c:	3718      	adds	r7, #24
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	08005048 	.word	0x08005048
 8002938:	08004fe0 	.word	0x08004fe0

0800293c <VL6180x_WrByte>:
#else
#error "invalid I2C_BUFFER_CONFIG "
#endif


int VL6180x_WrByte(VL6180xDev_t dev, uint16_t index, uint8_t data){
 800293c:	b580      	push	{r7, lr}
 800293e:	b086      	sub	sp, #24
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	460b      	mov	r3, r1
 8002946:	807b      	strh	r3, [r7, #2]
 8002948:	4613      	mov	r3, r2
 800294a:	707b      	strb	r3, [r7, #1]
    DECL_I2C_BUFFER
    VL6180x_I2C_USER_VAR

    VL6180x_GetI2CAccess(dev);

    buffer=VL6180x_GetI2cBuffer(dev,3);
 800294c:	f107 0308 	add.w	r3, r7, #8
 8002950:	617b      	str	r3, [r7, #20]
    buffer[0]=index>>8;
 8002952:	887b      	ldrh	r3, [r7, #2]
 8002954:	0a1b      	lsrs	r3, r3, #8
 8002956:	b29b      	uxth	r3, r3
 8002958:	b2da      	uxtb	r2, r3
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	701a      	strb	r2, [r3, #0]
    buffer[1]=index&0xFF;
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	3301      	adds	r3, #1
 8002962:	887a      	ldrh	r2, [r7, #2]
 8002964:	b2d2      	uxtb	r2, r2
 8002966:	701a      	strb	r2, [r3, #0]
    buffer[2]=data;
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	3302      	adds	r3, #2
 800296c:	787a      	ldrb	r2, [r7, #1]
 800296e:	701a      	strb	r2, [r3, #0]

    status=VL6180x_I2CWrite(dev, buffer,(uint8_t)3);
 8002970:	2203      	movs	r2, #3
 8002972:	6979      	ldr	r1, [r7, #20]
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f7fd fd85 	bl	8000484 <VL6180x_I2CWrite>
 800297a:	6138      	str	r0, [r7, #16]
    VL6180x_DoneI2CAcces(dev);
    return status;
 800297c:	693b      	ldr	r3, [r7, #16]
}
 800297e:	4618      	mov	r0, r3
 8002980:	3718      	adds	r7, #24
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}

08002986 <VL6180x_WrWord>:

int VL6180x_WrWord(VL6180xDev_t dev, uint16_t index, uint16_t data){
 8002986:	b580      	push	{r7, lr}
 8002988:	b086      	sub	sp, #24
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
 800298e:	460b      	mov	r3, r1
 8002990:	807b      	strh	r3, [r7, #2]
 8002992:	4613      	mov	r3, r2
 8002994:	803b      	strh	r3, [r7, #0]
    uint8_t *buffer;
    VL6180x_I2C_USER_VAR

    VL6180x_GetI2CAccess(dev);

    buffer=VL6180x_GetI2cBuffer(dev,4);
 8002996:	f107 0308 	add.w	r3, r7, #8
 800299a:	617b      	str	r3, [r7, #20]
    buffer[0]=index>>8;
 800299c:	887b      	ldrh	r3, [r7, #2]
 800299e:	0a1b      	lsrs	r3, r3, #8
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	b2da      	uxtb	r2, r3
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	701a      	strb	r2, [r3, #0]
    buffer[1]=index&0xFF;
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	3301      	adds	r3, #1
 80029ac:	887a      	ldrh	r2, [r7, #2]
 80029ae:	b2d2      	uxtb	r2, r2
 80029b0:	701a      	strb	r2, [r3, #0]
    buffer[2]=data>>8;
 80029b2:	883b      	ldrh	r3, [r7, #0]
 80029b4:	0a1b      	lsrs	r3, r3, #8
 80029b6:	b29a      	uxth	r2, r3
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	3302      	adds	r3, #2
 80029bc:	b2d2      	uxtb	r2, r2
 80029be:	701a      	strb	r2, [r3, #0]
    buffer[3]=data&0xFF;
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	3303      	adds	r3, #3
 80029c4:	883a      	ldrh	r2, [r7, #0]
 80029c6:	b2d2      	uxtb	r2, r2
 80029c8:	701a      	strb	r2, [r3, #0]

    status=VL6180x_I2CWrite(dev, buffer,(uint8_t)4);
 80029ca:	2204      	movs	r2, #4
 80029cc:	6979      	ldr	r1, [r7, #20]
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f7fd fd58 	bl	8000484 <VL6180x_I2CWrite>
 80029d4:	6138      	str	r0, [r7, #16]
    VL6180x_DoneI2CAcces(dev);
    return status;
 80029d6:	693b      	ldr	r3, [r7, #16]
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3718      	adds	r7, #24
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}

080029e0 <VL6180x_WrDWord>:

int VL6180x_WrDWord(VL6180xDev_t dev, uint16_t index, uint32_t data){
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b088      	sub	sp, #32
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	460b      	mov	r3, r1
 80029ea:	607a      	str	r2, [r7, #4]
 80029ec:	817b      	strh	r3, [r7, #10]
    int  status;
    uint8_t *buffer;


    VL6180x_GetI2CAccess(dev);
    buffer=VL6180x_GetI2cBuffer(dev,6);
 80029ee:	f107 0310 	add.w	r3, r7, #16
 80029f2:	61fb      	str	r3, [r7, #28]
    buffer[0]=index>>8;
 80029f4:	897b      	ldrh	r3, [r7, #10]
 80029f6:	0a1b      	lsrs	r3, r3, #8
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	b2da      	uxtb	r2, r3
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	701a      	strb	r2, [r3, #0]
    buffer[1]=index&0xFF;
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	3301      	adds	r3, #1
 8002a04:	897a      	ldrh	r2, [r7, #10]
 8002a06:	b2d2      	uxtb	r2, r2
 8002a08:	701a      	strb	r2, [r3, #0]
    buffer[2]=data>>24;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	0e1a      	lsrs	r2, r3, #24
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	3302      	adds	r3, #2
 8002a12:	b2d2      	uxtb	r2, r2
 8002a14:	701a      	strb	r2, [r3, #0]
    buffer[3]=(data>>16)&0xFF;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	0c1a      	lsrs	r2, r3, #16
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	3303      	adds	r3, #3
 8002a1e:	b2d2      	uxtb	r2, r2
 8002a20:	701a      	strb	r2, [r3, #0]
    buffer[4]=(data>>8)&0xFF;;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	0a1a      	lsrs	r2, r3, #8
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	3304      	adds	r3, #4
 8002a2a:	b2d2      	uxtb	r2, r2
 8002a2c:	701a      	strb	r2, [r3, #0]
    buffer[5]=data&0xFF;
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	3305      	adds	r3, #5
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	b2d2      	uxtb	r2, r2
 8002a36:	701a      	strb	r2, [r3, #0]
    status=VL6180x_I2CWrite(dev, buffer,(uint8_t)6);
 8002a38:	2206      	movs	r2, #6
 8002a3a:	69f9      	ldr	r1, [r7, #28]
 8002a3c:	68f8      	ldr	r0, [r7, #12]
 8002a3e:	f7fd fd21 	bl	8000484 <VL6180x_I2CWrite>
 8002a42:	61b8      	str	r0, [r7, #24]
    VL6180x_DoneI2CAcces(dev);

    return status;
 8002a44:	69bb      	ldr	r3, [r7, #24]
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3720      	adds	r7, #32
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <VL6180x_UpdateByte>:

int VL6180x_UpdateByte(VL6180xDev_t dev, uint16_t index, uint8_t AndData, uint8_t OrData){
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b086      	sub	sp, #24
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
 8002a56:	4608      	mov	r0, r1
 8002a58:	4611      	mov	r1, r2
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	807b      	strh	r3, [r7, #2]
 8002a60:	460b      	mov	r3, r1
 8002a62:	707b      	strb	r3, [r7, #1]
 8002a64:	4613      	mov	r3, r2
 8002a66:	703b      	strb	r3, [r7, #0]
    uint8_t *buffer;
    DECL_I2C_BUFFER

    VL6180x_GetI2CAccess(dev);

    buffer=VL6180x_GetI2cBuffer(dev,3);
 8002a68:	f107 0308 	add.w	r3, r7, #8
 8002a6c:	613b      	str	r3, [r7, #16]
    buffer[0]=index>>8;
 8002a6e:	887b      	ldrh	r3, [r7, #2]
 8002a70:	0a1b      	lsrs	r3, r3, #8
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	b2da      	uxtb	r2, r3
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	701a      	strb	r2, [r3, #0]
    buffer[1]=index&0xFF;
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	887a      	ldrh	r2, [r7, #2]
 8002a80:	b2d2      	uxtb	r2, r2
 8002a82:	701a      	strb	r2, [r3, #0]

    status=VL6180x_I2CWrite(dev, (uint8_t *)buffer,(uint8_t)2);
 8002a84:	2202      	movs	r2, #2
 8002a86:	6939      	ldr	r1, [r7, #16]
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f7fd fcfb 	bl	8000484 <VL6180x_I2CWrite>
 8002a8e:	6178      	str	r0, [r7, #20]
    if( !status ){
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d11c      	bne.n	8002ad0 <VL6180x_UpdateByte+0x82>
        /* read data direct onto buffer */
        status=VL6180x_I2CRead(dev, &buffer[2],1);
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	3302      	adds	r3, #2
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f7fd fd34 	bl	800050c <VL6180x_I2CRead>
 8002aa4:	6178      	str	r0, [r7, #20]
        if( !status ){
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d111      	bne.n	8002ad0 <VL6180x_UpdateByte+0x82>
            buffer[2]=(buffer[2]&AndData)|OrData;
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	3302      	adds	r3, #2
 8002ab0:	781a      	ldrb	r2, [r3, #0]
 8002ab2:	787b      	ldrb	r3, [r7, #1]
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	b2d9      	uxtb	r1, r3
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	3302      	adds	r3, #2
 8002abc:	783a      	ldrb	r2, [r7, #0]
 8002abe:	430a      	orrs	r2, r1
 8002ac0:	b2d2      	uxtb	r2, r2
 8002ac2:	701a      	strb	r2, [r3, #0]
            status=VL6180x_I2CWrite(dev, buffer, (uint8_t)3);
 8002ac4:	2203      	movs	r2, #3
 8002ac6:	6939      	ldr	r1, [r7, #16]
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f7fd fcdb 	bl	8000484 <VL6180x_I2CWrite>
 8002ace:	6178      	str	r0, [r7, #20]
        }
    }

    VL6180x_DoneI2CAcces(dev);

    return status;
 8002ad0:	697b      	ldr	r3, [r7, #20]
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3718      	adds	r7, #24
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}

08002ada <VL6180x_RdByte>:

int VL6180x_RdByte(VL6180xDev_t dev, uint16_t index, uint8_t *data){
 8002ada:	b580      	push	{r7, lr}
 8002adc:	b088      	sub	sp, #32
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	60f8      	str	r0, [r7, #12]
 8002ae2:	460b      	mov	r3, r1
 8002ae4:	607a      	str	r2, [r7, #4]
 8002ae6:	817b      	strh	r3, [r7, #10]
    uint8_t *buffer;
    DECL_I2C_BUFFER

    VL6180x_GetI2CAccess(dev);

    buffer=VL6180x_GetI2cBuffer(dev,2);//为buffer分配地址
 8002ae8:	f107 0310 	add.w	r3, r7, #16
 8002aec:	61bb      	str	r3, [r7, #24]
    buffer[0]=index>>8;//将寄存器地址高8位存入buffer[0]
 8002aee:	897b      	ldrh	r3, [r7, #10]
 8002af0:	0a1b      	lsrs	r3, r3, #8
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	b2da      	uxtb	r2, r3
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	701a      	strb	r2, [r3, #0]
    buffer[1]=index&0xFF;//将寄存器地址低8位存入buffer[1]
 8002afa:	69bb      	ldr	r3, [r7, #24]
 8002afc:	3301      	adds	r3, #1
 8002afe:	897a      	ldrh	r2, [r7, #10]
 8002b00:	b2d2      	uxtb	r2, r2
 8002b02:	701a      	strb	r2, [r3, #0]
    status=VL6180x_I2CWrite(dev, buffer, (uint8_t)2);//向I2C总线发送设备地址及16位寄存器地址
 8002b04:	2202      	movs	r2, #2
 8002b06:	69b9      	ldr	r1, [r7, #24]
 8002b08:	68f8      	ldr	r0, [r7, #12]
 8002b0a:	f7fd fcbb 	bl	8000484 <VL6180x_I2CWrite>
 8002b0e:	61f8      	str	r0, [r7, #28]
    if( !status ){
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d10c      	bne.n	8002b30 <VL6180x_RdByte+0x56>
        status=VL6180x_I2CRead(dev, buffer,1);//读取该寄存器中的值，并将其返回到buffer中
 8002b16:	2201      	movs	r2, #1
 8002b18:	69b9      	ldr	r1, [r7, #24]
 8002b1a:	68f8      	ldr	r0, [r7, #12]
 8002b1c:	f7fd fcf6 	bl	800050c <VL6180x_I2CRead>
 8002b20:	61f8      	str	r0, [r7, #28]
        if( !status ){
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d103      	bne.n	8002b30 <VL6180x_RdByte+0x56>
            *data = (uint8_t)buffer[0];//将buffer中的值传给data
 8002b28:	69bb      	ldr	r3, [r7, #24]
 8002b2a:	781a      	ldrb	r2, [r3, #0]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	701a      	strb	r2, [r3, #0]
        }
    }
    VL6180x_DoneI2CAcces(dev);

    return status;
 8002b30:	69fb      	ldr	r3, [r7, #28]
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3720      	adds	r7, #32
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}

08002b3a <VL6180x_RdWord>:

int VL6180x_RdWord(VL6180xDev_t dev, uint16_t index, uint16_t *data){
 8002b3a:	b580      	push	{r7, lr}
 8002b3c:	b088      	sub	sp, #32
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	60f8      	str	r0, [r7, #12]
 8002b42:	460b      	mov	r3, r1
 8002b44:	607a      	str	r2, [r7, #4]
 8002b46:	817b      	strh	r3, [r7, #10]
    uint8_t *buffer;
    DECL_I2C_BUFFER

    VL6180x_GetI2CAccess(dev);

    buffer=VL6180x_GetI2cBuffer(dev,2);
 8002b48:	f107 0310 	add.w	r3, r7, #16
 8002b4c:	61bb      	str	r3, [r7, #24]
    buffer[0]=index>>8;
 8002b4e:	897b      	ldrh	r3, [r7, #10]
 8002b50:	0a1b      	lsrs	r3, r3, #8
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	b2da      	uxtb	r2, r3
 8002b56:	69bb      	ldr	r3, [r7, #24]
 8002b58:	701a      	strb	r2, [r3, #0]
    buffer[1]=index&0xFF;
 8002b5a:	69bb      	ldr	r3, [r7, #24]
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	897a      	ldrh	r2, [r7, #10]
 8002b60:	b2d2      	uxtb	r2, r2
 8002b62:	701a      	strb	r2, [r3, #0]

    status=VL6180x_I2CWrite(dev, buffer, (uint8_t)2);
 8002b64:	2202      	movs	r2, #2
 8002b66:	69b9      	ldr	r1, [r7, #24]
 8002b68:	68f8      	ldr	r0, [r7, #12]
 8002b6a:	f7fd fc8b 	bl	8000484 <VL6180x_I2CWrite>
 8002b6e:	61f8      	str	r0, [r7, #28]
    if( !status){
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d115      	bne.n	8002ba2 <VL6180x_RdWord+0x68>
        status=VL6180x_I2CRead(dev, buffer,2);
 8002b76:	2202      	movs	r2, #2
 8002b78:	69b9      	ldr	r1, [r7, #24]
 8002b7a:	68f8      	ldr	r0, [r7, #12]
 8002b7c:	f7fd fcc6 	bl	800050c <VL6180x_I2CRead>
 8002b80:	61f8      	str	r0, [r7, #28]
        if( !status ){
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d10c      	bne.n	8002ba2 <VL6180x_RdWord+0x68>
            /* VL6180x register are Big endian if cpu is be direct read direct into *data is possible */
            *data=((uint16_t)buffer[0]<<8)|(uint16_t)buffer[1];
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	021b      	lsls	r3, r3, #8
 8002b8e:	b21a      	sxth	r2, r3
 8002b90:	69bb      	ldr	r3, [r7, #24]
 8002b92:	3301      	adds	r3, #1
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	b21b      	sxth	r3, r3
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	b21b      	sxth	r3, r3
 8002b9c:	b29a      	uxth	r2, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	801a      	strh	r2, [r3, #0]
        }
    }
    VL6180x_DoneI2CAcces(dev);
    return status;
 8002ba2:	69fb      	ldr	r3, [r7, #28]
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3720      	adds	r7, #32
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}

08002bac <VL6180x_RdDWord>:

int  VL6180x_RdDWord(VL6180xDev_t dev, uint16_t index, uint32_t *data){
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b088      	sub	sp, #32
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	460b      	mov	r3, r1
 8002bb6:	607a      	str	r2, [r7, #4]
 8002bb8:	817b      	strh	r3, [r7, #10]
    int status;
    uint8_t *buffer;
    DECL_I2C_BUFFER

    VL6180x_GetI2CAccess(dev);
    buffer=VL6180x_GetI2cBuffer(dev,4);
 8002bba:	f107 0310 	add.w	r3, r7, #16
 8002bbe:	61bb      	str	r3, [r7, #24]

    buffer[0]=index>>8;
 8002bc0:	897b      	ldrh	r3, [r7, #10]
 8002bc2:	0a1b      	lsrs	r3, r3, #8
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	b2da      	uxtb	r2, r3
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	701a      	strb	r2, [r3, #0]
    buffer[1]=index&0xFF;
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	3301      	adds	r3, #1
 8002bd0:	897a      	ldrh	r2, [r7, #10]
 8002bd2:	b2d2      	uxtb	r2, r2
 8002bd4:	701a      	strb	r2, [r3, #0]

    status=VL6180x_I2CWrite(dev, (uint8_t *) buffer, (uint8_t)2);
 8002bd6:	2202      	movs	r2, #2
 8002bd8:	69b9      	ldr	r1, [r7, #24]
 8002bda:	68f8      	ldr	r0, [r7, #12]
 8002bdc:	f7fd fc52 	bl	8000484 <VL6180x_I2CWrite>
 8002be0:	61f8      	str	r0, [r7, #28]
    if( !status ){
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d11b      	bne.n	8002c20 <VL6180x_RdDWord+0x74>
        status=VL6180x_I2CRead(dev, buffer,4);
 8002be8:	2204      	movs	r2, #4
 8002bea:	69b9      	ldr	r1, [r7, #24]
 8002bec:	68f8      	ldr	r0, [r7, #12]
 8002bee:	f7fd fc8d 	bl	800050c <VL6180x_I2CRead>
 8002bf2:	61f8      	str	r0, [r7, #28]
        if( !status ){
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d112      	bne.n	8002c20 <VL6180x_RdDWord+0x74>
            /* VL6180x register are Big endian if cpu is be direct read direct into data is possible */
            *data=((uint32_t)buffer[0]<<24)|((uint32_t)buffer[1]<<16)|((uint32_t)buffer[2]<<8)|((uint32_t)buffer[3]);
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	061a      	lsls	r2, r3, #24
 8002c00:	69bb      	ldr	r3, [r7, #24]
 8002c02:	3301      	adds	r3, #1
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	041b      	lsls	r3, r3, #16
 8002c08:	431a      	orrs	r2, r3
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	3302      	adds	r3, #2
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	021b      	lsls	r3, r3, #8
 8002c12:	4313      	orrs	r3, r2
 8002c14:	69ba      	ldr	r2, [r7, #24]
 8002c16:	3203      	adds	r2, #3
 8002c18:	7812      	ldrb	r2, [r2, #0]
 8002c1a:	431a      	orrs	r2, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	601a      	str	r2, [r3, #0]
        }
    }
    VL6180x_DoneI2CAcces(dev);
    return status;
 8002c20:	69fb      	ldr	r3, [r7, #28]
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3720      	adds	r7, #32
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}

08002c2a <VL6180x_RdMulti>:


int  VL6180x_RdMulti(VL6180xDev_t dev, uint16_t index, uint8_t *data, int nData){
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	b088      	sub	sp, #32
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	60f8      	str	r0, [r7, #12]
 8002c32:	607a      	str	r2, [r7, #4]
 8002c34:	603b      	str	r3, [r7, #0]
 8002c36:	460b      	mov	r3, r1
 8002c38:	817b      	strh	r3, [r7, #10]
    int status;
    uint8_t *buffer;
    DECL_I2C_BUFFER

    VL6180x_GetI2CAccess(dev);
    buffer=VL6180x_GetI2cBuffer(dev,2);
 8002c3a:	f107 0310 	add.w	r3, r7, #16
 8002c3e:	61bb      	str	r3, [r7, #24]

    buffer[0]=index>>8;
 8002c40:	897b      	ldrh	r3, [r7, #10]
 8002c42:	0a1b      	lsrs	r3, r3, #8
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	b2da      	uxtb	r2, r3
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	701a      	strb	r2, [r3, #0]
    buffer[1]=index&0xFF;
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	3301      	adds	r3, #1
 8002c50:	897a      	ldrh	r2, [r7, #10]
 8002c52:	b2d2      	uxtb	r2, r2
 8002c54:	701a      	strb	r2, [r3, #0]

    status=VL6180x_I2CWrite(dev, (uint8_t *) buffer, (uint8_t)2);
 8002c56:	2202      	movs	r2, #2
 8002c58:	69b9      	ldr	r1, [r7, #24]
 8002c5a:	68f8      	ldr	r0, [r7, #12]
 8002c5c:	f7fd fc12 	bl	8000484 <VL6180x_I2CWrite>
 8002c60:	61f8      	str	r0, [r7, #28]
    if( !status ){
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d107      	bne.n	8002c78 <VL6180x_RdMulti+0x4e>
        status=VL6180x_I2CRead(dev, data, nData);
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	6879      	ldr	r1, [r7, #4]
 8002c70:	68f8      	ldr	r0, [r7, #12]
 8002c72:	f7fd fc4b 	bl	800050c <VL6180x_I2CRead>
 8002c76:	61f8      	str	r0, [r7, #28]
    }
    VL6180x_DoneI2CAcces(dev);
    return status;
 8002c78:	69fb      	ldr	r3, [r7, #28]
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3720      	adds	r7, #32
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
	...

08002c84 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c84:	480c      	ldr	r0, [pc, #48]	; (8002cb8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002c86:	490d      	ldr	r1, [pc, #52]	; (8002cbc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002c88:	4a0d      	ldr	r2, [pc, #52]	; (8002cc0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002c8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c8c:	e002      	b.n	8002c94 <LoopCopyDataInit>

08002c8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c92:	3304      	adds	r3, #4

08002c94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c98:	d3f9      	bcc.n	8002c8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c9a:	4a0a      	ldr	r2, [pc, #40]	; (8002cc4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002c9c:	4c0a      	ldr	r4, [pc, #40]	; (8002cc8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002c9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ca0:	e001      	b.n	8002ca6 <LoopFillZerobss>

08002ca2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ca2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ca4:	3204      	adds	r2, #4

08002ca6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ca6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ca8:	d3fb      	bcc.n	8002ca2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002caa:	f7fd ff89 	bl	8000bc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002cae:	f001 f99f 	bl	8003ff0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002cb2:	f7fd fc6b 	bl	800058c <main>
  bx lr
 8002cb6:	4770      	bx	lr
  ldr r0, =_sdata
 8002cb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002cbc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002cc0:	080050ec 	.word	0x080050ec
  ldr r2, =_sbss
 8002cc4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002cc8:	20000290 	.word	0x20000290

08002ccc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002ccc:	e7fe      	b.n	8002ccc <ADC1_2_IRQHandler>
	...

08002cd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002cd4:	4b08      	ldr	r3, [pc, #32]	; (8002cf8 <HAL_Init+0x28>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a07      	ldr	r2, [pc, #28]	; (8002cf8 <HAL_Init+0x28>)
 8002cda:	f043 0310 	orr.w	r3, r3, #16
 8002cde:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ce0:	2003      	movs	r0, #3
 8002ce2:	f000 f92b 	bl	8002f3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ce6:	200f      	movs	r0, #15
 8002ce8:	f000 f808 	bl	8002cfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002cec:	f7fd fe24 	bl	8000938 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	40022000 	.word	0x40022000

08002cfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d04:	4b12      	ldr	r3, [pc, #72]	; (8002d50 <HAL_InitTick+0x54>)
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	4b12      	ldr	r3, [pc, #72]	; (8002d54 <HAL_InitTick+0x58>)
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d12:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f000 f935 	bl	8002f8a <HAL_SYSTICK_Config>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d001      	beq.n	8002d2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e00e      	b.n	8002d48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2b0f      	cmp	r3, #15
 8002d2e:	d80a      	bhi.n	8002d46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d30:	2200      	movs	r2, #0
 8002d32:	6879      	ldr	r1, [r7, #4]
 8002d34:	f04f 30ff 	mov.w	r0, #4294967295
 8002d38:	f000 f90b 	bl	8002f52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d3c:	4a06      	ldr	r2, [pc, #24]	; (8002d58 <HAL_InitTick+0x5c>)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d42:	2300      	movs	r3, #0
 8002d44:	e000      	b.n	8002d48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3708      	adds	r7, #8
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	20000000 	.word	0x20000000
 8002d54:	20000008 	.word	0x20000008
 8002d58:	20000004 	.word	0x20000004

08002d5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d60:	4b05      	ldr	r3, [pc, #20]	; (8002d78 <HAL_IncTick+0x1c>)
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	461a      	mov	r2, r3
 8002d66:	4b05      	ldr	r3, [pc, #20]	; (8002d7c <HAL_IncTick+0x20>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4413      	add	r3, r2
 8002d6c:	4a03      	ldr	r2, [pc, #12]	; (8002d7c <HAL_IncTick+0x20>)
 8002d6e:	6013      	str	r3, [r2, #0]
}
 8002d70:	bf00      	nop
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bc80      	pop	{r7}
 8002d76:	4770      	bx	lr
 8002d78:	20000008 	.word	0x20000008
 8002d7c:	2000027c 	.word	0x2000027c

08002d80 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d80:	b480      	push	{r7}
 8002d82:	af00      	add	r7, sp, #0
  return uwTick;
 8002d84:	4b02      	ldr	r3, [pc, #8]	; (8002d90 <HAL_GetTick+0x10>)
 8002d86:	681b      	ldr	r3, [r3, #0]
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bc80      	pop	{r7}
 8002d8e:	4770      	bx	lr
 8002d90:	2000027c 	.word	0x2000027c

08002d94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d9c:	f7ff fff0 	bl	8002d80 <HAL_GetTick>
 8002da0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dac:	d005      	beq.n	8002dba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002dae:	4b0a      	ldr	r3, [pc, #40]	; (8002dd8 <HAL_Delay+0x44>)
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	461a      	mov	r2, r3
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	4413      	add	r3, r2
 8002db8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002dba:	bf00      	nop
 8002dbc:	f7ff ffe0 	bl	8002d80 <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	68fa      	ldr	r2, [r7, #12]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d8f7      	bhi.n	8002dbc <HAL_Delay+0x28>
  {
  }
}
 8002dcc:	bf00      	nop
 8002dce:	bf00      	nop
 8002dd0:	3710      	adds	r7, #16
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	20000008 	.word	0x20000008

08002ddc <__NVIC_SetPriorityGrouping>:
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b085      	sub	sp, #20
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f003 0307 	and.w	r3, r3, #7
 8002dea:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002dec:	4b0c      	ldr	r3, [pc, #48]	; (8002e20 <__NVIC_SetPriorityGrouping+0x44>)
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002df2:	68ba      	ldr	r2, [r7, #8]
 8002df4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002df8:	4013      	ands	r3, r2
 8002dfa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e0e:	4a04      	ldr	r2, [pc, #16]	; (8002e20 <__NVIC_SetPriorityGrouping+0x44>)
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	60d3      	str	r3, [r2, #12]
}
 8002e14:	bf00      	nop
 8002e16:	3714      	adds	r7, #20
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bc80      	pop	{r7}
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	e000ed00 	.word	0xe000ed00

08002e24 <__NVIC_GetPriorityGrouping>:
{
 8002e24:	b480      	push	{r7}
 8002e26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e28:	4b04      	ldr	r3, [pc, #16]	; (8002e3c <__NVIC_GetPriorityGrouping+0x18>)
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	0a1b      	lsrs	r3, r3, #8
 8002e2e:	f003 0307 	and.w	r3, r3, #7
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bc80      	pop	{r7}
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	e000ed00 	.word	0xe000ed00

08002e40 <__NVIC_SetPriority>:
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	4603      	mov	r3, r0
 8002e48:	6039      	str	r1, [r7, #0]
 8002e4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	db0a      	blt.n	8002e6a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	b2da      	uxtb	r2, r3
 8002e58:	490c      	ldr	r1, [pc, #48]	; (8002e8c <__NVIC_SetPriority+0x4c>)
 8002e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e5e:	0112      	lsls	r2, r2, #4
 8002e60:	b2d2      	uxtb	r2, r2
 8002e62:	440b      	add	r3, r1
 8002e64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002e68:	e00a      	b.n	8002e80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	b2da      	uxtb	r2, r3
 8002e6e:	4908      	ldr	r1, [pc, #32]	; (8002e90 <__NVIC_SetPriority+0x50>)
 8002e70:	79fb      	ldrb	r3, [r7, #7]
 8002e72:	f003 030f 	and.w	r3, r3, #15
 8002e76:	3b04      	subs	r3, #4
 8002e78:	0112      	lsls	r2, r2, #4
 8002e7a:	b2d2      	uxtb	r2, r2
 8002e7c:	440b      	add	r3, r1
 8002e7e:	761a      	strb	r2, [r3, #24]
}
 8002e80:	bf00      	nop
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bc80      	pop	{r7}
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	e000e100 	.word	0xe000e100
 8002e90:	e000ed00 	.word	0xe000ed00

08002e94 <NVIC_EncodePriority>:
{
 8002e94:	b480      	push	{r7}
 8002e96:	b089      	sub	sp, #36	; 0x24
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	60f8      	str	r0, [r7, #12]
 8002e9c:	60b9      	str	r1, [r7, #8]
 8002e9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f003 0307 	and.w	r3, r3, #7
 8002ea6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	f1c3 0307 	rsb	r3, r3, #7
 8002eae:	2b04      	cmp	r3, #4
 8002eb0:	bf28      	it	cs
 8002eb2:	2304      	movcs	r3, #4
 8002eb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	3304      	adds	r3, #4
 8002eba:	2b06      	cmp	r3, #6
 8002ebc:	d902      	bls.n	8002ec4 <NVIC_EncodePriority+0x30>
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	3b03      	subs	r3, #3
 8002ec2:	e000      	b.n	8002ec6 <NVIC_EncodePriority+0x32>
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ec8:	f04f 32ff 	mov.w	r2, #4294967295
 8002ecc:	69bb      	ldr	r3, [r7, #24]
 8002ece:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed2:	43da      	mvns	r2, r3
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	401a      	ands	r2, r3
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002edc:	f04f 31ff 	mov.w	r1, #4294967295
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee6:	43d9      	mvns	r1, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002eec:	4313      	orrs	r3, r2
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3724      	adds	r7, #36	; 0x24
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bc80      	pop	{r7}
 8002ef6:	4770      	bx	lr

08002ef8 <SysTick_Config>:
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b082      	sub	sp, #8
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	3b01      	subs	r3, #1
 8002f04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f08:	d301      	bcc.n	8002f0e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e00f      	b.n	8002f2e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f0e:	4a0a      	ldr	r2, [pc, #40]	; (8002f38 <SysTick_Config+0x40>)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	3b01      	subs	r3, #1
 8002f14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f16:	210f      	movs	r1, #15
 8002f18:	f04f 30ff 	mov.w	r0, #4294967295
 8002f1c:	f7ff ff90 	bl	8002e40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f20:	4b05      	ldr	r3, [pc, #20]	; (8002f38 <SysTick_Config+0x40>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f26:	4b04      	ldr	r3, [pc, #16]	; (8002f38 <SysTick_Config+0x40>)
 8002f28:	2207      	movs	r2, #7
 8002f2a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3708      	adds	r7, #8
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	e000e010 	.word	0xe000e010

08002f3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f7ff ff49 	bl	8002ddc <__NVIC_SetPriorityGrouping>
}
 8002f4a:	bf00      	nop
 8002f4c:	3708      	adds	r7, #8
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b086      	sub	sp, #24
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	4603      	mov	r3, r0
 8002f5a:	60b9      	str	r1, [r7, #8]
 8002f5c:	607a      	str	r2, [r7, #4]
 8002f5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f60:	2300      	movs	r3, #0
 8002f62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f64:	f7ff ff5e 	bl	8002e24 <__NVIC_GetPriorityGrouping>
 8002f68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	68b9      	ldr	r1, [r7, #8]
 8002f6e:	6978      	ldr	r0, [r7, #20]
 8002f70:	f7ff ff90 	bl	8002e94 <NVIC_EncodePriority>
 8002f74:	4602      	mov	r2, r0
 8002f76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f7a:	4611      	mov	r1, r2
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f7ff ff5f 	bl	8002e40 <__NVIC_SetPriority>
}
 8002f82:	bf00      	nop
 8002f84:	3718      	adds	r7, #24
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}

08002f8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f8a:	b580      	push	{r7, lr}
 8002f8c:	b082      	sub	sp, #8
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f7ff ffb0 	bl	8002ef8 <SysTick_Config>
 8002f98:	4603      	mov	r3, r0
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3708      	adds	r7, #8
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
	...

08002fa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b08b      	sub	sp, #44	; 0x2c
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fb6:	e161      	b.n	800327c <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002fb8:	2201      	movs	r2, #1
 8002fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	69fa      	ldr	r2, [r7, #28]
 8002fc8:	4013      	ands	r3, r2
 8002fca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002fcc:	69ba      	ldr	r2, [r7, #24]
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	f040 8150 	bne.w	8003276 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	4a97      	ldr	r2, [pc, #604]	; (8003238 <HAL_GPIO_Init+0x294>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d05e      	beq.n	800309e <HAL_GPIO_Init+0xfa>
 8002fe0:	4a95      	ldr	r2, [pc, #596]	; (8003238 <HAL_GPIO_Init+0x294>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d875      	bhi.n	80030d2 <HAL_GPIO_Init+0x12e>
 8002fe6:	4a95      	ldr	r2, [pc, #596]	; (800323c <HAL_GPIO_Init+0x298>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d058      	beq.n	800309e <HAL_GPIO_Init+0xfa>
 8002fec:	4a93      	ldr	r2, [pc, #588]	; (800323c <HAL_GPIO_Init+0x298>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d86f      	bhi.n	80030d2 <HAL_GPIO_Init+0x12e>
 8002ff2:	4a93      	ldr	r2, [pc, #588]	; (8003240 <HAL_GPIO_Init+0x29c>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d052      	beq.n	800309e <HAL_GPIO_Init+0xfa>
 8002ff8:	4a91      	ldr	r2, [pc, #580]	; (8003240 <HAL_GPIO_Init+0x29c>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d869      	bhi.n	80030d2 <HAL_GPIO_Init+0x12e>
 8002ffe:	4a91      	ldr	r2, [pc, #580]	; (8003244 <HAL_GPIO_Init+0x2a0>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d04c      	beq.n	800309e <HAL_GPIO_Init+0xfa>
 8003004:	4a8f      	ldr	r2, [pc, #572]	; (8003244 <HAL_GPIO_Init+0x2a0>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d863      	bhi.n	80030d2 <HAL_GPIO_Init+0x12e>
 800300a:	4a8f      	ldr	r2, [pc, #572]	; (8003248 <HAL_GPIO_Init+0x2a4>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d046      	beq.n	800309e <HAL_GPIO_Init+0xfa>
 8003010:	4a8d      	ldr	r2, [pc, #564]	; (8003248 <HAL_GPIO_Init+0x2a4>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d85d      	bhi.n	80030d2 <HAL_GPIO_Init+0x12e>
 8003016:	2b12      	cmp	r3, #18
 8003018:	d82a      	bhi.n	8003070 <HAL_GPIO_Init+0xcc>
 800301a:	2b12      	cmp	r3, #18
 800301c:	d859      	bhi.n	80030d2 <HAL_GPIO_Init+0x12e>
 800301e:	a201      	add	r2, pc, #4	; (adr r2, 8003024 <HAL_GPIO_Init+0x80>)
 8003020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003024:	0800309f 	.word	0x0800309f
 8003028:	08003079 	.word	0x08003079
 800302c:	0800308b 	.word	0x0800308b
 8003030:	080030cd 	.word	0x080030cd
 8003034:	080030d3 	.word	0x080030d3
 8003038:	080030d3 	.word	0x080030d3
 800303c:	080030d3 	.word	0x080030d3
 8003040:	080030d3 	.word	0x080030d3
 8003044:	080030d3 	.word	0x080030d3
 8003048:	080030d3 	.word	0x080030d3
 800304c:	080030d3 	.word	0x080030d3
 8003050:	080030d3 	.word	0x080030d3
 8003054:	080030d3 	.word	0x080030d3
 8003058:	080030d3 	.word	0x080030d3
 800305c:	080030d3 	.word	0x080030d3
 8003060:	080030d3 	.word	0x080030d3
 8003064:	080030d3 	.word	0x080030d3
 8003068:	08003081 	.word	0x08003081
 800306c:	08003095 	.word	0x08003095
 8003070:	4a76      	ldr	r2, [pc, #472]	; (800324c <HAL_GPIO_Init+0x2a8>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d013      	beq.n	800309e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003076:	e02c      	b.n	80030d2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	623b      	str	r3, [r7, #32]
          break;
 800307e:	e029      	b.n	80030d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	3304      	adds	r3, #4
 8003086:	623b      	str	r3, [r7, #32]
          break;
 8003088:	e024      	b.n	80030d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	3308      	adds	r3, #8
 8003090:	623b      	str	r3, [r7, #32]
          break;
 8003092:	e01f      	b.n	80030d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	330c      	adds	r3, #12
 800309a:	623b      	str	r3, [r7, #32]
          break;
 800309c:	e01a      	b.n	80030d4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d102      	bne.n	80030ac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80030a6:	2304      	movs	r3, #4
 80030a8:	623b      	str	r3, [r7, #32]
          break;
 80030aa:	e013      	b.n	80030d4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d105      	bne.n	80030c0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80030b4:	2308      	movs	r3, #8
 80030b6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	69fa      	ldr	r2, [r7, #28]
 80030bc:	611a      	str	r2, [r3, #16]
          break;
 80030be:	e009      	b.n	80030d4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80030c0:	2308      	movs	r3, #8
 80030c2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	69fa      	ldr	r2, [r7, #28]
 80030c8:	615a      	str	r2, [r3, #20]
          break;
 80030ca:	e003      	b.n	80030d4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80030cc:	2300      	movs	r3, #0
 80030ce:	623b      	str	r3, [r7, #32]
          break;
 80030d0:	e000      	b.n	80030d4 <HAL_GPIO_Init+0x130>
          break;
 80030d2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	2bff      	cmp	r3, #255	; 0xff
 80030d8:	d801      	bhi.n	80030de <HAL_GPIO_Init+0x13a>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	e001      	b.n	80030e2 <HAL_GPIO_Init+0x13e>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	3304      	adds	r3, #4
 80030e2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80030e4:	69bb      	ldr	r3, [r7, #24]
 80030e6:	2bff      	cmp	r3, #255	; 0xff
 80030e8:	d802      	bhi.n	80030f0 <HAL_GPIO_Init+0x14c>
 80030ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	e002      	b.n	80030f6 <HAL_GPIO_Init+0x152>
 80030f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f2:	3b08      	subs	r3, #8
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	210f      	movs	r1, #15
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	fa01 f303 	lsl.w	r3, r1, r3
 8003104:	43db      	mvns	r3, r3
 8003106:	401a      	ands	r2, r3
 8003108:	6a39      	ldr	r1, [r7, #32]
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	fa01 f303 	lsl.w	r3, r1, r3
 8003110:	431a      	orrs	r2, r3
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800311e:	2b00      	cmp	r3, #0
 8003120:	f000 80a9 	beq.w	8003276 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003124:	4b4a      	ldr	r3, [pc, #296]	; (8003250 <HAL_GPIO_Init+0x2ac>)
 8003126:	699b      	ldr	r3, [r3, #24]
 8003128:	4a49      	ldr	r2, [pc, #292]	; (8003250 <HAL_GPIO_Init+0x2ac>)
 800312a:	f043 0301 	orr.w	r3, r3, #1
 800312e:	6193      	str	r3, [r2, #24]
 8003130:	4b47      	ldr	r3, [pc, #284]	; (8003250 <HAL_GPIO_Init+0x2ac>)
 8003132:	699b      	ldr	r3, [r3, #24]
 8003134:	f003 0301 	and.w	r3, r3, #1
 8003138:	60bb      	str	r3, [r7, #8]
 800313a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800313c:	4a45      	ldr	r2, [pc, #276]	; (8003254 <HAL_GPIO_Init+0x2b0>)
 800313e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003140:	089b      	lsrs	r3, r3, #2
 8003142:	3302      	adds	r3, #2
 8003144:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003148:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800314a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314c:	f003 0303 	and.w	r3, r3, #3
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	220f      	movs	r2, #15
 8003154:	fa02 f303 	lsl.w	r3, r2, r3
 8003158:	43db      	mvns	r3, r3
 800315a:	68fa      	ldr	r2, [r7, #12]
 800315c:	4013      	ands	r3, r2
 800315e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	4a3d      	ldr	r2, [pc, #244]	; (8003258 <HAL_GPIO_Init+0x2b4>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d00d      	beq.n	8003184 <HAL_GPIO_Init+0x1e0>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	4a3c      	ldr	r2, [pc, #240]	; (800325c <HAL_GPIO_Init+0x2b8>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d007      	beq.n	8003180 <HAL_GPIO_Init+0x1dc>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	4a3b      	ldr	r2, [pc, #236]	; (8003260 <HAL_GPIO_Init+0x2bc>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d101      	bne.n	800317c <HAL_GPIO_Init+0x1d8>
 8003178:	2302      	movs	r3, #2
 800317a:	e004      	b.n	8003186 <HAL_GPIO_Init+0x1e2>
 800317c:	2303      	movs	r3, #3
 800317e:	e002      	b.n	8003186 <HAL_GPIO_Init+0x1e2>
 8003180:	2301      	movs	r3, #1
 8003182:	e000      	b.n	8003186 <HAL_GPIO_Init+0x1e2>
 8003184:	2300      	movs	r3, #0
 8003186:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003188:	f002 0203 	and.w	r2, r2, #3
 800318c:	0092      	lsls	r2, r2, #2
 800318e:	4093      	lsls	r3, r2
 8003190:	68fa      	ldr	r2, [r7, #12]
 8003192:	4313      	orrs	r3, r2
 8003194:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003196:	492f      	ldr	r1, [pc, #188]	; (8003254 <HAL_GPIO_Init+0x2b0>)
 8003198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319a:	089b      	lsrs	r3, r3, #2
 800319c:	3302      	adds	r3, #2
 800319e:	68fa      	ldr	r2, [r7, #12]
 80031a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d006      	beq.n	80031be <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80031b0:	4b2c      	ldr	r3, [pc, #176]	; (8003264 <HAL_GPIO_Init+0x2c0>)
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	492b      	ldr	r1, [pc, #172]	; (8003264 <HAL_GPIO_Init+0x2c0>)
 80031b6:	69bb      	ldr	r3, [r7, #24]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	600b      	str	r3, [r1, #0]
 80031bc:	e006      	b.n	80031cc <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80031be:	4b29      	ldr	r3, [pc, #164]	; (8003264 <HAL_GPIO_Init+0x2c0>)
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	43db      	mvns	r3, r3
 80031c6:	4927      	ldr	r1, [pc, #156]	; (8003264 <HAL_GPIO_Init+0x2c0>)
 80031c8:	4013      	ands	r3, r2
 80031ca:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d006      	beq.n	80031e6 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80031d8:	4b22      	ldr	r3, [pc, #136]	; (8003264 <HAL_GPIO_Init+0x2c0>)
 80031da:	685a      	ldr	r2, [r3, #4]
 80031dc:	4921      	ldr	r1, [pc, #132]	; (8003264 <HAL_GPIO_Init+0x2c0>)
 80031de:	69bb      	ldr	r3, [r7, #24]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	604b      	str	r3, [r1, #4]
 80031e4:	e006      	b.n	80031f4 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80031e6:	4b1f      	ldr	r3, [pc, #124]	; (8003264 <HAL_GPIO_Init+0x2c0>)
 80031e8:	685a      	ldr	r2, [r3, #4]
 80031ea:	69bb      	ldr	r3, [r7, #24]
 80031ec:	43db      	mvns	r3, r3
 80031ee:	491d      	ldr	r1, [pc, #116]	; (8003264 <HAL_GPIO_Init+0x2c0>)
 80031f0:	4013      	ands	r3, r2
 80031f2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d006      	beq.n	800320e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003200:	4b18      	ldr	r3, [pc, #96]	; (8003264 <HAL_GPIO_Init+0x2c0>)
 8003202:	689a      	ldr	r2, [r3, #8]
 8003204:	4917      	ldr	r1, [pc, #92]	; (8003264 <HAL_GPIO_Init+0x2c0>)
 8003206:	69bb      	ldr	r3, [r7, #24]
 8003208:	4313      	orrs	r3, r2
 800320a:	608b      	str	r3, [r1, #8]
 800320c:	e006      	b.n	800321c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800320e:	4b15      	ldr	r3, [pc, #84]	; (8003264 <HAL_GPIO_Init+0x2c0>)
 8003210:	689a      	ldr	r2, [r3, #8]
 8003212:	69bb      	ldr	r3, [r7, #24]
 8003214:	43db      	mvns	r3, r3
 8003216:	4913      	ldr	r1, [pc, #76]	; (8003264 <HAL_GPIO_Init+0x2c0>)
 8003218:	4013      	ands	r3, r2
 800321a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d01f      	beq.n	8003268 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003228:	4b0e      	ldr	r3, [pc, #56]	; (8003264 <HAL_GPIO_Init+0x2c0>)
 800322a:	68da      	ldr	r2, [r3, #12]
 800322c:	490d      	ldr	r1, [pc, #52]	; (8003264 <HAL_GPIO_Init+0x2c0>)
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	4313      	orrs	r3, r2
 8003232:	60cb      	str	r3, [r1, #12]
 8003234:	e01f      	b.n	8003276 <HAL_GPIO_Init+0x2d2>
 8003236:	bf00      	nop
 8003238:	10320000 	.word	0x10320000
 800323c:	10310000 	.word	0x10310000
 8003240:	10220000 	.word	0x10220000
 8003244:	10210000 	.word	0x10210000
 8003248:	10120000 	.word	0x10120000
 800324c:	10110000 	.word	0x10110000
 8003250:	40021000 	.word	0x40021000
 8003254:	40010000 	.word	0x40010000
 8003258:	40010800 	.word	0x40010800
 800325c:	40010c00 	.word	0x40010c00
 8003260:	40011000 	.word	0x40011000
 8003264:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003268:	4b0b      	ldr	r3, [pc, #44]	; (8003298 <HAL_GPIO_Init+0x2f4>)
 800326a:	68da      	ldr	r2, [r3, #12]
 800326c:	69bb      	ldr	r3, [r7, #24]
 800326e:	43db      	mvns	r3, r3
 8003270:	4909      	ldr	r1, [pc, #36]	; (8003298 <HAL_GPIO_Init+0x2f4>)
 8003272:	4013      	ands	r3, r2
 8003274:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003278:	3301      	adds	r3, #1
 800327a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003282:	fa22 f303 	lsr.w	r3, r2, r3
 8003286:	2b00      	cmp	r3, #0
 8003288:	f47f ae96 	bne.w	8002fb8 <HAL_GPIO_Init+0x14>
  }
}
 800328c:	bf00      	nop
 800328e:	bf00      	nop
 8003290:	372c      	adds	r7, #44	; 0x2c
 8003292:	46bd      	mov	sp, r7
 8003294:	bc80      	pop	{r7}
 8003296:	4770      	bx	lr
 8003298:	40010400 	.word	0x40010400

0800329c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800329c:	b480      	push	{r7}
 800329e:	b085      	sub	sp, #20
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	460b      	mov	r3, r1
 80032a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	689a      	ldr	r2, [r3, #8]
 80032ac:	887b      	ldrh	r3, [r7, #2]
 80032ae:	4013      	ands	r3, r2
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d002      	beq.n	80032ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80032b4:	2301      	movs	r3, #1
 80032b6:	73fb      	strb	r3, [r7, #15]
 80032b8:	e001      	b.n	80032be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80032ba:	2300      	movs	r3, #0
 80032bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80032be:	7bfb      	ldrb	r3, [r7, #15]
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3714      	adds	r7, #20
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bc80      	pop	{r7}
 80032c8:	4770      	bx	lr

080032ca <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032ca:	b480      	push	{r7}
 80032cc:	b083      	sub	sp, #12
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	6078      	str	r0, [r7, #4]
 80032d2:	460b      	mov	r3, r1
 80032d4:	807b      	strh	r3, [r7, #2]
 80032d6:	4613      	mov	r3, r2
 80032d8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80032da:	787b      	ldrb	r3, [r7, #1]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d003      	beq.n	80032e8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032e0:	887a      	ldrh	r2, [r7, #2]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80032e6:	e003      	b.n	80032f0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80032e8:	887b      	ldrh	r3, [r7, #2]
 80032ea:	041a      	lsls	r2, r3, #16
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	611a      	str	r2, [r3, #16]
}
 80032f0:	bf00      	nop
 80032f2:	370c      	adds	r7, #12
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bc80      	pop	{r7}
 80032f8:	4770      	bx	lr
	...

080032fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b086      	sub	sp, #24
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d101      	bne.n	800330e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e272      	b.n	80037f4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0301 	and.w	r3, r3, #1
 8003316:	2b00      	cmp	r3, #0
 8003318:	f000 8087 	beq.w	800342a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800331c:	4b92      	ldr	r3, [pc, #584]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f003 030c 	and.w	r3, r3, #12
 8003324:	2b04      	cmp	r3, #4
 8003326:	d00c      	beq.n	8003342 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003328:	4b8f      	ldr	r3, [pc, #572]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f003 030c 	and.w	r3, r3, #12
 8003330:	2b08      	cmp	r3, #8
 8003332:	d112      	bne.n	800335a <HAL_RCC_OscConfig+0x5e>
 8003334:	4b8c      	ldr	r3, [pc, #560]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800333c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003340:	d10b      	bne.n	800335a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003342:	4b89      	ldr	r3, [pc, #548]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d06c      	beq.n	8003428 <HAL_RCC_OscConfig+0x12c>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d168      	bne.n	8003428 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e24c      	b.n	80037f4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003362:	d106      	bne.n	8003372 <HAL_RCC_OscConfig+0x76>
 8003364:	4b80      	ldr	r3, [pc, #512]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a7f      	ldr	r2, [pc, #508]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 800336a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800336e:	6013      	str	r3, [r2, #0]
 8003370:	e02e      	b.n	80033d0 <HAL_RCC_OscConfig+0xd4>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d10c      	bne.n	8003394 <HAL_RCC_OscConfig+0x98>
 800337a:	4b7b      	ldr	r3, [pc, #492]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a7a      	ldr	r2, [pc, #488]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 8003380:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003384:	6013      	str	r3, [r2, #0]
 8003386:	4b78      	ldr	r3, [pc, #480]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a77      	ldr	r2, [pc, #476]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 800338c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003390:	6013      	str	r3, [r2, #0]
 8003392:	e01d      	b.n	80033d0 <HAL_RCC_OscConfig+0xd4>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800339c:	d10c      	bne.n	80033b8 <HAL_RCC_OscConfig+0xbc>
 800339e:	4b72      	ldr	r3, [pc, #456]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a71      	ldr	r2, [pc, #452]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 80033a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033a8:	6013      	str	r3, [r2, #0]
 80033aa:	4b6f      	ldr	r3, [pc, #444]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a6e      	ldr	r2, [pc, #440]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 80033b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033b4:	6013      	str	r3, [r2, #0]
 80033b6:	e00b      	b.n	80033d0 <HAL_RCC_OscConfig+0xd4>
 80033b8:	4b6b      	ldr	r3, [pc, #428]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a6a      	ldr	r2, [pc, #424]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 80033be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033c2:	6013      	str	r3, [r2, #0]
 80033c4:	4b68      	ldr	r3, [pc, #416]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a67      	ldr	r2, [pc, #412]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 80033ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033ce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d013      	beq.n	8003400 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033d8:	f7ff fcd2 	bl	8002d80 <HAL_GetTick>
 80033dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033de:	e008      	b.n	80033f2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033e0:	f7ff fcce 	bl	8002d80 <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	2b64      	cmp	r3, #100	; 0x64
 80033ec:	d901      	bls.n	80033f2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e200      	b.n	80037f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033f2:	4b5d      	ldr	r3, [pc, #372]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d0f0      	beq.n	80033e0 <HAL_RCC_OscConfig+0xe4>
 80033fe:	e014      	b.n	800342a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003400:	f7ff fcbe 	bl	8002d80 <HAL_GetTick>
 8003404:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003406:	e008      	b.n	800341a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003408:	f7ff fcba 	bl	8002d80 <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	2b64      	cmp	r3, #100	; 0x64
 8003414:	d901      	bls.n	800341a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e1ec      	b.n	80037f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800341a:	4b53      	ldr	r3, [pc, #332]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d1f0      	bne.n	8003408 <HAL_RCC_OscConfig+0x10c>
 8003426:	e000      	b.n	800342a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003428:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0302 	and.w	r3, r3, #2
 8003432:	2b00      	cmp	r3, #0
 8003434:	d063      	beq.n	80034fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003436:	4b4c      	ldr	r3, [pc, #304]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f003 030c 	and.w	r3, r3, #12
 800343e:	2b00      	cmp	r3, #0
 8003440:	d00b      	beq.n	800345a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003442:	4b49      	ldr	r3, [pc, #292]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f003 030c 	and.w	r3, r3, #12
 800344a:	2b08      	cmp	r3, #8
 800344c:	d11c      	bne.n	8003488 <HAL_RCC_OscConfig+0x18c>
 800344e:	4b46      	ldr	r3, [pc, #280]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d116      	bne.n	8003488 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800345a:	4b43      	ldr	r3, [pc, #268]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0302 	and.w	r3, r3, #2
 8003462:	2b00      	cmp	r3, #0
 8003464:	d005      	beq.n	8003472 <HAL_RCC_OscConfig+0x176>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	691b      	ldr	r3, [r3, #16]
 800346a:	2b01      	cmp	r3, #1
 800346c:	d001      	beq.n	8003472 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e1c0      	b.n	80037f4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003472:	4b3d      	ldr	r3, [pc, #244]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	695b      	ldr	r3, [r3, #20]
 800347e:	00db      	lsls	r3, r3, #3
 8003480:	4939      	ldr	r1, [pc, #228]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 8003482:	4313      	orrs	r3, r2
 8003484:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003486:	e03a      	b.n	80034fe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	691b      	ldr	r3, [r3, #16]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d020      	beq.n	80034d2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003490:	4b36      	ldr	r3, [pc, #216]	; (800356c <HAL_RCC_OscConfig+0x270>)
 8003492:	2201      	movs	r2, #1
 8003494:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003496:	f7ff fc73 	bl	8002d80 <HAL_GetTick>
 800349a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800349c:	e008      	b.n	80034b0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800349e:	f7ff fc6f 	bl	8002d80 <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	d901      	bls.n	80034b0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80034ac:	2303      	movs	r3, #3
 80034ae:	e1a1      	b.n	80037f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034b0:	4b2d      	ldr	r3, [pc, #180]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0302 	and.w	r3, r3, #2
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d0f0      	beq.n	800349e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034bc:	4b2a      	ldr	r3, [pc, #168]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	695b      	ldr	r3, [r3, #20]
 80034c8:	00db      	lsls	r3, r3, #3
 80034ca:	4927      	ldr	r1, [pc, #156]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 80034cc:	4313      	orrs	r3, r2
 80034ce:	600b      	str	r3, [r1, #0]
 80034d0:	e015      	b.n	80034fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034d2:	4b26      	ldr	r3, [pc, #152]	; (800356c <HAL_RCC_OscConfig+0x270>)
 80034d4:	2200      	movs	r2, #0
 80034d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034d8:	f7ff fc52 	bl	8002d80 <HAL_GetTick>
 80034dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034de:	e008      	b.n	80034f2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034e0:	f7ff fc4e 	bl	8002d80 <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d901      	bls.n	80034f2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e180      	b.n	80037f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034f2:	4b1d      	ldr	r3, [pc, #116]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0302 	and.w	r3, r3, #2
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d1f0      	bne.n	80034e0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0308 	and.w	r3, r3, #8
 8003506:	2b00      	cmp	r3, #0
 8003508:	d03a      	beq.n	8003580 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	699b      	ldr	r3, [r3, #24]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d019      	beq.n	8003546 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003512:	4b17      	ldr	r3, [pc, #92]	; (8003570 <HAL_RCC_OscConfig+0x274>)
 8003514:	2201      	movs	r2, #1
 8003516:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003518:	f7ff fc32 	bl	8002d80 <HAL_GetTick>
 800351c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800351e:	e008      	b.n	8003532 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003520:	f7ff fc2e 	bl	8002d80 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	2b02      	cmp	r3, #2
 800352c:	d901      	bls.n	8003532 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e160      	b.n	80037f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003532:	4b0d      	ldr	r3, [pc, #52]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 8003534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003536:	f003 0302 	and.w	r3, r3, #2
 800353a:	2b00      	cmp	r3, #0
 800353c:	d0f0      	beq.n	8003520 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800353e:	2001      	movs	r0, #1
 8003540:	f000 fad8 	bl	8003af4 <RCC_Delay>
 8003544:	e01c      	b.n	8003580 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003546:	4b0a      	ldr	r3, [pc, #40]	; (8003570 <HAL_RCC_OscConfig+0x274>)
 8003548:	2200      	movs	r2, #0
 800354a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800354c:	f7ff fc18 	bl	8002d80 <HAL_GetTick>
 8003550:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003552:	e00f      	b.n	8003574 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003554:	f7ff fc14 	bl	8002d80 <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	2b02      	cmp	r3, #2
 8003560:	d908      	bls.n	8003574 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e146      	b.n	80037f4 <HAL_RCC_OscConfig+0x4f8>
 8003566:	bf00      	nop
 8003568:	40021000 	.word	0x40021000
 800356c:	42420000 	.word	0x42420000
 8003570:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003574:	4b92      	ldr	r3, [pc, #584]	; (80037c0 <HAL_RCC_OscConfig+0x4c4>)
 8003576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003578:	f003 0302 	and.w	r3, r3, #2
 800357c:	2b00      	cmp	r3, #0
 800357e:	d1e9      	bne.n	8003554 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 0304 	and.w	r3, r3, #4
 8003588:	2b00      	cmp	r3, #0
 800358a:	f000 80a6 	beq.w	80036da <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800358e:	2300      	movs	r3, #0
 8003590:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003592:	4b8b      	ldr	r3, [pc, #556]	; (80037c0 <HAL_RCC_OscConfig+0x4c4>)
 8003594:	69db      	ldr	r3, [r3, #28]
 8003596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d10d      	bne.n	80035ba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800359e:	4b88      	ldr	r3, [pc, #544]	; (80037c0 <HAL_RCC_OscConfig+0x4c4>)
 80035a0:	69db      	ldr	r3, [r3, #28]
 80035a2:	4a87      	ldr	r2, [pc, #540]	; (80037c0 <HAL_RCC_OscConfig+0x4c4>)
 80035a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035a8:	61d3      	str	r3, [r2, #28]
 80035aa:	4b85      	ldr	r3, [pc, #532]	; (80037c0 <HAL_RCC_OscConfig+0x4c4>)
 80035ac:	69db      	ldr	r3, [r3, #28]
 80035ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035b2:	60bb      	str	r3, [r7, #8]
 80035b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035b6:	2301      	movs	r3, #1
 80035b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ba:	4b82      	ldr	r3, [pc, #520]	; (80037c4 <HAL_RCC_OscConfig+0x4c8>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d118      	bne.n	80035f8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035c6:	4b7f      	ldr	r3, [pc, #508]	; (80037c4 <HAL_RCC_OscConfig+0x4c8>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a7e      	ldr	r2, [pc, #504]	; (80037c4 <HAL_RCC_OscConfig+0x4c8>)
 80035cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035d2:	f7ff fbd5 	bl	8002d80 <HAL_GetTick>
 80035d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035d8:	e008      	b.n	80035ec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035da:	f7ff fbd1 	bl	8002d80 <HAL_GetTick>
 80035de:	4602      	mov	r2, r0
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	2b64      	cmp	r3, #100	; 0x64
 80035e6:	d901      	bls.n	80035ec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80035e8:	2303      	movs	r3, #3
 80035ea:	e103      	b.n	80037f4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ec:	4b75      	ldr	r3, [pc, #468]	; (80037c4 <HAL_RCC_OscConfig+0x4c8>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d0f0      	beq.n	80035da <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d106      	bne.n	800360e <HAL_RCC_OscConfig+0x312>
 8003600:	4b6f      	ldr	r3, [pc, #444]	; (80037c0 <HAL_RCC_OscConfig+0x4c4>)
 8003602:	6a1b      	ldr	r3, [r3, #32]
 8003604:	4a6e      	ldr	r2, [pc, #440]	; (80037c0 <HAL_RCC_OscConfig+0x4c4>)
 8003606:	f043 0301 	orr.w	r3, r3, #1
 800360a:	6213      	str	r3, [r2, #32]
 800360c:	e02d      	b.n	800366a <HAL_RCC_OscConfig+0x36e>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d10c      	bne.n	8003630 <HAL_RCC_OscConfig+0x334>
 8003616:	4b6a      	ldr	r3, [pc, #424]	; (80037c0 <HAL_RCC_OscConfig+0x4c4>)
 8003618:	6a1b      	ldr	r3, [r3, #32]
 800361a:	4a69      	ldr	r2, [pc, #420]	; (80037c0 <HAL_RCC_OscConfig+0x4c4>)
 800361c:	f023 0301 	bic.w	r3, r3, #1
 8003620:	6213      	str	r3, [r2, #32]
 8003622:	4b67      	ldr	r3, [pc, #412]	; (80037c0 <HAL_RCC_OscConfig+0x4c4>)
 8003624:	6a1b      	ldr	r3, [r3, #32]
 8003626:	4a66      	ldr	r2, [pc, #408]	; (80037c0 <HAL_RCC_OscConfig+0x4c4>)
 8003628:	f023 0304 	bic.w	r3, r3, #4
 800362c:	6213      	str	r3, [r2, #32]
 800362e:	e01c      	b.n	800366a <HAL_RCC_OscConfig+0x36e>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	2b05      	cmp	r3, #5
 8003636:	d10c      	bne.n	8003652 <HAL_RCC_OscConfig+0x356>
 8003638:	4b61      	ldr	r3, [pc, #388]	; (80037c0 <HAL_RCC_OscConfig+0x4c4>)
 800363a:	6a1b      	ldr	r3, [r3, #32]
 800363c:	4a60      	ldr	r2, [pc, #384]	; (80037c0 <HAL_RCC_OscConfig+0x4c4>)
 800363e:	f043 0304 	orr.w	r3, r3, #4
 8003642:	6213      	str	r3, [r2, #32]
 8003644:	4b5e      	ldr	r3, [pc, #376]	; (80037c0 <HAL_RCC_OscConfig+0x4c4>)
 8003646:	6a1b      	ldr	r3, [r3, #32]
 8003648:	4a5d      	ldr	r2, [pc, #372]	; (80037c0 <HAL_RCC_OscConfig+0x4c4>)
 800364a:	f043 0301 	orr.w	r3, r3, #1
 800364e:	6213      	str	r3, [r2, #32]
 8003650:	e00b      	b.n	800366a <HAL_RCC_OscConfig+0x36e>
 8003652:	4b5b      	ldr	r3, [pc, #364]	; (80037c0 <HAL_RCC_OscConfig+0x4c4>)
 8003654:	6a1b      	ldr	r3, [r3, #32]
 8003656:	4a5a      	ldr	r2, [pc, #360]	; (80037c0 <HAL_RCC_OscConfig+0x4c4>)
 8003658:	f023 0301 	bic.w	r3, r3, #1
 800365c:	6213      	str	r3, [r2, #32]
 800365e:	4b58      	ldr	r3, [pc, #352]	; (80037c0 <HAL_RCC_OscConfig+0x4c4>)
 8003660:	6a1b      	ldr	r3, [r3, #32]
 8003662:	4a57      	ldr	r2, [pc, #348]	; (80037c0 <HAL_RCC_OscConfig+0x4c4>)
 8003664:	f023 0304 	bic.w	r3, r3, #4
 8003668:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d015      	beq.n	800369e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003672:	f7ff fb85 	bl	8002d80 <HAL_GetTick>
 8003676:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003678:	e00a      	b.n	8003690 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800367a:	f7ff fb81 	bl	8002d80 <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	f241 3288 	movw	r2, #5000	; 0x1388
 8003688:	4293      	cmp	r3, r2
 800368a:	d901      	bls.n	8003690 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800368c:	2303      	movs	r3, #3
 800368e:	e0b1      	b.n	80037f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003690:	4b4b      	ldr	r3, [pc, #300]	; (80037c0 <HAL_RCC_OscConfig+0x4c4>)
 8003692:	6a1b      	ldr	r3, [r3, #32]
 8003694:	f003 0302 	and.w	r3, r3, #2
 8003698:	2b00      	cmp	r3, #0
 800369a:	d0ee      	beq.n	800367a <HAL_RCC_OscConfig+0x37e>
 800369c:	e014      	b.n	80036c8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800369e:	f7ff fb6f 	bl	8002d80 <HAL_GetTick>
 80036a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036a4:	e00a      	b.n	80036bc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036a6:	f7ff fb6b 	bl	8002d80 <HAL_GetTick>
 80036aa:	4602      	mov	r2, r0
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d901      	bls.n	80036bc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	e09b      	b.n	80037f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036bc:	4b40      	ldr	r3, [pc, #256]	; (80037c0 <HAL_RCC_OscConfig+0x4c4>)
 80036be:	6a1b      	ldr	r3, [r3, #32]
 80036c0:	f003 0302 	and.w	r3, r3, #2
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d1ee      	bne.n	80036a6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80036c8:	7dfb      	ldrb	r3, [r7, #23]
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d105      	bne.n	80036da <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036ce:	4b3c      	ldr	r3, [pc, #240]	; (80037c0 <HAL_RCC_OscConfig+0x4c4>)
 80036d0:	69db      	ldr	r3, [r3, #28]
 80036d2:	4a3b      	ldr	r2, [pc, #236]	; (80037c0 <HAL_RCC_OscConfig+0x4c4>)
 80036d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036d8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	69db      	ldr	r3, [r3, #28]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	f000 8087 	beq.w	80037f2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036e4:	4b36      	ldr	r3, [pc, #216]	; (80037c0 <HAL_RCC_OscConfig+0x4c4>)
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f003 030c 	and.w	r3, r3, #12
 80036ec:	2b08      	cmp	r3, #8
 80036ee:	d061      	beq.n	80037b4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	69db      	ldr	r3, [r3, #28]
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	d146      	bne.n	8003786 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036f8:	4b33      	ldr	r3, [pc, #204]	; (80037c8 <HAL_RCC_OscConfig+0x4cc>)
 80036fa:	2200      	movs	r2, #0
 80036fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036fe:	f7ff fb3f 	bl	8002d80 <HAL_GetTick>
 8003702:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003704:	e008      	b.n	8003718 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003706:	f7ff fb3b 	bl	8002d80 <HAL_GetTick>
 800370a:	4602      	mov	r2, r0
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	2b02      	cmp	r3, #2
 8003712:	d901      	bls.n	8003718 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003714:	2303      	movs	r3, #3
 8003716:	e06d      	b.n	80037f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003718:	4b29      	ldr	r3, [pc, #164]	; (80037c0 <HAL_RCC_OscConfig+0x4c4>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003720:	2b00      	cmp	r3, #0
 8003722:	d1f0      	bne.n	8003706 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6a1b      	ldr	r3, [r3, #32]
 8003728:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800372c:	d108      	bne.n	8003740 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800372e:	4b24      	ldr	r3, [pc, #144]	; (80037c0 <HAL_RCC_OscConfig+0x4c4>)
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	4921      	ldr	r1, [pc, #132]	; (80037c0 <HAL_RCC_OscConfig+0x4c4>)
 800373c:	4313      	orrs	r3, r2
 800373e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003740:	4b1f      	ldr	r3, [pc, #124]	; (80037c0 <HAL_RCC_OscConfig+0x4c4>)
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6a19      	ldr	r1, [r3, #32]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003750:	430b      	orrs	r3, r1
 8003752:	491b      	ldr	r1, [pc, #108]	; (80037c0 <HAL_RCC_OscConfig+0x4c4>)
 8003754:	4313      	orrs	r3, r2
 8003756:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003758:	4b1b      	ldr	r3, [pc, #108]	; (80037c8 <HAL_RCC_OscConfig+0x4cc>)
 800375a:	2201      	movs	r2, #1
 800375c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800375e:	f7ff fb0f 	bl	8002d80 <HAL_GetTick>
 8003762:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003764:	e008      	b.n	8003778 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003766:	f7ff fb0b 	bl	8002d80 <HAL_GetTick>
 800376a:	4602      	mov	r2, r0
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	2b02      	cmp	r3, #2
 8003772:	d901      	bls.n	8003778 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e03d      	b.n	80037f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003778:	4b11      	ldr	r3, [pc, #68]	; (80037c0 <HAL_RCC_OscConfig+0x4c4>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d0f0      	beq.n	8003766 <HAL_RCC_OscConfig+0x46a>
 8003784:	e035      	b.n	80037f2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003786:	4b10      	ldr	r3, [pc, #64]	; (80037c8 <HAL_RCC_OscConfig+0x4cc>)
 8003788:	2200      	movs	r2, #0
 800378a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800378c:	f7ff faf8 	bl	8002d80 <HAL_GetTick>
 8003790:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003792:	e008      	b.n	80037a6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003794:	f7ff faf4 	bl	8002d80 <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d901      	bls.n	80037a6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e026      	b.n	80037f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037a6:	4b06      	ldr	r3, [pc, #24]	; (80037c0 <HAL_RCC_OscConfig+0x4c4>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d1f0      	bne.n	8003794 <HAL_RCC_OscConfig+0x498>
 80037b2:	e01e      	b.n	80037f2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	69db      	ldr	r3, [r3, #28]
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d107      	bne.n	80037cc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e019      	b.n	80037f4 <HAL_RCC_OscConfig+0x4f8>
 80037c0:	40021000 	.word	0x40021000
 80037c4:	40007000 	.word	0x40007000
 80037c8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80037cc:	4b0b      	ldr	r3, [pc, #44]	; (80037fc <HAL_RCC_OscConfig+0x500>)
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6a1b      	ldr	r3, [r3, #32]
 80037dc:	429a      	cmp	r2, r3
 80037de:	d106      	bne.n	80037ee <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d001      	beq.n	80037f2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e000      	b.n	80037f4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80037f2:	2300      	movs	r3, #0
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3718      	adds	r7, #24
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	40021000 	.word	0x40021000

08003800 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d101      	bne.n	8003814 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	e0d0      	b.n	80039b6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003814:	4b6a      	ldr	r3, [pc, #424]	; (80039c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0307 	and.w	r3, r3, #7
 800381c:	683a      	ldr	r2, [r7, #0]
 800381e:	429a      	cmp	r2, r3
 8003820:	d910      	bls.n	8003844 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003822:	4b67      	ldr	r3, [pc, #412]	; (80039c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f023 0207 	bic.w	r2, r3, #7
 800382a:	4965      	ldr	r1, [pc, #404]	; (80039c0 <HAL_RCC_ClockConfig+0x1c0>)
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	4313      	orrs	r3, r2
 8003830:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003832:	4b63      	ldr	r3, [pc, #396]	; (80039c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0307 	and.w	r3, r3, #7
 800383a:	683a      	ldr	r2, [r7, #0]
 800383c:	429a      	cmp	r2, r3
 800383e:	d001      	beq.n	8003844 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e0b8      	b.n	80039b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0302 	and.w	r3, r3, #2
 800384c:	2b00      	cmp	r3, #0
 800384e:	d020      	beq.n	8003892 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0304 	and.w	r3, r3, #4
 8003858:	2b00      	cmp	r3, #0
 800385a:	d005      	beq.n	8003868 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800385c:	4b59      	ldr	r3, [pc, #356]	; (80039c4 <HAL_RCC_ClockConfig+0x1c4>)
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	4a58      	ldr	r2, [pc, #352]	; (80039c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003862:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003866:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0308 	and.w	r3, r3, #8
 8003870:	2b00      	cmp	r3, #0
 8003872:	d005      	beq.n	8003880 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003874:	4b53      	ldr	r3, [pc, #332]	; (80039c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	4a52      	ldr	r2, [pc, #328]	; (80039c4 <HAL_RCC_ClockConfig+0x1c4>)
 800387a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800387e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003880:	4b50      	ldr	r3, [pc, #320]	; (80039c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	494d      	ldr	r1, [pc, #308]	; (80039c4 <HAL_RCC_ClockConfig+0x1c4>)
 800388e:	4313      	orrs	r3, r2
 8003890:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0301 	and.w	r3, r3, #1
 800389a:	2b00      	cmp	r3, #0
 800389c:	d040      	beq.n	8003920 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d107      	bne.n	80038b6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038a6:	4b47      	ldr	r3, [pc, #284]	; (80039c4 <HAL_RCC_ClockConfig+0x1c4>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d115      	bne.n	80038de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e07f      	b.n	80039b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d107      	bne.n	80038ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038be:	4b41      	ldr	r3, [pc, #260]	; (80039c4 <HAL_RCC_ClockConfig+0x1c4>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d109      	bne.n	80038de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e073      	b.n	80039b6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038ce:	4b3d      	ldr	r3, [pc, #244]	; (80039c4 <HAL_RCC_ClockConfig+0x1c4>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0302 	and.w	r3, r3, #2
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d101      	bne.n	80038de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e06b      	b.n	80039b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038de:	4b39      	ldr	r3, [pc, #228]	; (80039c4 <HAL_RCC_ClockConfig+0x1c4>)
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	f023 0203 	bic.w	r2, r3, #3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	4936      	ldr	r1, [pc, #216]	; (80039c4 <HAL_RCC_ClockConfig+0x1c4>)
 80038ec:	4313      	orrs	r3, r2
 80038ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038f0:	f7ff fa46 	bl	8002d80 <HAL_GetTick>
 80038f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038f6:	e00a      	b.n	800390e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038f8:	f7ff fa42 	bl	8002d80 <HAL_GetTick>
 80038fc:	4602      	mov	r2, r0
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	f241 3288 	movw	r2, #5000	; 0x1388
 8003906:	4293      	cmp	r3, r2
 8003908:	d901      	bls.n	800390e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	e053      	b.n	80039b6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800390e:	4b2d      	ldr	r3, [pc, #180]	; (80039c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	f003 020c 	and.w	r2, r3, #12
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	429a      	cmp	r2, r3
 800391e:	d1eb      	bne.n	80038f8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003920:	4b27      	ldr	r3, [pc, #156]	; (80039c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0307 	and.w	r3, r3, #7
 8003928:	683a      	ldr	r2, [r7, #0]
 800392a:	429a      	cmp	r2, r3
 800392c:	d210      	bcs.n	8003950 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800392e:	4b24      	ldr	r3, [pc, #144]	; (80039c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f023 0207 	bic.w	r2, r3, #7
 8003936:	4922      	ldr	r1, [pc, #136]	; (80039c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	4313      	orrs	r3, r2
 800393c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800393e:	4b20      	ldr	r3, [pc, #128]	; (80039c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0307 	and.w	r3, r3, #7
 8003946:	683a      	ldr	r2, [r7, #0]
 8003948:	429a      	cmp	r2, r3
 800394a:	d001      	beq.n	8003950 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e032      	b.n	80039b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0304 	and.w	r3, r3, #4
 8003958:	2b00      	cmp	r3, #0
 800395a:	d008      	beq.n	800396e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800395c:	4b19      	ldr	r3, [pc, #100]	; (80039c4 <HAL_RCC_ClockConfig+0x1c4>)
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	4916      	ldr	r1, [pc, #88]	; (80039c4 <HAL_RCC_ClockConfig+0x1c4>)
 800396a:	4313      	orrs	r3, r2
 800396c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0308 	and.w	r3, r3, #8
 8003976:	2b00      	cmp	r3, #0
 8003978:	d009      	beq.n	800398e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800397a:	4b12      	ldr	r3, [pc, #72]	; (80039c4 <HAL_RCC_ClockConfig+0x1c4>)
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	00db      	lsls	r3, r3, #3
 8003988:	490e      	ldr	r1, [pc, #56]	; (80039c4 <HAL_RCC_ClockConfig+0x1c4>)
 800398a:	4313      	orrs	r3, r2
 800398c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800398e:	f000 f821 	bl	80039d4 <HAL_RCC_GetSysClockFreq>
 8003992:	4602      	mov	r2, r0
 8003994:	4b0b      	ldr	r3, [pc, #44]	; (80039c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	091b      	lsrs	r3, r3, #4
 800399a:	f003 030f 	and.w	r3, r3, #15
 800399e:	490a      	ldr	r1, [pc, #40]	; (80039c8 <HAL_RCC_ClockConfig+0x1c8>)
 80039a0:	5ccb      	ldrb	r3, [r1, r3]
 80039a2:	fa22 f303 	lsr.w	r3, r2, r3
 80039a6:	4a09      	ldr	r2, [pc, #36]	; (80039cc <HAL_RCC_ClockConfig+0x1cc>)
 80039a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80039aa:	4b09      	ldr	r3, [pc, #36]	; (80039d0 <HAL_RCC_ClockConfig+0x1d0>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4618      	mov	r0, r3
 80039b0:	f7ff f9a4 	bl	8002cfc <HAL_InitTick>

  return HAL_OK;
 80039b4:	2300      	movs	r3, #0
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3710      	adds	r7, #16
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	40022000 	.word	0x40022000
 80039c4:	40021000 	.word	0x40021000
 80039c8:	08004fc0 	.word	0x08004fc0
 80039cc:	20000000 	.word	0x20000000
 80039d0:	20000004 	.word	0x20000004

080039d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039d4:	b490      	push	{r4, r7}
 80039d6:	b08a      	sub	sp, #40	; 0x28
 80039d8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80039da:	4b29      	ldr	r3, [pc, #164]	; (8003a80 <HAL_RCC_GetSysClockFreq+0xac>)
 80039dc:	1d3c      	adds	r4, r7, #4
 80039de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80039e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80039e4:	f240 2301 	movw	r3, #513	; 0x201
 80039e8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80039ea:	2300      	movs	r3, #0
 80039ec:	61fb      	str	r3, [r7, #28]
 80039ee:	2300      	movs	r3, #0
 80039f0:	61bb      	str	r3, [r7, #24]
 80039f2:	2300      	movs	r3, #0
 80039f4:	627b      	str	r3, [r7, #36]	; 0x24
 80039f6:	2300      	movs	r3, #0
 80039f8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80039fa:	2300      	movs	r3, #0
 80039fc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80039fe:	4b21      	ldr	r3, [pc, #132]	; (8003a84 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a04:	69fb      	ldr	r3, [r7, #28]
 8003a06:	f003 030c 	and.w	r3, r3, #12
 8003a0a:	2b04      	cmp	r3, #4
 8003a0c:	d002      	beq.n	8003a14 <HAL_RCC_GetSysClockFreq+0x40>
 8003a0e:	2b08      	cmp	r3, #8
 8003a10:	d003      	beq.n	8003a1a <HAL_RCC_GetSysClockFreq+0x46>
 8003a12:	e02b      	b.n	8003a6c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a14:	4b1c      	ldr	r3, [pc, #112]	; (8003a88 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003a16:	623b      	str	r3, [r7, #32]
      break;
 8003a18:	e02b      	b.n	8003a72 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	0c9b      	lsrs	r3, r3, #18
 8003a1e:	f003 030f 	and.w	r3, r3, #15
 8003a22:	3328      	adds	r3, #40	; 0x28
 8003a24:	443b      	add	r3, r7
 8003a26:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003a2a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d012      	beq.n	8003a5c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003a36:	4b13      	ldr	r3, [pc, #76]	; (8003a84 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	0c5b      	lsrs	r3, r3, #17
 8003a3c:	f003 0301 	and.w	r3, r3, #1
 8003a40:	3328      	adds	r3, #40	; 0x28
 8003a42:	443b      	add	r3, r7
 8003a44:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003a48:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	4a0e      	ldr	r2, [pc, #56]	; (8003a88 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003a4e:	fb03 f202 	mul.w	r2, r3, r2
 8003a52:	69bb      	ldr	r3, [r7, #24]
 8003a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a58:	627b      	str	r3, [r7, #36]	; 0x24
 8003a5a:	e004      	b.n	8003a66 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	4a0b      	ldr	r2, [pc, #44]	; (8003a8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a60:	fb02 f303 	mul.w	r3, r2, r3
 8003a64:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a68:	623b      	str	r3, [r7, #32]
      break;
 8003a6a:	e002      	b.n	8003a72 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003a6c:	4b06      	ldr	r3, [pc, #24]	; (8003a88 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003a6e:	623b      	str	r3, [r7, #32]
      break;
 8003a70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a72:	6a3b      	ldr	r3, [r7, #32]
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3728      	adds	r7, #40	; 0x28
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bc90      	pop	{r4, r7}
 8003a7c:	4770      	bx	lr
 8003a7e:	bf00      	nop
 8003a80:	08004fb0 	.word	0x08004fb0
 8003a84:	40021000 	.word	0x40021000
 8003a88:	007a1200 	.word	0x007a1200
 8003a8c:	003d0900 	.word	0x003d0900

08003a90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a90:	b480      	push	{r7}
 8003a92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a94:	4b02      	ldr	r3, [pc, #8]	; (8003aa0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003a96:	681b      	ldr	r3, [r3, #0]
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bc80      	pop	{r7}
 8003a9e:	4770      	bx	lr
 8003aa0:	20000000 	.word	0x20000000

08003aa4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003aa8:	f7ff fff2 	bl	8003a90 <HAL_RCC_GetHCLKFreq>
 8003aac:	4602      	mov	r2, r0
 8003aae:	4b05      	ldr	r3, [pc, #20]	; (8003ac4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	0a1b      	lsrs	r3, r3, #8
 8003ab4:	f003 0307 	and.w	r3, r3, #7
 8003ab8:	4903      	ldr	r1, [pc, #12]	; (8003ac8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003aba:	5ccb      	ldrb	r3, [r1, r3]
 8003abc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	40021000 	.word	0x40021000
 8003ac8:	08004fd0 	.word	0x08004fd0

08003acc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003ad0:	f7ff ffde 	bl	8003a90 <HAL_RCC_GetHCLKFreq>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	4b05      	ldr	r3, [pc, #20]	; (8003aec <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	0adb      	lsrs	r3, r3, #11
 8003adc:	f003 0307 	and.w	r3, r3, #7
 8003ae0:	4903      	ldr	r1, [pc, #12]	; (8003af0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ae2:	5ccb      	ldrb	r3, [r1, r3]
 8003ae4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	40021000 	.word	0x40021000
 8003af0:	08004fd0 	.word	0x08004fd0

08003af4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b085      	sub	sp, #20
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003afc:	4b0a      	ldr	r3, [pc, #40]	; (8003b28 <RCC_Delay+0x34>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a0a      	ldr	r2, [pc, #40]	; (8003b2c <RCC_Delay+0x38>)
 8003b02:	fba2 2303 	umull	r2, r3, r2, r3
 8003b06:	0a5b      	lsrs	r3, r3, #9
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	fb02 f303 	mul.w	r3, r2, r3
 8003b0e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003b10:	bf00      	nop
  }
  while (Delay --);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	1e5a      	subs	r2, r3, #1
 8003b16:	60fa      	str	r2, [r7, #12]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d1f9      	bne.n	8003b10 <RCC_Delay+0x1c>
}
 8003b1c:	bf00      	nop
 8003b1e:	bf00      	nop
 8003b20:	3714      	adds	r7, #20
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bc80      	pop	{r7}
 8003b26:	4770      	bx	lr
 8003b28:	20000000 	.word	0x20000000
 8003b2c:	10624dd3 	.word	0x10624dd3

08003b30 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b082      	sub	sp, #8
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d101      	bne.n	8003b42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e03f      	b.n	8003bc2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d106      	bne.n	8003b5c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f7fc ff20 	bl	800099c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2224      	movs	r2, #36	; 0x24
 8003b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	68da      	ldr	r2, [r3, #12]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b72:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f000 f9a7 	bl	8003ec8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	691a      	ldr	r2, [r3, #16]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b88:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	695a      	ldr	r2, [r3, #20]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b98:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	68da      	ldr	r2, [r3, #12]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ba8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2220      	movs	r2, #32
 8003bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2220      	movs	r2, #32
 8003bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003bc0:	2300      	movs	r3, #0
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3708      	adds	r7, #8
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}

08003bca <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bca:	b580      	push	{r7, lr}
 8003bcc:	b08a      	sub	sp, #40	; 0x28
 8003bce:	af02      	add	r7, sp, #8
 8003bd0:	60f8      	str	r0, [r7, #12]
 8003bd2:	60b9      	str	r1, [r7, #8]
 8003bd4:	603b      	str	r3, [r7, #0]
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	2b20      	cmp	r3, #32
 8003be8:	d17c      	bne.n	8003ce4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d002      	beq.n	8003bf6 <HAL_UART_Transmit+0x2c>
 8003bf0:	88fb      	ldrh	r3, [r7, #6]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d101      	bne.n	8003bfa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e075      	b.n	8003ce6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d101      	bne.n	8003c08 <HAL_UART_Transmit+0x3e>
 8003c04:	2302      	movs	r3, #2
 8003c06:	e06e      	b.n	8003ce6 <HAL_UART_Transmit+0x11c>
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2200      	movs	r2, #0
 8003c14:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2221      	movs	r2, #33	; 0x21
 8003c1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c1e:	f7ff f8af 	bl	8002d80 <HAL_GetTick>
 8003c22:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	88fa      	ldrh	r2, [r7, #6]
 8003c28:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	88fa      	ldrh	r2, [r7, #6]
 8003c2e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c38:	d108      	bne.n	8003c4c <HAL_UART_Transmit+0x82>
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	691b      	ldr	r3, [r3, #16]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d104      	bne.n	8003c4c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003c42:	2300      	movs	r3, #0
 8003c44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	61bb      	str	r3, [r7, #24]
 8003c4a:	e003      	b.n	8003c54 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c50:	2300      	movs	r3, #0
 8003c52:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2200      	movs	r2, #0
 8003c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003c5c:	e02a      	b.n	8003cb4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	9300      	str	r3, [sp, #0]
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	2200      	movs	r2, #0
 8003c66:	2180      	movs	r1, #128	; 0x80
 8003c68:	68f8      	ldr	r0, [r7, #12]
 8003c6a:	f000 f8e2 	bl	8003e32 <UART_WaitOnFlagUntilTimeout>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d001      	beq.n	8003c78 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003c74:	2303      	movs	r3, #3
 8003c76:	e036      	b.n	8003ce6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d10b      	bne.n	8003c96 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c7e:	69bb      	ldr	r3, [r7, #24]
 8003c80:	881b      	ldrh	r3, [r3, #0]
 8003c82:	461a      	mov	r2, r3
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c8c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	3302      	adds	r3, #2
 8003c92:	61bb      	str	r3, [r7, #24]
 8003c94:	e007      	b.n	8003ca6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	781a      	ldrb	r2, [r3, #0]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	3301      	adds	r3, #1
 8003ca4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	3b01      	subs	r3, #1
 8003cae:	b29a      	uxth	r2, r3
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d1cf      	bne.n	8003c5e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	9300      	str	r3, [sp, #0]
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	2140      	movs	r1, #64	; 0x40
 8003cc8:	68f8      	ldr	r0, [r7, #12]
 8003cca:	f000 f8b2 	bl	8003e32 <UART_WaitOnFlagUntilTimeout>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d001      	beq.n	8003cd8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	e006      	b.n	8003ce6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2220      	movs	r2, #32
 8003cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	e000      	b.n	8003ce6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003ce4:	2302      	movs	r3, #2
  }
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3720      	adds	r7, #32
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}

08003cee <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cee:	b580      	push	{r7, lr}
 8003cf0:	b08a      	sub	sp, #40	; 0x28
 8003cf2:	af02      	add	r7, sp, #8
 8003cf4:	60f8      	str	r0, [r7, #12]
 8003cf6:	60b9      	str	r1, [r7, #8]
 8003cf8:	603b      	str	r3, [r7, #0]
 8003cfa:	4613      	mov	r3, r2
 8003cfc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	2b20      	cmp	r3, #32
 8003d0c:	f040 808c 	bne.w	8003e28 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d002      	beq.n	8003d1c <HAL_UART_Receive+0x2e>
 8003d16:	88fb      	ldrh	r3, [r7, #6]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d101      	bne.n	8003d20 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e084      	b.n	8003e2a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d101      	bne.n	8003d2e <HAL_UART_Receive+0x40>
 8003d2a:	2302      	movs	r3, #2
 8003d2c:	e07d      	b.n	8003e2a <HAL_UART_Receive+0x13c>
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2201      	movs	r2, #1
 8003d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2222      	movs	r2, #34	; 0x22
 8003d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2200      	movs	r2, #0
 8003d48:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d4a:	f7ff f819 	bl	8002d80 <HAL_GetTick>
 8003d4e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	88fa      	ldrh	r2, [r7, #6]
 8003d54:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	88fa      	ldrh	r2, [r7, #6]
 8003d5a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d64:	d108      	bne.n	8003d78 <HAL_UART_Receive+0x8a>
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	691b      	ldr	r3, [r3, #16]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d104      	bne.n	8003d78 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	61bb      	str	r3, [r7, #24]
 8003d76:	e003      	b.n	8003d80 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003d88:	e043      	b.n	8003e12 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	9300      	str	r3, [sp, #0]
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	2200      	movs	r2, #0
 8003d92:	2120      	movs	r1, #32
 8003d94:	68f8      	ldr	r0, [r7, #12]
 8003d96:	f000 f84c 	bl	8003e32 <UART_WaitOnFlagUntilTimeout>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d001      	beq.n	8003da4 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003da0:	2303      	movs	r3, #3
 8003da2:	e042      	b.n	8003e2a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003da4:	69fb      	ldr	r3, [r7, #28]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d10c      	bne.n	8003dc4 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003db6:	b29a      	uxth	r2, r3
 8003db8:	69bb      	ldr	r3, [r7, #24]
 8003dba:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003dbc:	69bb      	ldr	r3, [r7, #24]
 8003dbe:	3302      	adds	r3, #2
 8003dc0:	61bb      	str	r3, [r7, #24]
 8003dc2:	e01f      	b.n	8003e04 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dcc:	d007      	beq.n	8003dde <HAL_UART_Receive+0xf0>
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d10a      	bne.n	8003dec <HAL_UART_Receive+0xfe>
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	691b      	ldr	r3, [r3, #16]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d106      	bne.n	8003dec <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	b2da      	uxtb	r2, r3
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	701a      	strb	r2, [r3, #0]
 8003dea:	e008      	b.n	8003dfe <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003df8:	b2da      	uxtb	r2, r3
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	3301      	adds	r3, #1
 8003e02:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	3b01      	subs	r3, #1
 8003e0c:	b29a      	uxth	r2, r3
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d1b6      	bne.n	8003d8a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2220      	movs	r2, #32
 8003e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003e24:	2300      	movs	r3, #0
 8003e26:	e000      	b.n	8003e2a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003e28:	2302      	movs	r3, #2
  }
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3720      	adds	r7, #32
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}

08003e32 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003e32:	b580      	push	{r7, lr}
 8003e34:	b084      	sub	sp, #16
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	60f8      	str	r0, [r7, #12]
 8003e3a:	60b9      	str	r1, [r7, #8]
 8003e3c:	603b      	str	r3, [r7, #0]
 8003e3e:	4613      	mov	r3, r2
 8003e40:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e42:	e02c      	b.n	8003e9e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e44:	69bb      	ldr	r3, [r7, #24]
 8003e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e4a:	d028      	beq.n	8003e9e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003e4c:	69bb      	ldr	r3, [r7, #24]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d007      	beq.n	8003e62 <UART_WaitOnFlagUntilTimeout+0x30>
 8003e52:	f7fe ff95 	bl	8002d80 <HAL_GetTick>
 8003e56:	4602      	mov	r2, r0
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	1ad3      	subs	r3, r2, r3
 8003e5c:	69ba      	ldr	r2, [r7, #24]
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d21d      	bcs.n	8003e9e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	68da      	ldr	r2, [r3, #12]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003e70:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	695a      	ldr	r2, [r3, #20]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f022 0201 	bic.w	r2, r2, #1
 8003e80:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2220      	movs	r2, #32
 8003e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2220      	movs	r2, #32
 8003e8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2200      	movs	r2, #0
 8003e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	e00f      	b.n	8003ebe <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	68ba      	ldr	r2, [r7, #8]
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	bf0c      	ite	eq
 8003eae:	2301      	moveq	r3, #1
 8003eb0:	2300      	movne	r3, #0
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	79fb      	ldrb	r3, [r7, #7]
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d0c3      	beq.n	8003e44 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3710      	adds	r7, #16
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
	...

08003ec8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	691b      	ldr	r3, [r3, #16]
 8003ed6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	68da      	ldr	r2, [r3, #12]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	430a      	orrs	r2, r1
 8003ee4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	689a      	ldr	r2, [r3, #8]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	691b      	ldr	r3, [r3, #16]
 8003eee:	431a      	orrs	r2, r3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	695b      	ldr	r3, [r3, #20]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003f02:	f023 030c 	bic.w	r3, r3, #12
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	6812      	ldr	r2, [r2, #0]
 8003f0a:	68b9      	ldr	r1, [r7, #8]
 8003f0c:	430b      	orrs	r3, r1
 8003f0e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	695b      	ldr	r3, [r3, #20]
 8003f16:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	699a      	ldr	r2, [r3, #24]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	430a      	orrs	r2, r1
 8003f24:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a2c      	ldr	r2, [pc, #176]	; (8003fdc <UART_SetConfig+0x114>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d103      	bne.n	8003f38 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003f30:	f7ff fdcc 	bl	8003acc <HAL_RCC_GetPCLK2Freq>
 8003f34:	60f8      	str	r0, [r7, #12]
 8003f36:	e002      	b.n	8003f3e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003f38:	f7ff fdb4 	bl	8003aa4 <HAL_RCC_GetPCLK1Freq>
 8003f3c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f3e:	68fa      	ldr	r2, [r7, #12]
 8003f40:	4613      	mov	r3, r2
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	4413      	add	r3, r2
 8003f46:	009a      	lsls	r2, r3, #2
 8003f48:	441a      	add	r2, r3
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f54:	4a22      	ldr	r2, [pc, #136]	; (8003fe0 <UART_SetConfig+0x118>)
 8003f56:	fba2 2303 	umull	r2, r3, r2, r3
 8003f5a:	095b      	lsrs	r3, r3, #5
 8003f5c:	0119      	lsls	r1, r3, #4
 8003f5e:	68fa      	ldr	r2, [r7, #12]
 8003f60:	4613      	mov	r3, r2
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	4413      	add	r3, r2
 8003f66:	009a      	lsls	r2, r3, #2
 8003f68:	441a      	add	r2, r3
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f74:	4b1a      	ldr	r3, [pc, #104]	; (8003fe0 <UART_SetConfig+0x118>)
 8003f76:	fba3 0302 	umull	r0, r3, r3, r2
 8003f7a:	095b      	lsrs	r3, r3, #5
 8003f7c:	2064      	movs	r0, #100	; 0x64
 8003f7e:	fb00 f303 	mul.w	r3, r0, r3
 8003f82:	1ad3      	subs	r3, r2, r3
 8003f84:	011b      	lsls	r3, r3, #4
 8003f86:	3332      	adds	r3, #50	; 0x32
 8003f88:	4a15      	ldr	r2, [pc, #84]	; (8003fe0 <UART_SetConfig+0x118>)
 8003f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f8e:	095b      	lsrs	r3, r3, #5
 8003f90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f94:	4419      	add	r1, r3
 8003f96:	68fa      	ldr	r2, [r7, #12]
 8003f98:	4613      	mov	r3, r2
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	4413      	add	r3, r2
 8003f9e:	009a      	lsls	r2, r3, #2
 8003fa0:	441a      	add	r2, r3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003fac:	4b0c      	ldr	r3, [pc, #48]	; (8003fe0 <UART_SetConfig+0x118>)
 8003fae:	fba3 0302 	umull	r0, r3, r3, r2
 8003fb2:	095b      	lsrs	r3, r3, #5
 8003fb4:	2064      	movs	r0, #100	; 0x64
 8003fb6:	fb00 f303 	mul.w	r3, r0, r3
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	011b      	lsls	r3, r3, #4
 8003fbe:	3332      	adds	r3, #50	; 0x32
 8003fc0:	4a07      	ldr	r2, [pc, #28]	; (8003fe0 <UART_SetConfig+0x118>)
 8003fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fc6:	095b      	lsrs	r3, r3, #5
 8003fc8:	f003 020f 	and.w	r2, r3, #15
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	440a      	add	r2, r1
 8003fd2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003fd4:	bf00      	nop
 8003fd6:	3710      	adds	r7, #16
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	40013800 	.word	0x40013800
 8003fe0:	51eb851f 	.word	0x51eb851f

08003fe4 <__errno>:
 8003fe4:	4b01      	ldr	r3, [pc, #4]	; (8003fec <__errno+0x8>)
 8003fe6:	6818      	ldr	r0, [r3, #0]
 8003fe8:	4770      	bx	lr
 8003fea:	bf00      	nop
 8003fec:	2000000c 	.word	0x2000000c

08003ff0 <__libc_init_array>:
 8003ff0:	b570      	push	{r4, r5, r6, lr}
 8003ff2:	2600      	movs	r6, #0
 8003ff4:	4d0c      	ldr	r5, [pc, #48]	; (8004028 <__libc_init_array+0x38>)
 8003ff6:	4c0d      	ldr	r4, [pc, #52]	; (800402c <__libc_init_array+0x3c>)
 8003ff8:	1b64      	subs	r4, r4, r5
 8003ffa:	10a4      	asrs	r4, r4, #2
 8003ffc:	42a6      	cmp	r6, r4
 8003ffe:	d109      	bne.n	8004014 <__libc_init_array+0x24>
 8004000:	f000 ffb6 	bl	8004f70 <_init>
 8004004:	2600      	movs	r6, #0
 8004006:	4d0a      	ldr	r5, [pc, #40]	; (8004030 <__libc_init_array+0x40>)
 8004008:	4c0a      	ldr	r4, [pc, #40]	; (8004034 <__libc_init_array+0x44>)
 800400a:	1b64      	subs	r4, r4, r5
 800400c:	10a4      	asrs	r4, r4, #2
 800400e:	42a6      	cmp	r6, r4
 8004010:	d105      	bne.n	800401e <__libc_init_array+0x2e>
 8004012:	bd70      	pop	{r4, r5, r6, pc}
 8004014:	f855 3b04 	ldr.w	r3, [r5], #4
 8004018:	4798      	blx	r3
 800401a:	3601      	adds	r6, #1
 800401c:	e7ee      	b.n	8003ffc <__libc_init_array+0xc>
 800401e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004022:	4798      	blx	r3
 8004024:	3601      	adds	r6, #1
 8004026:	e7f2      	b.n	800400e <__libc_init_array+0x1e>
 8004028:	080050e4 	.word	0x080050e4
 800402c:	080050e4 	.word	0x080050e4
 8004030:	080050e4 	.word	0x080050e4
 8004034:	080050e8 	.word	0x080050e8

08004038 <memset>:
 8004038:	4603      	mov	r3, r0
 800403a:	4402      	add	r2, r0
 800403c:	4293      	cmp	r3, r2
 800403e:	d100      	bne.n	8004042 <memset+0xa>
 8004040:	4770      	bx	lr
 8004042:	f803 1b01 	strb.w	r1, [r3], #1
 8004046:	e7f9      	b.n	800403c <memset+0x4>

08004048 <iprintf>:
 8004048:	b40f      	push	{r0, r1, r2, r3}
 800404a:	4b0a      	ldr	r3, [pc, #40]	; (8004074 <iprintf+0x2c>)
 800404c:	b513      	push	{r0, r1, r4, lr}
 800404e:	681c      	ldr	r4, [r3, #0]
 8004050:	b124      	cbz	r4, 800405c <iprintf+0x14>
 8004052:	69a3      	ldr	r3, [r4, #24]
 8004054:	b913      	cbnz	r3, 800405c <iprintf+0x14>
 8004056:	4620      	mov	r0, r4
 8004058:	f000 f866 	bl	8004128 <__sinit>
 800405c:	ab05      	add	r3, sp, #20
 800405e:	4620      	mov	r0, r4
 8004060:	9a04      	ldr	r2, [sp, #16]
 8004062:	68a1      	ldr	r1, [r4, #8]
 8004064:	9301      	str	r3, [sp, #4]
 8004066:	f000 f9bb 	bl	80043e0 <_vfiprintf_r>
 800406a:	b002      	add	sp, #8
 800406c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004070:	b004      	add	sp, #16
 8004072:	4770      	bx	lr
 8004074:	2000000c 	.word	0x2000000c

08004078 <std>:
 8004078:	2300      	movs	r3, #0
 800407a:	b510      	push	{r4, lr}
 800407c:	4604      	mov	r4, r0
 800407e:	e9c0 3300 	strd	r3, r3, [r0]
 8004082:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004086:	6083      	str	r3, [r0, #8]
 8004088:	8181      	strh	r1, [r0, #12]
 800408a:	6643      	str	r3, [r0, #100]	; 0x64
 800408c:	81c2      	strh	r2, [r0, #14]
 800408e:	6183      	str	r3, [r0, #24]
 8004090:	4619      	mov	r1, r3
 8004092:	2208      	movs	r2, #8
 8004094:	305c      	adds	r0, #92	; 0x5c
 8004096:	f7ff ffcf 	bl	8004038 <memset>
 800409a:	4b05      	ldr	r3, [pc, #20]	; (80040b0 <std+0x38>)
 800409c:	6224      	str	r4, [r4, #32]
 800409e:	6263      	str	r3, [r4, #36]	; 0x24
 80040a0:	4b04      	ldr	r3, [pc, #16]	; (80040b4 <std+0x3c>)
 80040a2:	62a3      	str	r3, [r4, #40]	; 0x28
 80040a4:	4b04      	ldr	r3, [pc, #16]	; (80040b8 <std+0x40>)
 80040a6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80040a8:	4b04      	ldr	r3, [pc, #16]	; (80040bc <std+0x44>)
 80040aa:	6323      	str	r3, [r4, #48]	; 0x30
 80040ac:	bd10      	pop	{r4, pc}
 80040ae:	bf00      	nop
 80040b0:	0800498d 	.word	0x0800498d
 80040b4:	080049af 	.word	0x080049af
 80040b8:	080049e7 	.word	0x080049e7
 80040bc:	08004a0b 	.word	0x08004a0b

080040c0 <_cleanup_r>:
 80040c0:	4901      	ldr	r1, [pc, #4]	; (80040c8 <_cleanup_r+0x8>)
 80040c2:	f000 b8af 	b.w	8004224 <_fwalk_reent>
 80040c6:	bf00      	nop
 80040c8:	08004cdd 	.word	0x08004cdd

080040cc <__sfmoreglue>:
 80040cc:	2268      	movs	r2, #104	; 0x68
 80040ce:	b570      	push	{r4, r5, r6, lr}
 80040d0:	1e4d      	subs	r5, r1, #1
 80040d2:	4355      	muls	r5, r2
 80040d4:	460e      	mov	r6, r1
 80040d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80040da:	f000 f8e5 	bl	80042a8 <_malloc_r>
 80040de:	4604      	mov	r4, r0
 80040e0:	b140      	cbz	r0, 80040f4 <__sfmoreglue+0x28>
 80040e2:	2100      	movs	r1, #0
 80040e4:	e9c0 1600 	strd	r1, r6, [r0]
 80040e8:	300c      	adds	r0, #12
 80040ea:	60a0      	str	r0, [r4, #8]
 80040ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80040f0:	f7ff ffa2 	bl	8004038 <memset>
 80040f4:	4620      	mov	r0, r4
 80040f6:	bd70      	pop	{r4, r5, r6, pc}

080040f8 <__sfp_lock_acquire>:
 80040f8:	4801      	ldr	r0, [pc, #4]	; (8004100 <__sfp_lock_acquire+0x8>)
 80040fa:	f000 b8b3 	b.w	8004264 <__retarget_lock_acquire_recursive>
 80040fe:	bf00      	nop
 8004100:	20000281 	.word	0x20000281

08004104 <__sfp_lock_release>:
 8004104:	4801      	ldr	r0, [pc, #4]	; (800410c <__sfp_lock_release+0x8>)
 8004106:	f000 b8ae 	b.w	8004266 <__retarget_lock_release_recursive>
 800410a:	bf00      	nop
 800410c:	20000281 	.word	0x20000281

08004110 <__sinit_lock_acquire>:
 8004110:	4801      	ldr	r0, [pc, #4]	; (8004118 <__sinit_lock_acquire+0x8>)
 8004112:	f000 b8a7 	b.w	8004264 <__retarget_lock_acquire_recursive>
 8004116:	bf00      	nop
 8004118:	20000282 	.word	0x20000282

0800411c <__sinit_lock_release>:
 800411c:	4801      	ldr	r0, [pc, #4]	; (8004124 <__sinit_lock_release+0x8>)
 800411e:	f000 b8a2 	b.w	8004266 <__retarget_lock_release_recursive>
 8004122:	bf00      	nop
 8004124:	20000282 	.word	0x20000282

08004128 <__sinit>:
 8004128:	b510      	push	{r4, lr}
 800412a:	4604      	mov	r4, r0
 800412c:	f7ff fff0 	bl	8004110 <__sinit_lock_acquire>
 8004130:	69a3      	ldr	r3, [r4, #24]
 8004132:	b11b      	cbz	r3, 800413c <__sinit+0x14>
 8004134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004138:	f7ff bff0 	b.w	800411c <__sinit_lock_release>
 800413c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004140:	6523      	str	r3, [r4, #80]	; 0x50
 8004142:	4b13      	ldr	r3, [pc, #76]	; (8004190 <__sinit+0x68>)
 8004144:	4a13      	ldr	r2, [pc, #76]	; (8004194 <__sinit+0x6c>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	62a2      	str	r2, [r4, #40]	; 0x28
 800414a:	42a3      	cmp	r3, r4
 800414c:	bf08      	it	eq
 800414e:	2301      	moveq	r3, #1
 8004150:	4620      	mov	r0, r4
 8004152:	bf08      	it	eq
 8004154:	61a3      	streq	r3, [r4, #24]
 8004156:	f000 f81f 	bl	8004198 <__sfp>
 800415a:	6060      	str	r0, [r4, #4]
 800415c:	4620      	mov	r0, r4
 800415e:	f000 f81b 	bl	8004198 <__sfp>
 8004162:	60a0      	str	r0, [r4, #8]
 8004164:	4620      	mov	r0, r4
 8004166:	f000 f817 	bl	8004198 <__sfp>
 800416a:	2200      	movs	r2, #0
 800416c:	2104      	movs	r1, #4
 800416e:	60e0      	str	r0, [r4, #12]
 8004170:	6860      	ldr	r0, [r4, #4]
 8004172:	f7ff ff81 	bl	8004078 <std>
 8004176:	2201      	movs	r2, #1
 8004178:	2109      	movs	r1, #9
 800417a:	68a0      	ldr	r0, [r4, #8]
 800417c:	f7ff ff7c 	bl	8004078 <std>
 8004180:	2202      	movs	r2, #2
 8004182:	2112      	movs	r1, #18
 8004184:	68e0      	ldr	r0, [r4, #12]
 8004186:	f7ff ff77 	bl	8004078 <std>
 800418a:	2301      	movs	r3, #1
 800418c:	61a3      	str	r3, [r4, #24]
 800418e:	e7d1      	b.n	8004134 <__sinit+0xc>
 8004190:	0800504c 	.word	0x0800504c
 8004194:	080040c1 	.word	0x080040c1

08004198 <__sfp>:
 8004198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800419a:	4607      	mov	r7, r0
 800419c:	f7ff ffac 	bl	80040f8 <__sfp_lock_acquire>
 80041a0:	4b1e      	ldr	r3, [pc, #120]	; (800421c <__sfp+0x84>)
 80041a2:	681e      	ldr	r6, [r3, #0]
 80041a4:	69b3      	ldr	r3, [r6, #24]
 80041a6:	b913      	cbnz	r3, 80041ae <__sfp+0x16>
 80041a8:	4630      	mov	r0, r6
 80041aa:	f7ff ffbd 	bl	8004128 <__sinit>
 80041ae:	3648      	adds	r6, #72	; 0x48
 80041b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80041b4:	3b01      	subs	r3, #1
 80041b6:	d503      	bpl.n	80041c0 <__sfp+0x28>
 80041b8:	6833      	ldr	r3, [r6, #0]
 80041ba:	b30b      	cbz	r3, 8004200 <__sfp+0x68>
 80041bc:	6836      	ldr	r6, [r6, #0]
 80041be:	e7f7      	b.n	80041b0 <__sfp+0x18>
 80041c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80041c4:	b9d5      	cbnz	r5, 80041fc <__sfp+0x64>
 80041c6:	4b16      	ldr	r3, [pc, #88]	; (8004220 <__sfp+0x88>)
 80041c8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80041cc:	60e3      	str	r3, [r4, #12]
 80041ce:	6665      	str	r5, [r4, #100]	; 0x64
 80041d0:	f000 f847 	bl	8004262 <__retarget_lock_init_recursive>
 80041d4:	f7ff ff96 	bl	8004104 <__sfp_lock_release>
 80041d8:	2208      	movs	r2, #8
 80041da:	4629      	mov	r1, r5
 80041dc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80041e0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80041e4:	6025      	str	r5, [r4, #0]
 80041e6:	61a5      	str	r5, [r4, #24]
 80041e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80041ec:	f7ff ff24 	bl	8004038 <memset>
 80041f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80041f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80041f8:	4620      	mov	r0, r4
 80041fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041fc:	3468      	adds	r4, #104	; 0x68
 80041fe:	e7d9      	b.n	80041b4 <__sfp+0x1c>
 8004200:	2104      	movs	r1, #4
 8004202:	4638      	mov	r0, r7
 8004204:	f7ff ff62 	bl	80040cc <__sfmoreglue>
 8004208:	4604      	mov	r4, r0
 800420a:	6030      	str	r0, [r6, #0]
 800420c:	2800      	cmp	r0, #0
 800420e:	d1d5      	bne.n	80041bc <__sfp+0x24>
 8004210:	f7ff ff78 	bl	8004104 <__sfp_lock_release>
 8004214:	230c      	movs	r3, #12
 8004216:	603b      	str	r3, [r7, #0]
 8004218:	e7ee      	b.n	80041f8 <__sfp+0x60>
 800421a:	bf00      	nop
 800421c:	0800504c 	.word	0x0800504c
 8004220:	ffff0001 	.word	0xffff0001

08004224 <_fwalk_reent>:
 8004224:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004228:	4606      	mov	r6, r0
 800422a:	4688      	mov	r8, r1
 800422c:	2700      	movs	r7, #0
 800422e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004232:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004236:	f1b9 0901 	subs.w	r9, r9, #1
 800423a:	d505      	bpl.n	8004248 <_fwalk_reent+0x24>
 800423c:	6824      	ldr	r4, [r4, #0]
 800423e:	2c00      	cmp	r4, #0
 8004240:	d1f7      	bne.n	8004232 <_fwalk_reent+0xe>
 8004242:	4638      	mov	r0, r7
 8004244:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004248:	89ab      	ldrh	r3, [r5, #12]
 800424a:	2b01      	cmp	r3, #1
 800424c:	d907      	bls.n	800425e <_fwalk_reent+0x3a>
 800424e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004252:	3301      	adds	r3, #1
 8004254:	d003      	beq.n	800425e <_fwalk_reent+0x3a>
 8004256:	4629      	mov	r1, r5
 8004258:	4630      	mov	r0, r6
 800425a:	47c0      	blx	r8
 800425c:	4307      	orrs	r7, r0
 800425e:	3568      	adds	r5, #104	; 0x68
 8004260:	e7e9      	b.n	8004236 <_fwalk_reent+0x12>

08004262 <__retarget_lock_init_recursive>:
 8004262:	4770      	bx	lr

08004264 <__retarget_lock_acquire_recursive>:
 8004264:	4770      	bx	lr

08004266 <__retarget_lock_release_recursive>:
 8004266:	4770      	bx	lr

08004268 <sbrk_aligned>:
 8004268:	b570      	push	{r4, r5, r6, lr}
 800426a:	4e0e      	ldr	r6, [pc, #56]	; (80042a4 <sbrk_aligned+0x3c>)
 800426c:	460c      	mov	r4, r1
 800426e:	6831      	ldr	r1, [r6, #0]
 8004270:	4605      	mov	r5, r0
 8004272:	b911      	cbnz	r1, 800427a <sbrk_aligned+0x12>
 8004274:	f000 fb7a 	bl	800496c <_sbrk_r>
 8004278:	6030      	str	r0, [r6, #0]
 800427a:	4621      	mov	r1, r4
 800427c:	4628      	mov	r0, r5
 800427e:	f000 fb75 	bl	800496c <_sbrk_r>
 8004282:	1c43      	adds	r3, r0, #1
 8004284:	d00a      	beq.n	800429c <sbrk_aligned+0x34>
 8004286:	1cc4      	adds	r4, r0, #3
 8004288:	f024 0403 	bic.w	r4, r4, #3
 800428c:	42a0      	cmp	r0, r4
 800428e:	d007      	beq.n	80042a0 <sbrk_aligned+0x38>
 8004290:	1a21      	subs	r1, r4, r0
 8004292:	4628      	mov	r0, r5
 8004294:	f000 fb6a 	bl	800496c <_sbrk_r>
 8004298:	3001      	adds	r0, #1
 800429a:	d101      	bne.n	80042a0 <sbrk_aligned+0x38>
 800429c:	f04f 34ff 	mov.w	r4, #4294967295
 80042a0:	4620      	mov	r0, r4
 80042a2:	bd70      	pop	{r4, r5, r6, pc}
 80042a4:	20000288 	.word	0x20000288

080042a8 <_malloc_r>:
 80042a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042ac:	1ccd      	adds	r5, r1, #3
 80042ae:	f025 0503 	bic.w	r5, r5, #3
 80042b2:	3508      	adds	r5, #8
 80042b4:	2d0c      	cmp	r5, #12
 80042b6:	bf38      	it	cc
 80042b8:	250c      	movcc	r5, #12
 80042ba:	2d00      	cmp	r5, #0
 80042bc:	4607      	mov	r7, r0
 80042be:	db01      	blt.n	80042c4 <_malloc_r+0x1c>
 80042c0:	42a9      	cmp	r1, r5
 80042c2:	d905      	bls.n	80042d0 <_malloc_r+0x28>
 80042c4:	230c      	movs	r3, #12
 80042c6:	2600      	movs	r6, #0
 80042c8:	603b      	str	r3, [r7, #0]
 80042ca:	4630      	mov	r0, r6
 80042cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042d0:	4e2e      	ldr	r6, [pc, #184]	; (800438c <_malloc_r+0xe4>)
 80042d2:	f000 fdc5 	bl	8004e60 <__malloc_lock>
 80042d6:	6833      	ldr	r3, [r6, #0]
 80042d8:	461c      	mov	r4, r3
 80042da:	bb34      	cbnz	r4, 800432a <_malloc_r+0x82>
 80042dc:	4629      	mov	r1, r5
 80042de:	4638      	mov	r0, r7
 80042e0:	f7ff ffc2 	bl	8004268 <sbrk_aligned>
 80042e4:	1c43      	adds	r3, r0, #1
 80042e6:	4604      	mov	r4, r0
 80042e8:	d14d      	bne.n	8004386 <_malloc_r+0xde>
 80042ea:	6834      	ldr	r4, [r6, #0]
 80042ec:	4626      	mov	r6, r4
 80042ee:	2e00      	cmp	r6, #0
 80042f0:	d140      	bne.n	8004374 <_malloc_r+0xcc>
 80042f2:	6823      	ldr	r3, [r4, #0]
 80042f4:	4631      	mov	r1, r6
 80042f6:	4638      	mov	r0, r7
 80042f8:	eb04 0803 	add.w	r8, r4, r3
 80042fc:	f000 fb36 	bl	800496c <_sbrk_r>
 8004300:	4580      	cmp	r8, r0
 8004302:	d13a      	bne.n	800437a <_malloc_r+0xd2>
 8004304:	6821      	ldr	r1, [r4, #0]
 8004306:	3503      	adds	r5, #3
 8004308:	1a6d      	subs	r5, r5, r1
 800430a:	f025 0503 	bic.w	r5, r5, #3
 800430e:	3508      	adds	r5, #8
 8004310:	2d0c      	cmp	r5, #12
 8004312:	bf38      	it	cc
 8004314:	250c      	movcc	r5, #12
 8004316:	4638      	mov	r0, r7
 8004318:	4629      	mov	r1, r5
 800431a:	f7ff ffa5 	bl	8004268 <sbrk_aligned>
 800431e:	3001      	adds	r0, #1
 8004320:	d02b      	beq.n	800437a <_malloc_r+0xd2>
 8004322:	6823      	ldr	r3, [r4, #0]
 8004324:	442b      	add	r3, r5
 8004326:	6023      	str	r3, [r4, #0]
 8004328:	e00e      	b.n	8004348 <_malloc_r+0xa0>
 800432a:	6822      	ldr	r2, [r4, #0]
 800432c:	1b52      	subs	r2, r2, r5
 800432e:	d41e      	bmi.n	800436e <_malloc_r+0xc6>
 8004330:	2a0b      	cmp	r2, #11
 8004332:	d916      	bls.n	8004362 <_malloc_r+0xba>
 8004334:	1961      	adds	r1, r4, r5
 8004336:	42a3      	cmp	r3, r4
 8004338:	6025      	str	r5, [r4, #0]
 800433a:	bf18      	it	ne
 800433c:	6059      	strne	r1, [r3, #4]
 800433e:	6863      	ldr	r3, [r4, #4]
 8004340:	bf08      	it	eq
 8004342:	6031      	streq	r1, [r6, #0]
 8004344:	5162      	str	r2, [r4, r5]
 8004346:	604b      	str	r3, [r1, #4]
 8004348:	4638      	mov	r0, r7
 800434a:	f104 060b 	add.w	r6, r4, #11
 800434e:	f000 fd8d 	bl	8004e6c <__malloc_unlock>
 8004352:	f026 0607 	bic.w	r6, r6, #7
 8004356:	1d23      	adds	r3, r4, #4
 8004358:	1af2      	subs	r2, r6, r3
 800435a:	d0b6      	beq.n	80042ca <_malloc_r+0x22>
 800435c:	1b9b      	subs	r3, r3, r6
 800435e:	50a3      	str	r3, [r4, r2]
 8004360:	e7b3      	b.n	80042ca <_malloc_r+0x22>
 8004362:	6862      	ldr	r2, [r4, #4]
 8004364:	42a3      	cmp	r3, r4
 8004366:	bf0c      	ite	eq
 8004368:	6032      	streq	r2, [r6, #0]
 800436a:	605a      	strne	r2, [r3, #4]
 800436c:	e7ec      	b.n	8004348 <_malloc_r+0xa0>
 800436e:	4623      	mov	r3, r4
 8004370:	6864      	ldr	r4, [r4, #4]
 8004372:	e7b2      	b.n	80042da <_malloc_r+0x32>
 8004374:	4634      	mov	r4, r6
 8004376:	6876      	ldr	r6, [r6, #4]
 8004378:	e7b9      	b.n	80042ee <_malloc_r+0x46>
 800437a:	230c      	movs	r3, #12
 800437c:	4638      	mov	r0, r7
 800437e:	603b      	str	r3, [r7, #0]
 8004380:	f000 fd74 	bl	8004e6c <__malloc_unlock>
 8004384:	e7a1      	b.n	80042ca <_malloc_r+0x22>
 8004386:	6025      	str	r5, [r4, #0]
 8004388:	e7de      	b.n	8004348 <_malloc_r+0xa0>
 800438a:	bf00      	nop
 800438c:	20000284 	.word	0x20000284

08004390 <__sfputc_r>:
 8004390:	6893      	ldr	r3, [r2, #8]
 8004392:	b410      	push	{r4}
 8004394:	3b01      	subs	r3, #1
 8004396:	2b00      	cmp	r3, #0
 8004398:	6093      	str	r3, [r2, #8]
 800439a:	da07      	bge.n	80043ac <__sfputc_r+0x1c>
 800439c:	6994      	ldr	r4, [r2, #24]
 800439e:	42a3      	cmp	r3, r4
 80043a0:	db01      	blt.n	80043a6 <__sfputc_r+0x16>
 80043a2:	290a      	cmp	r1, #10
 80043a4:	d102      	bne.n	80043ac <__sfputc_r+0x1c>
 80043a6:	bc10      	pop	{r4}
 80043a8:	f000 bb34 	b.w	8004a14 <__swbuf_r>
 80043ac:	6813      	ldr	r3, [r2, #0]
 80043ae:	1c58      	adds	r0, r3, #1
 80043b0:	6010      	str	r0, [r2, #0]
 80043b2:	7019      	strb	r1, [r3, #0]
 80043b4:	4608      	mov	r0, r1
 80043b6:	bc10      	pop	{r4}
 80043b8:	4770      	bx	lr

080043ba <__sfputs_r>:
 80043ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043bc:	4606      	mov	r6, r0
 80043be:	460f      	mov	r7, r1
 80043c0:	4614      	mov	r4, r2
 80043c2:	18d5      	adds	r5, r2, r3
 80043c4:	42ac      	cmp	r4, r5
 80043c6:	d101      	bne.n	80043cc <__sfputs_r+0x12>
 80043c8:	2000      	movs	r0, #0
 80043ca:	e007      	b.n	80043dc <__sfputs_r+0x22>
 80043cc:	463a      	mov	r2, r7
 80043ce:	4630      	mov	r0, r6
 80043d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043d4:	f7ff ffdc 	bl	8004390 <__sfputc_r>
 80043d8:	1c43      	adds	r3, r0, #1
 80043da:	d1f3      	bne.n	80043c4 <__sfputs_r+0xa>
 80043dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080043e0 <_vfiprintf_r>:
 80043e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043e4:	460d      	mov	r5, r1
 80043e6:	4614      	mov	r4, r2
 80043e8:	4698      	mov	r8, r3
 80043ea:	4606      	mov	r6, r0
 80043ec:	b09d      	sub	sp, #116	; 0x74
 80043ee:	b118      	cbz	r0, 80043f8 <_vfiprintf_r+0x18>
 80043f0:	6983      	ldr	r3, [r0, #24]
 80043f2:	b90b      	cbnz	r3, 80043f8 <_vfiprintf_r+0x18>
 80043f4:	f7ff fe98 	bl	8004128 <__sinit>
 80043f8:	4b89      	ldr	r3, [pc, #548]	; (8004620 <_vfiprintf_r+0x240>)
 80043fa:	429d      	cmp	r5, r3
 80043fc:	d11b      	bne.n	8004436 <_vfiprintf_r+0x56>
 80043fe:	6875      	ldr	r5, [r6, #4]
 8004400:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004402:	07d9      	lsls	r1, r3, #31
 8004404:	d405      	bmi.n	8004412 <_vfiprintf_r+0x32>
 8004406:	89ab      	ldrh	r3, [r5, #12]
 8004408:	059a      	lsls	r2, r3, #22
 800440a:	d402      	bmi.n	8004412 <_vfiprintf_r+0x32>
 800440c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800440e:	f7ff ff29 	bl	8004264 <__retarget_lock_acquire_recursive>
 8004412:	89ab      	ldrh	r3, [r5, #12]
 8004414:	071b      	lsls	r3, r3, #28
 8004416:	d501      	bpl.n	800441c <_vfiprintf_r+0x3c>
 8004418:	692b      	ldr	r3, [r5, #16]
 800441a:	b9eb      	cbnz	r3, 8004458 <_vfiprintf_r+0x78>
 800441c:	4629      	mov	r1, r5
 800441e:	4630      	mov	r0, r6
 8004420:	f000 fb5c 	bl	8004adc <__swsetup_r>
 8004424:	b1c0      	cbz	r0, 8004458 <_vfiprintf_r+0x78>
 8004426:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004428:	07dc      	lsls	r4, r3, #31
 800442a:	d50e      	bpl.n	800444a <_vfiprintf_r+0x6a>
 800442c:	f04f 30ff 	mov.w	r0, #4294967295
 8004430:	b01d      	add	sp, #116	; 0x74
 8004432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004436:	4b7b      	ldr	r3, [pc, #492]	; (8004624 <_vfiprintf_r+0x244>)
 8004438:	429d      	cmp	r5, r3
 800443a:	d101      	bne.n	8004440 <_vfiprintf_r+0x60>
 800443c:	68b5      	ldr	r5, [r6, #8]
 800443e:	e7df      	b.n	8004400 <_vfiprintf_r+0x20>
 8004440:	4b79      	ldr	r3, [pc, #484]	; (8004628 <_vfiprintf_r+0x248>)
 8004442:	429d      	cmp	r5, r3
 8004444:	bf08      	it	eq
 8004446:	68f5      	ldreq	r5, [r6, #12]
 8004448:	e7da      	b.n	8004400 <_vfiprintf_r+0x20>
 800444a:	89ab      	ldrh	r3, [r5, #12]
 800444c:	0598      	lsls	r0, r3, #22
 800444e:	d4ed      	bmi.n	800442c <_vfiprintf_r+0x4c>
 8004450:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004452:	f7ff ff08 	bl	8004266 <__retarget_lock_release_recursive>
 8004456:	e7e9      	b.n	800442c <_vfiprintf_r+0x4c>
 8004458:	2300      	movs	r3, #0
 800445a:	9309      	str	r3, [sp, #36]	; 0x24
 800445c:	2320      	movs	r3, #32
 800445e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004462:	2330      	movs	r3, #48	; 0x30
 8004464:	f04f 0901 	mov.w	r9, #1
 8004468:	f8cd 800c 	str.w	r8, [sp, #12]
 800446c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800462c <_vfiprintf_r+0x24c>
 8004470:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004474:	4623      	mov	r3, r4
 8004476:	469a      	mov	sl, r3
 8004478:	f813 2b01 	ldrb.w	r2, [r3], #1
 800447c:	b10a      	cbz	r2, 8004482 <_vfiprintf_r+0xa2>
 800447e:	2a25      	cmp	r2, #37	; 0x25
 8004480:	d1f9      	bne.n	8004476 <_vfiprintf_r+0x96>
 8004482:	ebba 0b04 	subs.w	fp, sl, r4
 8004486:	d00b      	beq.n	80044a0 <_vfiprintf_r+0xc0>
 8004488:	465b      	mov	r3, fp
 800448a:	4622      	mov	r2, r4
 800448c:	4629      	mov	r1, r5
 800448e:	4630      	mov	r0, r6
 8004490:	f7ff ff93 	bl	80043ba <__sfputs_r>
 8004494:	3001      	adds	r0, #1
 8004496:	f000 80aa 	beq.w	80045ee <_vfiprintf_r+0x20e>
 800449a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800449c:	445a      	add	r2, fp
 800449e:	9209      	str	r2, [sp, #36]	; 0x24
 80044a0:	f89a 3000 	ldrb.w	r3, [sl]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	f000 80a2 	beq.w	80045ee <_vfiprintf_r+0x20e>
 80044aa:	2300      	movs	r3, #0
 80044ac:	f04f 32ff 	mov.w	r2, #4294967295
 80044b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80044b4:	f10a 0a01 	add.w	sl, sl, #1
 80044b8:	9304      	str	r3, [sp, #16]
 80044ba:	9307      	str	r3, [sp, #28]
 80044bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80044c0:	931a      	str	r3, [sp, #104]	; 0x68
 80044c2:	4654      	mov	r4, sl
 80044c4:	2205      	movs	r2, #5
 80044c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044ca:	4858      	ldr	r0, [pc, #352]	; (800462c <_vfiprintf_r+0x24c>)
 80044cc:	f000 fcba 	bl	8004e44 <memchr>
 80044d0:	9a04      	ldr	r2, [sp, #16]
 80044d2:	b9d8      	cbnz	r0, 800450c <_vfiprintf_r+0x12c>
 80044d4:	06d1      	lsls	r1, r2, #27
 80044d6:	bf44      	itt	mi
 80044d8:	2320      	movmi	r3, #32
 80044da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80044de:	0713      	lsls	r3, r2, #28
 80044e0:	bf44      	itt	mi
 80044e2:	232b      	movmi	r3, #43	; 0x2b
 80044e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80044e8:	f89a 3000 	ldrb.w	r3, [sl]
 80044ec:	2b2a      	cmp	r3, #42	; 0x2a
 80044ee:	d015      	beq.n	800451c <_vfiprintf_r+0x13c>
 80044f0:	4654      	mov	r4, sl
 80044f2:	2000      	movs	r0, #0
 80044f4:	f04f 0c0a 	mov.w	ip, #10
 80044f8:	9a07      	ldr	r2, [sp, #28]
 80044fa:	4621      	mov	r1, r4
 80044fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004500:	3b30      	subs	r3, #48	; 0x30
 8004502:	2b09      	cmp	r3, #9
 8004504:	d94e      	bls.n	80045a4 <_vfiprintf_r+0x1c4>
 8004506:	b1b0      	cbz	r0, 8004536 <_vfiprintf_r+0x156>
 8004508:	9207      	str	r2, [sp, #28]
 800450a:	e014      	b.n	8004536 <_vfiprintf_r+0x156>
 800450c:	eba0 0308 	sub.w	r3, r0, r8
 8004510:	fa09 f303 	lsl.w	r3, r9, r3
 8004514:	4313      	orrs	r3, r2
 8004516:	46a2      	mov	sl, r4
 8004518:	9304      	str	r3, [sp, #16]
 800451a:	e7d2      	b.n	80044c2 <_vfiprintf_r+0xe2>
 800451c:	9b03      	ldr	r3, [sp, #12]
 800451e:	1d19      	adds	r1, r3, #4
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	9103      	str	r1, [sp, #12]
 8004524:	2b00      	cmp	r3, #0
 8004526:	bfbb      	ittet	lt
 8004528:	425b      	neglt	r3, r3
 800452a:	f042 0202 	orrlt.w	r2, r2, #2
 800452e:	9307      	strge	r3, [sp, #28]
 8004530:	9307      	strlt	r3, [sp, #28]
 8004532:	bfb8      	it	lt
 8004534:	9204      	strlt	r2, [sp, #16]
 8004536:	7823      	ldrb	r3, [r4, #0]
 8004538:	2b2e      	cmp	r3, #46	; 0x2e
 800453a:	d10c      	bne.n	8004556 <_vfiprintf_r+0x176>
 800453c:	7863      	ldrb	r3, [r4, #1]
 800453e:	2b2a      	cmp	r3, #42	; 0x2a
 8004540:	d135      	bne.n	80045ae <_vfiprintf_r+0x1ce>
 8004542:	9b03      	ldr	r3, [sp, #12]
 8004544:	3402      	adds	r4, #2
 8004546:	1d1a      	adds	r2, r3, #4
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	9203      	str	r2, [sp, #12]
 800454c:	2b00      	cmp	r3, #0
 800454e:	bfb8      	it	lt
 8004550:	f04f 33ff 	movlt.w	r3, #4294967295
 8004554:	9305      	str	r3, [sp, #20]
 8004556:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8004630 <_vfiprintf_r+0x250>
 800455a:	2203      	movs	r2, #3
 800455c:	4650      	mov	r0, sl
 800455e:	7821      	ldrb	r1, [r4, #0]
 8004560:	f000 fc70 	bl	8004e44 <memchr>
 8004564:	b140      	cbz	r0, 8004578 <_vfiprintf_r+0x198>
 8004566:	2340      	movs	r3, #64	; 0x40
 8004568:	eba0 000a 	sub.w	r0, r0, sl
 800456c:	fa03 f000 	lsl.w	r0, r3, r0
 8004570:	9b04      	ldr	r3, [sp, #16]
 8004572:	3401      	adds	r4, #1
 8004574:	4303      	orrs	r3, r0
 8004576:	9304      	str	r3, [sp, #16]
 8004578:	f814 1b01 	ldrb.w	r1, [r4], #1
 800457c:	2206      	movs	r2, #6
 800457e:	482d      	ldr	r0, [pc, #180]	; (8004634 <_vfiprintf_r+0x254>)
 8004580:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004584:	f000 fc5e 	bl	8004e44 <memchr>
 8004588:	2800      	cmp	r0, #0
 800458a:	d03f      	beq.n	800460c <_vfiprintf_r+0x22c>
 800458c:	4b2a      	ldr	r3, [pc, #168]	; (8004638 <_vfiprintf_r+0x258>)
 800458e:	bb1b      	cbnz	r3, 80045d8 <_vfiprintf_r+0x1f8>
 8004590:	9b03      	ldr	r3, [sp, #12]
 8004592:	3307      	adds	r3, #7
 8004594:	f023 0307 	bic.w	r3, r3, #7
 8004598:	3308      	adds	r3, #8
 800459a:	9303      	str	r3, [sp, #12]
 800459c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800459e:	443b      	add	r3, r7
 80045a0:	9309      	str	r3, [sp, #36]	; 0x24
 80045a2:	e767      	b.n	8004474 <_vfiprintf_r+0x94>
 80045a4:	460c      	mov	r4, r1
 80045a6:	2001      	movs	r0, #1
 80045a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80045ac:	e7a5      	b.n	80044fa <_vfiprintf_r+0x11a>
 80045ae:	2300      	movs	r3, #0
 80045b0:	f04f 0c0a 	mov.w	ip, #10
 80045b4:	4619      	mov	r1, r3
 80045b6:	3401      	adds	r4, #1
 80045b8:	9305      	str	r3, [sp, #20]
 80045ba:	4620      	mov	r0, r4
 80045bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80045c0:	3a30      	subs	r2, #48	; 0x30
 80045c2:	2a09      	cmp	r2, #9
 80045c4:	d903      	bls.n	80045ce <_vfiprintf_r+0x1ee>
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d0c5      	beq.n	8004556 <_vfiprintf_r+0x176>
 80045ca:	9105      	str	r1, [sp, #20]
 80045cc:	e7c3      	b.n	8004556 <_vfiprintf_r+0x176>
 80045ce:	4604      	mov	r4, r0
 80045d0:	2301      	movs	r3, #1
 80045d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80045d6:	e7f0      	b.n	80045ba <_vfiprintf_r+0x1da>
 80045d8:	ab03      	add	r3, sp, #12
 80045da:	9300      	str	r3, [sp, #0]
 80045dc:	462a      	mov	r2, r5
 80045de:	4630      	mov	r0, r6
 80045e0:	4b16      	ldr	r3, [pc, #88]	; (800463c <_vfiprintf_r+0x25c>)
 80045e2:	a904      	add	r1, sp, #16
 80045e4:	f3af 8000 	nop.w
 80045e8:	4607      	mov	r7, r0
 80045ea:	1c78      	adds	r0, r7, #1
 80045ec:	d1d6      	bne.n	800459c <_vfiprintf_r+0x1bc>
 80045ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80045f0:	07d9      	lsls	r1, r3, #31
 80045f2:	d405      	bmi.n	8004600 <_vfiprintf_r+0x220>
 80045f4:	89ab      	ldrh	r3, [r5, #12]
 80045f6:	059a      	lsls	r2, r3, #22
 80045f8:	d402      	bmi.n	8004600 <_vfiprintf_r+0x220>
 80045fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80045fc:	f7ff fe33 	bl	8004266 <__retarget_lock_release_recursive>
 8004600:	89ab      	ldrh	r3, [r5, #12]
 8004602:	065b      	lsls	r3, r3, #25
 8004604:	f53f af12 	bmi.w	800442c <_vfiprintf_r+0x4c>
 8004608:	9809      	ldr	r0, [sp, #36]	; 0x24
 800460a:	e711      	b.n	8004430 <_vfiprintf_r+0x50>
 800460c:	ab03      	add	r3, sp, #12
 800460e:	9300      	str	r3, [sp, #0]
 8004610:	462a      	mov	r2, r5
 8004612:	4630      	mov	r0, r6
 8004614:	4b09      	ldr	r3, [pc, #36]	; (800463c <_vfiprintf_r+0x25c>)
 8004616:	a904      	add	r1, sp, #16
 8004618:	f000 f882 	bl	8004720 <_printf_i>
 800461c:	e7e4      	b.n	80045e8 <_vfiprintf_r+0x208>
 800461e:	bf00      	nop
 8004620:	08005070 	.word	0x08005070
 8004624:	08005090 	.word	0x08005090
 8004628:	08005050 	.word	0x08005050
 800462c:	080050b0 	.word	0x080050b0
 8004630:	080050b6 	.word	0x080050b6
 8004634:	080050ba 	.word	0x080050ba
 8004638:	00000000 	.word	0x00000000
 800463c:	080043bb 	.word	0x080043bb

08004640 <_printf_common>:
 8004640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004644:	4616      	mov	r6, r2
 8004646:	4699      	mov	r9, r3
 8004648:	688a      	ldr	r2, [r1, #8]
 800464a:	690b      	ldr	r3, [r1, #16]
 800464c:	4607      	mov	r7, r0
 800464e:	4293      	cmp	r3, r2
 8004650:	bfb8      	it	lt
 8004652:	4613      	movlt	r3, r2
 8004654:	6033      	str	r3, [r6, #0]
 8004656:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800465a:	460c      	mov	r4, r1
 800465c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004660:	b10a      	cbz	r2, 8004666 <_printf_common+0x26>
 8004662:	3301      	adds	r3, #1
 8004664:	6033      	str	r3, [r6, #0]
 8004666:	6823      	ldr	r3, [r4, #0]
 8004668:	0699      	lsls	r1, r3, #26
 800466a:	bf42      	ittt	mi
 800466c:	6833      	ldrmi	r3, [r6, #0]
 800466e:	3302      	addmi	r3, #2
 8004670:	6033      	strmi	r3, [r6, #0]
 8004672:	6825      	ldr	r5, [r4, #0]
 8004674:	f015 0506 	ands.w	r5, r5, #6
 8004678:	d106      	bne.n	8004688 <_printf_common+0x48>
 800467a:	f104 0a19 	add.w	sl, r4, #25
 800467e:	68e3      	ldr	r3, [r4, #12]
 8004680:	6832      	ldr	r2, [r6, #0]
 8004682:	1a9b      	subs	r3, r3, r2
 8004684:	42ab      	cmp	r3, r5
 8004686:	dc28      	bgt.n	80046da <_printf_common+0x9a>
 8004688:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800468c:	1e13      	subs	r3, r2, #0
 800468e:	6822      	ldr	r2, [r4, #0]
 8004690:	bf18      	it	ne
 8004692:	2301      	movne	r3, #1
 8004694:	0692      	lsls	r2, r2, #26
 8004696:	d42d      	bmi.n	80046f4 <_printf_common+0xb4>
 8004698:	4649      	mov	r1, r9
 800469a:	4638      	mov	r0, r7
 800469c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80046a0:	47c0      	blx	r8
 80046a2:	3001      	adds	r0, #1
 80046a4:	d020      	beq.n	80046e8 <_printf_common+0xa8>
 80046a6:	6823      	ldr	r3, [r4, #0]
 80046a8:	68e5      	ldr	r5, [r4, #12]
 80046aa:	f003 0306 	and.w	r3, r3, #6
 80046ae:	2b04      	cmp	r3, #4
 80046b0:	bf18      	it	ne
 80046b2:	2500      	movne	r5, #0
 80046b4:	6832      	ldr	r2, [r6, #0]
 80046b6:	f04f 0600 	mov.w	r6, #0
 80046ba:	68a3      	ldr	r3, [r4, #8]
 80046bc:	bf08      	it	eq
 80046be:	1aad      	subeq	r5, r5, r2
 80046c0:	6922      	ldr	r2, [r4, #16]
 80046c2:	bf08      	it	eq
 80046c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80046c8:	4293      	cmp	r3, r2
 80046ca:	bfc4      	itt	gt
 80046cc:	1a9b      	subgt	r3, r3, r2
 80046ce:	18ed      	addgt	r5, r5, r3
 80046d0:	341a      	adds	r4, #26
 80046d2:	42b5      	cmp	r5, r6
 80046d4:	d11a      	bne.n	800470c <_printf_common+0xcc>
 80046d6:	2000      	movs	r0, #0
 80046d8:	e008      	b.n	80046ec <_printf_common+0xac>
 80046da:	2301      	movs	r3, #1
 80046dc:	4652      	mov	r2, sl
 80046de:	4649      	mov	r1, r9
 80046e0:	4638      	mov	r0, r7
 80046e2:	47c0      	blx	r8
 80046e4:	3001      	adds	r0, #1
 80046e6:	d103      	bne.n	80046f0 <_printf_common+0xb0>
 80046e8:	f04f 30ff 	mov.w	r0, #4294967295
 80046ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046f0:	3501      	adds	r5, #1
 80046f2:	e7c4      	b.n	800467e <_printf_common+0x3e>
 80046f4:	2030      	movs	r0, #48	; 0x30
 80046f6:	18e1      	adds	r1, r4, r3
 80046f8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80046fc:	1c5a      	adds	r2, r3, #1
 80046fe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004702:	4422      	add	r2, r4
 8004704:	3302      	adds	r3, #2
 8004706:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800470a:	e7c5      	b.n	8004698 <_printf_common+0x58>
 800470c:	2301      	movs	r3, #1
 800470e:	4622      	mov	r2, r4
 8004710:	4649      	mov	r1, r9
 8004712:	4638      	mov	r0, r7
 8004714:	47c0      	blx	r8
 8004716:	3001      	adds	r0, #1
 8004718:	d0e6      	beq.n	80046e8 <_printf_common+0xa8>
 800471a:	3601      	adds	r6, #1
 800471c:	e7d9      	b.n	80046d2 <_printf_common+0x92>
	...

08004720 <_printf_i>:
 8004720:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004724:	7e0f      	ldrb	r7, [r1, #24]
 8004726:	4691      	mov	r9, r2
 8004728:	2f78      	cmp	r7, #120	; 0x78
 800472a:	4680      	mov	r8, r0
 800472c:	460c      	mov	r4, r1
 800472e:	469a      	mov	sl, r3
 8004730:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004732:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004736:	d807      	bhi.n	8004748 <_printf_i+0x28>
 8004738:	2f62      	cmp	r7, #98	; 0x62
 800473a:	d80a      	bhi.n	8004752 <_printf_i+0x32>
 800473c:	2f00      	cmp	r7, #0
 800473e:	f000 80d9 	beq.w	80048f4 <_printf_i+0x1d4>
 8004742:	2f58      	cmp	r7, #88	; 0x58
 8004744:	f000 80a4 	beq.w	8004890 <_printf_i+0x170>
 8004748:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800474c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004750:	e03a      	b.n	80047c8 <_printf_i+0xa8>
 8004752:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004756:	2b15      	cmp	r3, #21
 8004758:	d8f6      	bhi.n	8004748 <_printf_i+0x28>
 800475a:	a101      	add	r1, pc, #4	; (adr r1, 8004760 <_printf_i+0x40>)
 800475c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004760:	080047b9 	.word	0x080047b9
 8004764:	080047cd 	.word	0x080047cd
 8004768:	08004749 	.word	0x08004749
 800476c:	08004749 	.word	0x08004749
 8004770:	08004749 	.word	0x08004749
 8004774:	08004749 	.word	0x08004749
 8004778:	080047cd 	.word	0x080047cd
 800477c:	08004749 	.word	0x08004749
 8004780:	08004749 	.word	0x08004749
 8004784:	08004749 	.word	0x08004749
 8004788:	08004749 	.word	0x08004749
 800478c:	080048db 	.word	0x080048db
 8004790:	080047fd 	.word	0x080047fd
 8004794:	080048bd 	.word	0x080048bd
 8004798:	08004749 	.word	0x08004749
 800479c:	08004749 	.word	0x08004749
 80047a0:	080048fd 	.word	0x080048fd
 80047a4:	08004749 	.word	0x08004749
 80047a8:	080047fd 	.word	0x080047fd
 80047ac:	08004749 	.word	0x08004749
 80047b0:	08004749 	.word	0x08004749
 80047b4:	080048c5 	.word	0x080048c5
 80047b8:	682b      	ldr	r3, [r5, #0]
 80047ba:	1d1a      	adds	r2, r3, #4
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	602a      	str	r2, [r5, #0]
 80047c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80047c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80047c8:	2301      	movs	r3, #1
 80047ca:	e0a4      	b.n	8004916 <_printf_i+0x1f6>
 80047cc:	6820      	ldr	r0, [r4, #0]
 80047ce:	6829      	ldr	r1, [r5, #0]
 80047d0:	0606      	lsls	r6, r0, #24
 80047d2:	f101 0304 	add.w	r3, r1, #4
 80047d6:	d50a      	bpl.n	80047ee <_printf_i+0xce>
 80047d8:	680e      	ldr	r6, [r1, #0]
 80047da:	602b      	str	r3, [r5, #0]
 80047dc:	2e00      	cmp	r6, #0
 80047de:	da03      	bge.n	80047e8 <_printf_i+0xc8>
 80047e0:	232d      	movs	r3, #45	; 0x2d
 80047e2:	4276      	negs	r6, r6
 80047e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047e8:	230a      	movs	r3, #10
 80047ea:	485e      	ldr	r0, [pc, #376]	; (8004964 <_printf_i+0x244>)
 80047ec:	e019      	b.n	8004822 <_printf_i+0x102>
 80047ee:	680e      	ldr	r6, [r1, #0]
 80047f0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80047f4:	602b      	str	r3, [r5, #0]
 80047f6:	bf18      	it	ne
 80047f8:	b236      	sxthne	r6, r6
 80047fa:	e7ef      	b.n	80047dc <_printf_i+0xbc>
 80047fc:	682b      	ldr	r3, [r5, #0]
 80047fe:	6820      	ldr	r0, [r4, #0]
 8004800:	1d19      	adds	r1, r3, #4
 8004802:	6029      	str	r1, [r5, #0]
 8004804:	0601      	lsls	r1, r0, #24
 8004806:	d501      	bpl.n	800480c <_printf_i+0xec>
 8004808:	681e      	ldr	r6, [r3, #0]
 800480a:	e002      	b.n	8004812 <_printf_i+0xf2>
 800480c:	0646      	lsls	r6, r0, #25
 800480e:	d5fb      	bpl.n	8004808 <_printf_i+0xe8>
 8004810:	881e      	ldrh	r6, [r3, #0]
 8004812:	2f6f      	cmp	r7, #111	; 0x6f
 8004814:	bf0c      	ite	eq
 8004816:	2308      	moveq	r3, #8
 8004818:	230a      	movne	r3, #10
 800481a:	4852      	ldr	r0, [pc, #328]	; (8004964 <_printf_i+0x244>)
 800481c:	2100      	movs	r1, #0
 800481e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004822:	6865      	ldr	r5, [r4, #4]
 8004824:	2d00      	cmp	r5, #0
 8004826:	bfa8      	it	ge
 8004828:	6821      	ldrge	r1, [r4, #0]
 800482a:	60a5      	str	r5, [r4, #8]
 800482c:	bfa4      	itt	ge
 800482e:	f021 0104 	bicge.w	r1, r1, #4
 8004832:	6021      	strge	r1, [r4, #0]
 8004834:	b90e      	cbnz	r6, 800483a <_printf_i+0x11a>
 8004836:	2d00      	cmp	r5, #0
 8004838:	d04d      	beq.n	80048d6 <_printf_i+0x1b6>
 800483a:	4615      	mov	r5, r2
 800483c:	fbb6 f1f3 	udiv	r1, r6, r3
 8004840:	fb03 6711 	mls	r7, r3, r1, r6
 8004844:	5dc7      	ldrb	r7, [r0, r7]
 8004846:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800484a:	4637      	mov	r7, r6
 800484c:	42bb      	cmp	r3, r7
 800484e:	460e      	mov	r6, r1
 8004850:	d9f4      	bls.n	800483c <_printf_i+0x11c>
 8004852:	2b08      	cmp	r3, #8
 8004854:	d10b      	bne.n	800486e <_printf_i+0x14e>
 8004856:	6823      	ldr	r3, [r4, #0]
 8004858:	07de      	lsls	r6, r3, #31
 800485a:	d508      	bpl.n	800486e <_printf_i+0x14e>
 800485c:	6923      	ldr	r3, [r4, #16]
 800485e:	6861      	ldr	r1, [r4, #4]
 8004860:	4299      	cmp	r1, r3
 8004862:	bfde      	ittt	le
 8004864:	2330      	movle	r3, #48	; 0x30
 8004866:	f805 3c01 	strble.w	r3, [r5, #-1]
 800486a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800486e:	1b52      	subs	r2, r2, r5
 8004870:	6122      	str	r2, [r4, #16]
 8004872:	464b      	mov	r3, r9
 8004874:	4621      	mov	r1, r4
 8004876:	4640      	mov	r0, r8
 8004878:	f8cd a000 	str.w	sl, [sp]
 800487c:	aa03      	add	r2, sp, #12
 800487e:	f7ff fedf 	bl	8004640 <_printf_common>
 8004882:	3001      	adds	r0, #1
 8004884:	d14c      	bne.n	8004920 <_printf_i+0x200>
 8004886:	f04f 30ff 	mov.w	r0, #4294967295
 800488a:	b004      	add	sp, #16
 800488c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004890:	4834      	ldr	r0, [pc, #208]	; (8004964 <_printf_i+0x244>)
 8004892:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004896:	6829      	ldr	r1, [r5, #0]
 8004898:	6823      	ldr	r3, [r4, #0]
 800489a:	f851 6b04 	ldr.w	r6, [r1], #4
 800489e:	6029      	str	r1, [r5, #0]
 80048a0:	061d      	lsls	r5, r3, #24
 80048a2:	d514      	bpl.n	80048ce <_printf_i+0x1ae>
 80048a4:	07df      	lsls	r7, r3, #31
 80048a6:	bf44      	itt	mi
 80048a8:	f043 0320 	orrmi.w	r3, r3, #32
 80048ac:	6023      	strmi	r3, [r4, #0]
 80048ae:	b91e      	cbnz	r6, 80048b8 <_printf_i+0x198>
 80048b0:	6823      	ldr	r3, [r4, #0]
 80048b2:	f023 0320 	bic.w	r3, r3, #32
 80048b6:	6023      	str	r3, [r4, #0]
 80048b8:	2310      	movs	r3, #16
 80048ba:	e7af      	b.n	800481c <_printf_i+0xfc>
 80048bc:	6823      	ldr	r3, [r4, #0]
 80048be:	f043 0320 	orr.w	r3, r3, #32
 80048c2:	6023      	str	r3, [r4, #0]
 80048c4:	2378      	movs	r3, #120	; 0x78
 80048c6:	4828      	ldr	r0, [pc, #160]	; (8004968 <_printf_i+0x248>)
 80048c8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80048cc:	e7e3      	b.n	8004896 <_printf_i+0x176>
 80048ce:	0659      	lsls	r1, r3, #25
 80048d0:	bf48      	it	mi
 80048d2:	b2b6      	uxthmi	r6, r6
 80048d4:	e7e6      	b.n	80048a4 <_printf_i+0x184>
 80048d6:	4615      	mov	r5, r2
 80048d8:	e7bb      	b.n	8004852 <_printf_i+0x132>
 80048da:	682b      	ldr	r3, [r5, #0]
 80048dc:	6826      	ldr	r6, [r4, #0]
 80048de:	1d18      	adds	r0, r3, #4
 80048e0:	6961      	ldr	r1, [r4, #20]
 80048e2:	6028      	str	r0, [r5, #0]
 80048e4:	0635      	lsls	r5, r6, #24
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	d501      	bpl.n	80048ee <_printf_i+0x1ce>
 80048ea:	6019      	str	r1, [r3, #0]
 80048ec:	e002      	b.n	80048f4 <_printf_i+0x1d4>
 80048ee:	0670      	lsls	r0, r6, #25
 80048f0:	d5fb      	bpl.n	80048ea <_printf_i+0x1ca>
 80048f2:	8019      	strh	r1, [r3, #0]
 80048f4:	2300      	movs	r3, #0
 80048f6:	4615      	mov	r5, r2
 80048f8:	6123      	str	r3, [r4, #16]
 80048fa:	e7ba      	b.n	8004872 <_printf_i+0x152>
 80048fc:	682b      	ldr	r3, [r5, #0]
 80048fe:	2100      	movs	r1, #0
 8004900:	1d1a      	adds	r2, r3, #4
 8004902:	602a      	str	r2, [r5, #0]
 8004904:	681d      	ldr	r5, [r3, #0]
 8004906:	6862      	ldr	r2, [r4, #4]
 8004908:	4628      	mov	r0, r5
 800490a:	f000 fa9b 	bl	8004e44 <memchr>
 800490e:	b108      	cbz	r0, 8004914 <_printf_i+0x1f4>
 8004910:	1b40      	subs	r0, r0, r5
 8004912:	6060      	str	r0, [r4, #4]
 8004914:	6863      	ldr	r3, [r4, #4]
 8004916:	6123      	str	r3, [r4, #16]
 8004918:	2300      	movs	r3, #0
 800491a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800491e:	e7a8      	b.n	8004872 <_printf_i+0x152>
 8004920:	462a      	mov	r2, r5
 8004922:	4649      	mov	r1, r9
 8004924:	4640      	mov	r0, r8
 8004926:	6923      	ldr	r3, [r4, #16]
 8004928:	47d0      	blx	sl
 800492a:	3001      	adds	r0, #1
 800492c:	d0ab      	beq.n	8004886 <_printf_i+0x166>
 800492e:	6823      	ldr	r3, [r4, #0]
 8004930:	079b      	lsls	r3, r3, #30
 8004932:	d413      	bmi.n	800495c <_printf_i+0x23c>
 8004934:	68e0      	ldr	r0, [r4, #12]
 8004936:	9b03      	ldr	r3, [sp, #12]
 8004938:	4298      	cmp	r0, r3
 800493a:	bfb8      	it	lt
 800493c:	4618      	movlt	r0, r3
 800493e:	e7a4      	b.n	800488a <_printf_i+0x16a>
 8004940:	2301      	movs	r3, #1
 8004942:	4632      	mov	r2, r6
 8004944:	4649      	mov	r1, r9
 8004946:	4640      	mov	r0, r8
 8004948:	47d0      	blx	sl
 800494a:	3001      	adds	r0, #1
 800494c:	d09b      	beq.n	8004886 <_printf_i+0x166>
 800494e:	3501      	adds	r5, #1
 8004950:	68e3      	ldr	r3, [r4, #12]
 8004952:	9903      	ldr	r1, [sp, #12]
 8004954:	1a5b      	subs	r3, r3, r1
 8004956:	42ab      	cmp	r3, r5
 8004958:	dcf2      	bgt.n	8004940 <_printf_i+0x220>
 800495a:	e7eb      	b.n	8004934 <_printf_i+0x214>
 800495c:	2500      	movs	r5, #0
 800495e:	f104 0619 	add.w	r6, r4, #25
 8004962:	e7f5      	b.n	8004950 <_printf_i+0x230>
 8004964:	080050c1 	.word	0x080050c1
 8004968:	080050d2 	.word	0x080050d2

0800496c <_sbrk_r>:
 800496c:	b538      	push	{r3, r4, r5, lr}
 800496e:	2300      	movs	r3, #0
 8004970:	4d05      	ldr	r5, [pc, #20]	; (8004988 <_sbrk_r+0x1c>)
 8004972:	4604      	mov	r4, r0
 8004974:	4608      	mov	r0, r1
 8004976:	602b      	str	r3, [r5, #0]
 8004978:	f7fc f8ec 	bl	8000b54 <_sbrk>
 800497c:	1c43      	adds	r3, r0, #1
 800497e:	d102      	bne.n	8004986 <_sbrk_r+0x1a>
 8004980:	682b      	ldr	r3, [r5, #0]
 8004982:	b103      	cbz	r3, 8004986 <_sbrk_r+0x1a>
 8004984:	6023      	str	r3, [r4, #0]
 8004986:	bd38      	pop	{r3, r4, r5, pc}
 8004988:	2000028c 	.word	0x2000028c

0800498c <__sread>:
 800498c:	b510      	push	{r4, lr}
 800498e:	460c      	mov	r4, r1
 8004990:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004994:	f000 fab8 	bl	8004f08 <_read_r>
 8004998:	2800      	cmp	r0, #0
 800499a:	bfab      	itete	ge
 800499c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800499e:	89a3      	ldrhlt	r3, [r4, #12]
 80049a0:	181b      	addge	r3, r3, r0
 80049a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80049a6:	bfac      	ite	ge
 80049a8:	6563      	strge	r3, [r4, #84]	; 0x54
 80049aa:	81a3      	strhlt	r3, [r4, #12]
 80049ac:	bd10      	pop	{r4, pc}

080049ae <__swrite>:
 80049ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049b2:	461f      	mov	r7, r3
 80049b4:	898b      	ldrh	r3, [r1, #12]
 80049b6:	4605      	mov	r5, r0
 80049b8:	05db      	lsls	r3, r3, #23
 80049ba:	460c      	mov	r4, r1
 80049bc:	4616      	mov	r6, r2
 80049be:	d505      	bpl.n	80049cc <__swrite+0x1e>
 80049c0:	2302      	movs	r3, #2
 80049c2:	2200      	movs	r2, #0
 80049c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049c8:	f000 f9c4 	bl	8004d54 <_lseek_r>
 80049cc:	89a3      	ldrh	r3, [r4, #12]
 80049ce:	4632      	mov	r2, r6
 80049d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80049d4:	81a3      	strh	r3, [r4, #12]
 80049d6:	4628      	mov	r0, r5
 80049d8:	463b      	mov	r3, r7
 80049da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80049de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80049e2:	f000 b869 	b.w	8004ab8 <_write_r>

080049e6 <__sseek>:
 80049e6:	b510      	push	{r4, lr}
 80049e8:	460c      	mov	r4, r1
 80049ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049ee:	f000 f9b1 	bl	8004d54 <_lseek_r>
 80049f2:	1c43      	adds	r3, r0, #1
 80049f4:	89a3      	ldrh	r3, [r4, #12]
 80049f6:	bf15      	itete	ne
 80049f8:	6560      	strne	r0, [r4, #84]	; 0x54
 80049fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80049fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004a02:	81a3      	strheq	r3, [r4, #12]
 8004a04:	bf18      	it	ne
 8004a06:	81a3      	strhne	r3, [r4, #12]
 8004a08:	bd10      	pop	{r4, pc}

08004a0a <__sclose>:
 8004a0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a0e:	f000 b8d3 	b.w	8004bb8 <_close_r>
	...

08004a14 <__swbuf_r>:
 8004a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a16:	460e      	mov	r6, r1
 8004a18:	4614      	mov	r4, r2
 8004a1a:	4605      	mov	r5, r0
 8004a1c:	b118      	cbz	r0, 8004a26 <__swbuf_r+0x12>
 8004a1e:	6983      	ldr	r3, [r0, #24]
 8004a20:	b90b      	cbnz	r3, 8004a26 <__swbuf_r+0x12>
 8004a22:	f7ff fb81 	bl	8004128 <__sinit>
 8004a26:	4b21      	ldr	r3, [pc, #132]	; (8004aac <__swbuf_r+0x98>)
 8004a28:	429c      	cmp	r4, r3
 8004a2a:	d12b      	bne.n	8004a84 <__swbuf_r+0x70>
 8004a2c:	686c      	ldr	r4, [r5, #4]
 8004a2e:	69a3      	ldr	r3, [r4, #24]
 8004a30:	60a3      	str	r3, [r4, #8]
 8004a32:	89a3      	ldrh	r3, [r4, #12]
 8004a34:	071a      	lsls	r2, r3, #28
 8004a36:	d52f      	bpl.n	8004a98 <__swbuf_r+0x84>
 8004a38:	6923      	ldr	r3, [r4, #16]
 8004a3a:	b36b      	cbz	r3, 8004a98 <__swbuf_r+0x84>
 8004a3c:	6923      	ldr	r3, [r4, #16]
 8004a3e:	6820      	ldr	r0, [r4, #0]
 8004a40:	b2f6      	uxtb	r6, r6
 8004a42:	1ac0      	subs	r0, r0, r3
 8004a44:	6963      	ldr	r3, [r4, #20]
 8004a46:	4637      	mov	r7, r6
 8004a48:	4283      	cmp	r3, r0
 8004a4a:	dc04      	bgt.n	8004a56 <__swbuf_r+0x42>
 8004a4c:	4621      	mov	r1, r4
 8004a4e:	4628      	mov	r0, r5
 8004a50:	f000 f944 	bl	8004cdc <_fflush_r>
 8004a54:	bb30      	cbnz	r0, 8004aa4 <__swbuf_r+0x90>
 8004a56:	68a3      	ldr	r3, [r4, #8]
 8004a58:	3001      	adds	r0, #1
 8004a5a:	3b01      	subs	r3, #1
 8004a5c:	60a3      	str	r3, [r4, #8]
 8004a5e:	6823      	ldr	r3, [r4, #0]
 8004a60:	1c5a      	adds	r2, r3, #1
 8004a62:	6022      	str	r2, [r4, #0]
 8004a64:	701e      	strb	r6, [r3, #0]
 8004a66:	6963      	ldr	r3, [r4, #20]
 8004a68:	4283      	cmp	r3, r0
 8004a6a:	d004      	beq.n	8004a76 <__swbuf_r+0x62>
 8004a6c:	89a3      	ldrh	r3, [r4, #12]
 8004a6e:	07db      	lsls	r3, r3, #31
 8004a70:	d506      	bpl.n	8004a80 <__swbuf_r+0x6c>
 8004a72:	2e0a      	cmp	r6, #10
 8004a74:	d104      	bne.n	8004a80 <__swbuf_r+0x6c>
 8004a76:	4621      	mov	r1, r4
 8004a78:	4628      	mov	r0, r5
 8004a7a:	f000 f92f 	bl	8004cdc <_fflush_r>
 8004a7e:	b988      	cbnz	r0, 8004aa4 <__swbuf_r+0x90>
 8004a80:	4638      	mov	r0, r7
 8004a82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a84:	4b0a      	ldr	r3, [pc, #40]	; (8004ab0 <__swbuf_r+0x9c>)
 8004a86:	429c      	cmp	r4, r3
 8004a88:	d101      	bne.n	8004a8e <__swbuf_r+0x7a>
 8004a8a:	68ac      	ldr	r4, [r5, #8]
 8004a8c:	e7cf      	b.n	8004a2e <__swbuf_r+0x1a>
 8004a8e:	4b09      	ldr	r3, [pc, #36]	; (8004ab4 <__swbuf_r+0xa0>)
 8004a90:	429c      	cmp	r4, r3
 8004a92:	bf08      	it	eq
 8004a94:	68ec      	ldreq	r4, [r5, #12]
 8004a96:	e7ca      	b.n	8004a2e <__swbuf_r+0x1a>
 8004a98:	4621      	mov	r1, r4
 8004a9a:	4628      	mov	r0, r5
 8004a9c:	f000 f81e 	bl	8004adc <__swsetup_r>
 8004aa0:	2800      	cmp	r0, #0
 8004aa2:	d0cb      	beq.n	8004a3c <__swbuf_r+0x28>
 8004aa4:	f04f 37ff 	mov.w	r7, #4294967295
 8004aa8:	e7ea      	b.n	8004a80 <__swbuf_r+0x6c>
 8004aaa:	bf00      	nop
 8004aac:	08005070 	.word	0x08005070
 8004ab0:	08005090 	.word	0x08005090
 8004ab4:	08005050 	.word	0x08005050

08004ab8 <_write_r>:
 8004ab8:	b538      	push	{r3, r4, r5, lr}
 8004aba:	4604      	mov	r4, r0
 8004abc:	4608      	mov	r0, r1
 8004abe:	4611      	mov	r1, r2
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	4d05      	ldr	r5, [pc, #20]	; (8004ad8 <_write_r+0x20>)
 8004ac4:	602a      	str	r2, [r5, #0]
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	f7fb fff8 	bl	8000abc <_write>
 8004acc:	1c43      	adds	r3, r0, #1
 8004ace:	d102      	bne.n	8004ad6 <_write_r+0x1e>
 8004ad0:	682b      	ldr	r3, [r5, #0]
 8004ad2:	b103      	cbz	r3, 8004ad6 <_write_r+0x1e>
 8004ad4:	6023      	str	r3, [r4, #0]
 8004ad6:	bd38      	pop	{r3, r4, r5, pc}
 8004ad8:	2000028c 	.word	0x2000028c

08004adc <__swsetup_r>:
 8004adc:	4b32      	ldr	r3, [pc, #200]	; (8004ba8 <__swsetup_r+0xcc>)
 8004ade:	b570      	push	{r4, r5, r6, lr}
 8004ae0:	681d      	ldr	r5, [r3, #0]
 8004ae2:	4606      	mov	r6, r0
 8004ae4:	460c      	mov	r4, r1
 8004ae6:	b125      	cbz	r5, 8004af2 <__swsetup_r+0x16>
 8004ae8:	69ab      	ldr	r3, [r5, #24]
 8004aea:	b913      	cbnz	r3, 8004af2 <__swsetup_r+0x16>
 8004aec:	4628      	mov	r0, r5
 8004aee:	f7ff fb1b 	bl	8004128 <__sinit>
 8004af2:	4b2e      	ldr	r3, [pc, #184]	; (8004bac <__swsetup_r+0xd0>)
 8004af4:	429c      	cmp	r4, r3
 8004af6:	d10f      	bne.n	8004b18 <__swsetup_r+0x3c>
 8004af8:	686c      	ldr	r4, [r5, #4]
 8004afa:	89a3      	ldrh	r3, [r4, #12]
 8004afc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004b00:	0719      	lsls	r1, r3, #28
 8004b02:	d42c      	bmi.n	8004b5e <__swsetup_r+0x82>
 8004b04:	06dd      	lsls	r5, r3, #27
 8004b06:	d411      	bmi.n	8004b2c <__swsetup_r+0x50>
 8004b08:	2309      	movs	r3, #9
 8004b0a:	6033      	str	r3, [r6, #0]
 8004b0c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004b10:	f04f 30ff 	mov.w	r0, #4294967295
 8004b14:	81a3      	strh	r3, [r4, #12]
 8004b16:	e03e      	b.n	8004b96 <__swsetup_r+0xba>
 8004b18:	4b25      	ldr	r3, [pc, #148]	; (8004bb0 <__swsetup_r+0xd4>)
 8004b1a:	429c      	cmp	r4, r3
 8004b1c:	d101      	bne.n	8004b22 <__swsetup_r+0x46>
 8004b1e:	68ac      	ldr	r4, [r5, #8]
 8004b20:	e7eb      	b.n	8004afa <__swsetup_r+0x1e>
 8004b22:	4b24      	ldr	r3, [pc, #144]	; (8004bb4 <__swsetup_r+0xd8>)
 8004b24:	429c      	cmp	r4, r3
 8004b26:	bf08      	it	eq
 8004b28:	68ec      	ldreq	r4, [r5, #12]
 8004b2a:	e7e6      	b.n	8004afa <__swsetup_r+0x1e>
 8004b2c:	0758      	lsls	r0, r3, #29
 8004b2e:	d512      	bpl.n	8004b56 <__swsetup_r+0x7a>
 8004b30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004b32:	b141      	cbz	r1, 8004b46 <__swsetup_r+0x6a>
 8004b34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004b38:	4299      	cmp	r1, r3
 8004b3a:	d002      	beq.n	8004b42 <__swsetup_r+0x66>
 8004b3c:	4630      	mov	r0, r6
 8004b3e:	f000 f99b 	bl	8004e78 <_free_r>
 8004b42:	2300      	movs	r3, #0
 8004b44:	6363      	str	r3, [r4, #52]	; 0x34
 8004b46:	89a3      	ldrh	r3, [r4, #12]
 8004b48:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004b4c:	81a3      	strh	r3, [r4, #12]
 8004b4e:	2300      	movs	r3, #0
 8004b50:	6063      	str	r3, [r4, #4]
 8004b52:	6923      	ldr	r3, [r4, #16]
 8004b54:	6023      	str	r3, [r4, #0]
 8004b56:	89a3      	ldrh	r3, [r4, #12]
 8004b58:	f043 0308 	orr.w	r3, r3, #8
 8004b5c:	81a3      	strh	r3, [r4, #12]
 8004b5e:	6923      	ldr	r3, [r4, #16]
 8004b60:	b94b      	cbnz	r3, 8004b76 <__swsetup_r+0x9a>
 8004b62:	89a3      	ldrh	r3, [r4, #12]
 8004b64:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004b68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b6c:	d003      	beq.n	8004b76 <__swsetup_r+0x9a>
 8004b6e:	4621      	mov	r1, r4
 8004b70:	4630      	mov	r0, r6
 8004b72:	f000 f927 	bl	8004dc4 <__smakebuf_r>
 8004b76:	89a0      	ldrh	r0, [r4, #12]
 8004b78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004b7c:	f010 0301 	ands.w	r3, r0, #1
 8004b80:	d00a      	beq.n	8004b98 <__swsetup_r+0xbc>
 8004b82:	2300      	movs	r3, #0
 8004b84:	60a3      	str	r3, [r4, #8]
 8004b86:	6963      	ldr	r3, [r4, #20]
 8004b88:	425b      	negs	r3, r3
 8004b8a:	61a3      	str	r3, [r4, #24]
 8004b8c:	6923      	ldr	r3, [r4, #16]
 8004b8e:	b943      	cbnz	r3, 8004ba2 <__swsetup_r+0xc6>
 8004b90:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004b94:	d1ba      	bne.n	8004b0c <__swsetup_r+0x30>
 8004b96:	bd70      	pop	{r4, r5, r6, pc}
 8004b98:	0781      	lsls	r1, r0, #30
 8004b9a:	bf58      	it	pl
 8004b9c:	6963      	ldrpl	r3, [r4, #20]
 8004b9e:	60a3      	str	r3, [r4, #8]
 8004ba0:	e7f4      	b.n	8004b8c <__swsetup_r+0xb0>
 8004ba2:	2000      	movs	r0, #0
 8004ba4:	e7f7      	b.n	8004b96 <__swsetup_r+0xba>
 8004ba6:	bf00      	nop
 8004ba8:	2000000c 	.word	0x2000000c
 8004bac:	08005070 	.word	0x08005070
 8004bb0:	08005090 	.word	0x08005090
 8004bb4:	08005050 	.word	0x08005050

08004bb8 <_close_r>:
 8004bb8:	b538      	push	{r3, r4, r5, lr}
 8004bba:	2300      	movs	r3, #0
 8004bbc:	4d05      	ldr	r5, [pc, #20]	; (8004bd4 <_close_r+0x1c>)
 8004bbe:	4604      	mov	r4, r0
 8004bc0:	4608      	mov	r0, r1
 8004bc2:	602b      	str	r3, [r5, #0]
 8004bc4:	f7fb ff96 	bl	8000af4 <_close>
 8004bc8:	1c43      	adds	r3, r0, #1
 8004bca:	d102      	bne.n	8004bd2 <_close_r+0x1a>
 8004bcc:	682b      	ldr	r3, [r5, #0]
 8004bce:	b103      	cbz	r3, 8004bd2 <_close_r+0x1a>
 8004bd0:	6023      	str	r3, [r4, #0]
 8004bd2:	bd38      	pop	{r3, r4, r5, pc}
 8004bd4:	2000028c 	.word	0x2000028c

08004bd8 <__sflush_r>:
 8004bd8:	898a      	ldrh	r2, [r1, #12]
 8004bda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bdc:	4605      	mov	r5, r0
 8004bde:	0710      	lsls	r0, r2, #28
 8004be0:	460c      	mov	r4, r1
 8004be2:	d457      	bmi.n	8004c94 <__sflush_r+0xbc>
 8004be4:	684b      	ldr	r3, [r1, #4]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	dc04      	bgt.n	8004bf4 <__sflush_r+0x1c>
 8004bea:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	dc01      	bgt.n	8004bf4 <__sflush_r+0x1c>
 8004bf0:	2000      	movs	r0, #0
 8004bf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bf4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004bf6:	2e00      	cmp	r6, #0
 8004bf8:	d0fa      	beq.n	8004bf0 <__sflush_r+0x18>
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004c00:	682f      	ldr	r7, [r5, #0]
 8004c02:	602b      	str	r3, [r5, #0]
 8004c04:	d032      	beq.n	8004c6c <__sflush_r+0x94>
 8004c06:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004c08:	89a3      	ldrh	r3, [r4, #12]
 8004c0a:	075a      	lsls	r2, r3, #29
 8004c0c:	d505      	bpl.n	8004c1a <__sflush_r+0x42>
 8004c0e:	6863      	ldr	r3, [r4, #4]
 8004c10:	1ac0      	subs	r0, r0, r3
 8004c12:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004c14:	b10b      	cbz	r3, 8004c1a <__sflush_r+0x42>
 8004c16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004c18:	1ac0      	subs	r0, r0, r3
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004c20:	4628      	mov	r0, r5
 8004c22:	6a21      	ldr	r1, [r4, #32]
 8004c24:	47b0      	blx	r6
 8004c26:	1c43      	adds	r3, r0, #1
 8004c28:	89a3      	ldrh	r3, [r4, #12]
 8004c2a:	d106      	bne.n	8004c3a <__sflush_r+0x62>
 8004c2c:	6829      	ldr	r1, [r5, #0]
 8004c2e:	291d      	cmp	r1, #29
 8004c30:	d82c      	bhi.n	8004c8c <__sflush_r+0xb4>
 8004c32:	4a29      	ldr	r2, [pc, #164]	; (8004cd8 <__sflush_r+0x100>)
 8004c34:	40ca      	lsrs	r2, r1
 8004c36:	07d6      	lsls	r6, r2, #31
 8004c38:	d528      	bpl.n	8004c8c <__sflush_r+0xb4>
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	6062      	str	r2, [r4, #4]
 8004c3e:	6922      	ldr	r2, [r4, #16]
 8004c40:	04d9      	lsls	r1, r3, #19
 8004c42:	6022      	str	r2, [r4, #0]
 8004c44:	d504      	bpl.n	8004c50 <__sflush_r+0x78>
 8004c46:	1c42      	adds	r2, r0, #1
 8004c48:	d101      	bne.n	8004c4e <__sflush_r+0x76>
 8004c4a:	682b      	ldr	r3, [r5, #0]
 8004c4c:	b903      	cbnz	r3, 8004c50 <__sflush_r+0x78>
 8004c4e:	6560      	str	r0, [r4, #84]	; 0x54
 8004c50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c52:	602f      	str	r7, [r5, #0]
 8004c54:	2900      	cmp	r1, #0
 8004c56:	d0cb      	beq.n	8004bf0 <__sflush_r+0x18>
 8004c58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004c5c:	4299      	cmp	r1, r3
 8004c5e:	d002      	beq.n	8004c66 <__sflush_r+0x8e>
 8004c60:	4628      	mov	r0, r5
 8004c62:	f000 f909 	bl	8004e78 <_free_r>
 8004c66:	2000      	movs	r0, #0
 8004c68:	6360      	str	r0, [r4, #52]	; 0x34
 8004c6a:	e7c2      	b.n	8004bf2 <__sflush_r+0x1a>
 8004c6c:	6a21      	ldr	r1, [r4, #32]
 8004c6e:	2301      	movs	r3, #1
 8004c70:	4628      	mov	r0, r5
 8004c72:	47b0      	blx	r6
 8004c74:	1c41      	adds	r1, r0, #1
 8004c76:	d1c7      	bne.n	8004c08 <__sflush_r+0x30>
 8004c78:	682b      	ldr	r3, [r5, #0]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d0c4      	beq.n	8004c08 <__sflush_r+0x30>
 8004c7e:	2b1d      	cmp	r3, #29
 8004c80:	d001      	beq.n	8004c86 <__sflush_r+0xae>
 8004c82:	2b16      	cmp	r3, #22
 8004c84:	d101      	bne.n	8004c8a <__sflush_r+0xb2>
 8004c86:	602f      	str	r7, [r5, #0]
 8004c88:	e7b2      	b.n	8004bf0 <__sflush_r+0x18>
 8004c8a:	89a3      	ldrh	r3, [r4, #12]
 8004c8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c90:	81a3      	strh	r3, [r4, #12]
 8004c92:	e7ae      	b.n	8004bf2 <__sflush_r+0x1a>
 8004c94:	690f      	ldr	r7, [r1, #16]
 8004c96:	2f00      	cmp	r7, #0
 8004c98:	d0aa      	beq.n	8004bf0 <__sflush_r+0x18>
 8004c9a:	0793      	lsls	r3, r2, #30
 8004c9c:	bf18      	it	ne
 8004c9e:	2300      	movne	r3, #0
 8004ca0:	680e      	ldr	r6, [r1, #0]
 8004ca2:	bf08      	it	eq
 8004ca4:	694b      	ldreq	r3, [r1, #20]
 8004ca6:	1bf6      	subs	r6, r6, r7
 8004ca8:	600f      	str	r7, [r1, #0]
 8004caa:	608b      	str	r3, [r1, #8]
 8004cac:	2e00      	cmp	r6, #0
 8004cae:	dd9f      	ble.n	8004bf0 <__sflush_r+0x18>
 8004cb0:	4633      	mov	r3, r6
 8004cb2:	463a      	mov	r2, r7
 8004cb4:	4628      	mov	r0, r5
 8004cb6:	6a21      	ldr	r1, [r4, #32]
 8004cb8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8004cbc:	47e0      	blx	ip
 8004cbe:	2800      	cmp	r0, #0
 8004cc0:	dc06      	bgt.n	8004cd0 <__sflush_r+0xf8>
 8004cc2:	89a3      	ldrh	r3, [r4, #12]
 8004cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8004cc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ccc:	81a3      	strh	r3, [r4, #12]
 8004cce:	e790      	b.n	8004bf2 <__sflush_r+0x1a>
 8004cd0:	4407      	add	r7, r0
 8004cd2:	1a36      	subs	r6, r6, r0
 8004cd4:	e7ea      	b.n	8004cac <__sflush_r+0xd4>
 8004cd6:	bf00      	nop
 8004cd8:	20400001 	.word	0x20400001

08004cdc <_fflush_r>:
 8004cdc:	b538      	push	{r3, r4, r5, lr}
 8004cde:	690b      	ldr	r3, [r1, #16]
 8004ce0:	4605      	mov	r5, r0
 8004ce2:	460c      	mov	r4, r1
 8004ce4:	b913      	cbnz	r3, 8004cec <_fflush_r+0x10>
 8004ce6:	2500      	movs	r5, #0
 8004ce8:	4628      	mov	r0, r5
 8004cea:	bd38      	pop	{r3, r4, r5, pc}
 8004cec:	b118      	cbz	r0, 8004cf6 <_fflush_r+0x1a>
 8004cee:	6983      	ldr	r3, [r0, #24]
 8004cf0:	b90b      	cbnz	r3, 8004cf6 <_fflush_r+0x1a>
 8004cf2:	f7ff fa19 	bl	8004128 <__sinit>
 8004cf6:	4b14      	ldr	r3, [pc, #80]	; (8004d48 <_fflush_r+0x6c>)
 8004cf8:	429c      	cmp	r4, r3
 8004cfa:	d11b      	bne.n	8004d34 <_fflush_r+0x58>
 8004cfc:	686c      	ldr	r4, [r5, #4]
 8004cfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d0ef      	beq.n	8004ce6 <_fflush_r+0xa>
 8004d06:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004d08:	07d0      	lsls	r0, r2, #31
 8004d0a:	d404      	bmi.n	8004d16 <_fflush_r+0x3a>
 8004d0c:	0599      	lsls	r1, r3, #22
 8004d0e:	d402      	bmi.n	8004d16 <_fflush_r+0x3a>
 8004d10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d12:	f7ff faa7 	bl	8004264 <__retarget_lock_acquire_recursive>
 8004d16:	4628      	mov	r0, r5
 8004d18:	4621      	mov	r1, r4
 8004d1a:	f7ff ff5d 	bl	8004bd8 <__sflush_r>
 8004d1e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004d20:	4605      	mov	r5, r0
 8004d22:	07da      	lsls	r2, r3, #31
 8004d24:	d4e0      	bmi.n	8004ce8 <_fflush_r+0xc>
 8004d26:	89a3      	ldrh	r3, [r4, #12]
 8004d28:	059b      	lsls	r3, r3, #22
 8004d2a:	d4dd      	bmi.n	8004ce8 <_fflush_r+0xc>
 8004d2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d2e:	f7ff fa9a 	bl	8004266 <__retarget_lock_release_recursive>
 8004d32:	e7d9      	b.n	8004ce8 <_fflush_r+0xc>
 8004d34:	4b05      	ldr	r3, [pc, #20]	; (8004d4c <_fflush_r+0x70>)
 8004d36:	429c      	cmp	r4, r3
 8004d38:	d101      	bne.n	8004d3e <_fflush_r+0x62>
 8004d3a:	68ac      	ldr	r4, [r5, #8]
 8004d3c:	e7df      	b.n	8004cfe <_fflush_r+0x22>
 8004d3e:	4b04      	ldr	r3, [pc, #16]	; (8004d50 <_fflush_r+0x74>)
 8004d40:	429c      	cmp	r4, r3
 8004d42:	bf08      	it	eq
 8004d44:	68ec      	ldreq	r4, [r5, #12]
 8004d46:	e7da      	b.n	8004cfe <_fflush_r+0x22>
 8004d48:	08005070 	.word	0x08005070
 8004d4c:	08005090 	.word	0x08005090
 8004d50:	08005050 	.word	0x08005050

08004d54 <_lseek_r>:
 8004d54:	b538      	push	{r3, r4, r5, lr}
 8004d56:	4604      	mov	r4, r0
 8004d58:	4608      	mov	r0, r1
 8004d5a:	4611      	mov	r1, r2
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	4d05      	ldr	r5, [pc, #20]	; (8004d74 <_lseek_r+0x20>)
 8004d60:	602a      	str	r2, [r5, #0]
 8004d62:	461a      	mov	r2, r3
 8004d64:	f7fb feea 	bl	8000b3c <_lseek>
 8004d68:	1c43      	adds	r3, r0, #1
 8004d6a:	d102      	bne.n	8004d72 <_lseek_r+0x1e>
 8004d6c:	682b      	ldr	r3, [r5, #0]
 8004d6e:	b103      	cbz	r3, 8004d72 <_lseek_r+0x1e>
 8004d70:	6023      	str	r3, [r4, #0]
 8004d72:	bd38      	pop	{r3, r4, r5, pc}
 8004d74:	2000028c 	.word	0x2000028c

08004d78 <__swhatbuf_r>:
 8004d78:	b570      	push	{r4, r5, r6, lr}
 8004d7a:	460e      	mov	r6, r1
 8004d7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d80:	4614      	mov	r4, r2
 8004d82:	2900      	cmp	r1, #0
 8004d84:	461d      	mov	r5, r3
 8004d86:	b096      	sub	sp, #88	; 0x58
 8004d88:	da08      	bge.n	8004d9c <__swhatbuf_r+0x24>
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004d90:	602a      	str	r2, [r5, #0]
 8004d92:	061a      	lsls	r2, r3, #24
 8004d94:	d410      	bmi.n	8004db8 <__swhatbuf_r+0x40>
 8004d96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d9a:	e00e      	b.n	8004dba <__swhatbuf_r+0x42>
 8004d9c:	466a      	mov	r2, sp
 8004d9e:	f000 f8c5 	bl	8004f2c <_fstat_r>
 8004da2:	2800      	cmp	r0, #0
 8004da4:	dbf1      	blt.n	8004d8a <__swhatbuf_r+0x12>
 8004da6:	9a01      	ldr	r2, [sp, #4]
 8004da8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004dac:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004db0:	425a      	negs	r2, r3
 8004db2:	415a      	adcs	r2, r3
 8004db4:	602a      	str	r2, [r5, #0]
 8004db6:	e7ee      	b.n	8004d96 <__swhatbuf_r+0x1e>
 8004db8:	2340      	movs	r3, #64	; 0x40
 8004dba:	2000      	movs	r0, #0
 8004dbc:	6023      	str	r3, [r4, #0]
 8004dbe:	b016      	add	sp, #88	; 0x58
 8004dc0:	bd70      	pop	{r4, r5, r6, pc}
	...

08004dc4 <__smakebuf_r>:
 8004dc4:	898b      	ldrh	r3, [r1, #12]
 8004dc6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004dc8:	079d      	lsls	r5, r3, #30
 8004dca:	4606      	mov	r6, r0
 8004dcc:	460c      	mov	r4, r1
 8004dce:	d507      	bpl.n	8004de0 <__smakebuf_r+0x1c>
 8004dd0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004dd4:	6023      	str	r3, [r4, #0]
 8004dd6:	6123      	str	r3, [r4, #16]
 8004dd8:	2301      	movs	r3, #1
 8004dda:	6163      	str	r3, [r4, #20]
 8004ddc:	b002      	add	sp, #8
 8004dde:	bd70      	pop	{r4, r5, r6, pc}
 8004de0:	466a      	mov	r2, sp
 8004de2:	ab01      	add	r3, sp, #4
 8004de4:	f7ff ffc8 	bl	8004d78 <__swhatbuf_r>
 8004de8:	9900      	ldr	r1, [sp, #0]
 8004dea:	4605      	mov	r5, r0
 8004dec:	4630      	mov	r0, r6
 8004dee:	f7ff fa5b 	bl	80042a8 <_malloc_r>
 8004df2:	b948      	cbnz	r0, 8004e08 <__smakebuf_r+0x44>
 8004df4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004df8:	059a      	lsls	r2, r3, #22
 8004dfa:	d4ef      	bmi.n	8004ddc <__smakebuf_r+0x18>
 8004dfc:	f023 0303 	bic.w	r3, r3, #3
 8004e00:	f043 0302 	orr.w	r3, r3, #2
 8004e04:	81a3      	strh	r3, [r4, #12]
 8004e06:	e7e3      	b.n	8004dd0 <__smakebuf_r+0xc>
 8004e08:	4b0d      	ldr	r3, [pc, #52]	; (8004e40 <__smakebuf_r+0x7c>)
 8004e0a:	62b3      	str	r3, [r6, #40]	; 0x28
 8004e0c:	89a3      	ldrh	r3, [r4, #12]
 8004e0e:	6020      	str	r0, [r4, #0]
 8004e10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e14:	81a3      	strh	r3, [r4, #12]
 8004e16:	9b00      	ldr	r3, [sp, #0]
 8004e18:	6120      	str	r0, [r4, #16]
 8004e1a:	6163      	str	r3, [r4, #20]
 8004e1c:	9b01      	ldr	r3, [sp, #4]
 8004e1e:	b15b      	cbz	r3, 8004e38 <__smakebuf_r+0x74>
 8004e20:	4630      	mov	r0, r6
 8004e22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e26:	f000 f893 	bl	8004f50 <_isatty_r>
 8004e2a:	b128      	cbz	r0, 8004e38 <__smakebuf_r+0x74>
 8004e2c:	89a3      	ldrh	r3, [r4, #12]
 8004e2e:	f023 0303 	bic.w	r3, r3, #3
 8004e32:	f043 0301 	orr.w	r3, r3, #1
 8004e36:	81a3      	strh	r3, [r4, #12]
 8004e38:	89a0      	ldrh	r0, [r4, #12]
 8004e3a:	4305      	orrs	r5, r0
 8004e3c:	81a5      	strh	r5, [r4, #12]
 8004e3e:	e7cd      	b.n	8004ddc <__smakebuf_r+0x18>
 8004e40:	080040c1 	.word	0x080040c1

08004e44 <memchr>:
 8004e44:	4603      	mov	r3, r0
 8004e46:	b510      	push	{r4, lr}
 8004e48:	b2c9      	uxtb	r1, r1
 8004e4a:	4402      	add	r2, r0
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	4618      	mov	r0, r3
 8004e50:	d101      	bne.n	8004e56 <memchr+0x12>
 8004e52:	2000      	movs	r0, #0
 8004e54:	e003      	b.n	8004e5e <memchr+0x1a>
 8004e56:	7804      	ldrb	r4, [r0, #0]
 8004e58:	3301      	adds	r3, #1
 8004e5a:	428c      	cmp	r4, r1
 8004e5c:	d1f6      	bne.n	8004e4c <memchr+0x8>
 8004e5e:	bd10      	pop	{r4, pc}

08004e60 <__malloc_lock>:
 8004e60:	4801      	ldr	r0, [pc, #4]	; (8004e68 <__malloc_lock+0x8>)
 8004e62:	f7ff b9ff 	b.w	8004264 <__retarget_lock_acquire_recursive>
 8004e66:	bf00      	nop
 8004e68:	20000280 	.word	0x20000280

08004e6c <__malloc_unlock>:
 8004e6c:	4801      	ldr	r0, [pc, #4]	; (8004e74 <__malloc_unlock+0x8>)
 8004e6e:	f7ff b9fa 	b.w	8004266 <__retarget_lock_release_recursive>
 8004e72:	bf00      	nop
 8004e74:	20000280 	.word	0x20000280

08004e78 <_free_r>:
 8004e78:	b538      	push	{r3, r4, r5, lr}
 8004e7a:	4605      	mov	r5, r0
 8004e7c:	2900      	cmp	r1, #0
 8004e7e:	d040      	beq.n	8004f02 <_free_r+0x8a>
 8004e80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e84:	1f0c      	subs	r4, r1, #4
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	bfb8      	it	lt
 8004e8a:	18e4      	addlt	r4, r4, r3
 8004e8c:	f7ff ffe8 	bl	8004e60 <__malloc_lock>
 8004e90:	4a1c      	ldr	r2, [pc, #112]	; (8004f04 <_free_r+0x8c>)
 8004e92:	6813      	ldr	r3, [r2, #0]
 8004e94:	b933      	cbnz	r3, 8004ea4 <_free_r+0x2c>
 8004e96:	6063      	str	r3, [r4, #4]
 8004e98:	6014      	str	r4, [r2, #0]
 8004e9a:	4628      	mov	r0, r5
 8004e9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ea0:	f7ff bfe4 	b.w	8004e6c <__malloc_unlock>
 8004ea4:	42a3      	cmp	r3, r4
 8004ea6:	d908      	bls.n	8004eba <_free_r+0x42>
 8004ea8:	6820      	ldr	r0, [r4, #0]
 8004eaa:	1821      	adds	r1, r4, r0
 8004eac:	428b      	cmp	r3, r1
 8004eae:	bf01      	itttt	eq
 8004eb0:	6819      	ldreq	r1, [r3, #0]
 8004eb2:	685b      	ldreq	r3, [r3, #4]
 8004eb4:	1809      	addeq	r1, r1, r0
 8004eb6:	6021      	streq	r1, [r4, #0]
 8004eb8:	e7ed      	b.n	8004e96 <_free_r+0x1e>
 8004eba:	461a      	mov	r2, r3
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	b10b      	cbz	r3, 8004ec4 <_free_r+0x4c>
 8004ec0:	42a3      	cmp	r3, r4
 8004ec2:	d9fa      	bls.n	8004eba <_free_r+0x42>
 8004ec4:	6811      	ldr	r1, [r2, #0]
 8004ec6:	1850      	adds	r0, r2, r1
 8004ec8:	42a0      	cmp	r0, r4
 8004eca:	d10b      	bne.n	8004ee4 <_free_r+0x6c>
 8004ecc:	6820      	ldr	r0, [r4, #0]
 8004ece:	4401      	add	r1, r0
 8004ed0:	1850      	adds	r0, r2, r1
 8004ed2:	4283      	cmp	r3, r0
 8004ed4:	6011      	str	r1, [r2, #0]
 8004ed6:	d1e0      	bne.n	8004e9a <_free_r+0x22>
 8004ed8:	6818      	ldr	r0, [r3, #0]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	4401      	add	r1, r0
 8004ede:	6011      	str	r1, [r2, #0]
 8004ee0:	6053      	str	r3, [r2, #4]
 8004ee2:	e7da      	b.n	8004e9a <_free_r+0x22>
 8004ee4:	d902      	bls.n	8004eec <_free_r+0x74>
 8004ee6:	230c      	movs	r3, #12
 8004ee8:	602b      	str	r3, [r5, #0]
 8004eea:	e7d6      	b.n	8004e9a <_free_r+0x22>
 8004eec:	6820      	ldr	r0, [r4, #0]
 8004eee:	1821      	adds	r1, r4, r0
 8004ef0:	428b      	cmp	r3, r1
 8004ef2:	bf01      	itttt	eq
 8004ef4:	6819      	ldreq	r1, [r3, #0]
 8004ef6:	685b      	ldreq	r3, [r3, #4]
 8004ef8:	1809      	addeq	r1, r1, r0
 8004efa:	6021      	streq	r1, [r4, #0]
 8004efc:	6063      	str	r3, [r4, #4]
 8004efe:	6054      	str	r4, [r2, #4]
 8004f00:	e7cb      	b.n	8004e9a <_free_r+0x22>
 8004f02:	bd38      	pop	{r3, r4, r5, pc}
 8004f04:	20000284 	.word	0x20000284

08004f08 <_read_r>:
 8004f08:	b538      	push	{r3, r4, r5, lr}
 8004f0a:	4604      	mov	r4, r0
 8004f0c:	4608      	mov	r0, r1
 8004f0e:	4611      	mov	r1, r2
 8004f10:	2200      	movs	r2, #0
 8004f12:	4d05      	ldr	r5, [pc, #20]	; (8004f28 <_read_r+0x20>)
 8004f14:	602a      	str	r2, [r5, #0]
 8004f16:	461a      	mov	r2, r3
 8004f18:	f7fb fdb3 	bl	8000a82 <_read>
 8004f1c:	1c43      	adds	r3, r0, #1
 8004f1e:	d102      	bne.n	8004f26 <_read_r+0x1e>
 8004f20:	682b      	ldr	r3, [r5, #0]
 8004f22:	b103      	cbz	r3, 8004f26 <_read_r+0x1e>
 8004f24:	6023      	str	r3, [r4, #0]
 8004f26:	bd38      	pop	{r3, r4, r5, pc}
 8004f28:	2000028c 	.word	0x2000028c

08004f2c <_fstat_r>:
 8004f2c:	b538      	push	{r3, r4, r5, lr}
 8004f2e:	2300      	movs	r3, #0
 8004f30:	4d06      	ldr	r5, [pc, #24]	; (8004f4c <_fstat_r+0x20>)
 8004f32:	4604      	mov	r4, r0
 8004f34:	4608      	mov	r0, r1
 8004f36:	4611      	mov	r1, r2
 8004f38:	602b      	str	r3, [r5, #0]
 8004f3a:	f7fb fde6 	bl	8000b0a <_fstat>
 8004f3e:	1c43      	adds	r3, r0, #1
 8004f40:	d102      	bne.n	8004f48 <_fstat_r+0x1c>
 8004f42:	682b      	ldr	r3, [r5, #0]
 8004f44:	b103      	cbz	r3, 8004f48 <_fstat_r+0x1c>
 8004f46:	6023      	str	r3, [r4, #0]
 8004f48:	bd38      	pop	{r3, r4, r5, pc}
 8004f4a:	bf00      	nop
 8004f4c:	2000028c 	.word	0x2000028c

08004f50 <_isatty_r>:
 8004f50:	b538      	push	{r3, r4, r5, lr}
 8004f52:	2300      	movs	r3, #0
 8004f54:	4d05      	ldr	r5, [pc, #20]	; (8004f6c <_isatty_r+0x1c>)
 8004f56:	4604      	mov	r4, r0
 8004f58:	4608      	mov	r0, r1
 8004f5a:	602b      	str	r3, [r5, #0]
 8004f5c:	f7fb fde4 	bl	8000b28 <_isatty>
 8004f60:	1c43      	adds	r3, r0, #1
 8004f62:	d102      	bne.n	8004f6a <_isatty_r+0x1a>
 8004f64:	682b      	ldr	r3, [r5, #0]
 8004f66:	b103      	cbz	r3, 8004f6a <_isatty_r+0x1a>
 8004f68:	6023      	str	r3, [r4, #0]
 8004f6a:	bd38      	pop	{r3, r4, r5, pc}
 8004f6c:	2000028c 	.word	0x2000028c

08004f70 <_init>:
 8004f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f72:	bf00      	nop
 8004f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f76:	bc08      	pop	{r3}
 8004f78:	469e      	mov	lr, r3
 8004f7a:	4770      	bx	lr

08004f7c <_fini>:
 8004f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f7e:	bf00      	nop
 8004f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f82:	bc08      	pop	{r3}
 8004f84:	469e      	mov	lr, r3
 8004f86:	4770      	bx	lr
